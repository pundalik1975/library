;
;/*******************************************************
;derived from mbscan4.c
;to do:
;*add led logic
;*add decimal point for pt100 0.1
;*add relay logic and link to led status
;*add common relay logic
;*add range limits for thermocouple and pt100
;*add skip status
;*eeprom store and retrieve dp status.
;add serial speed
;
;
;derived from mbscan3.c
;date: 01-11-2019
;reason:
;to add voltage and 4~20mA tables
;to correct blinking issue
;to add decimal point
;
;date 04-10-2019
;reason: to add menu routines
;main menu: Scan time st,offset OSx8, skip/unskip x 8,alarm low x 8,alarm high x8,input x 8, modbus id,baudrate
;
;
;derived from mbscan1.c
;date: 2-10-2019
;achieved:
;*display and led scan
;*adc 3421 operating with mux scanning
;
;
;todo
;* scan display with chno. on bottom and pv on top. fixed scan time of 2 seconds
;
;
;
;
;
;
;
;
;
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : mbscan
;Version : 1.0
;Date    : 10/1/2019
;Author  : pundalik
;Company : bhoomi controls
;Comments:
;this is compatible with mbscan1/2/3/4
;hardware
;
;
;Chip type               : ATmega32A
;Program type            : Application
;AVR Core Clock frequency: 11.059200 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// I2C Bus functions
;#include <i2c.h>
;
;// Declare your global variables here
;
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;
;
;
;#define digit1() PORTC.0 = 1
;#define digit2() PORTC.7 = 1
;#define digit3() PORTC.6 = 1
;#define digit4() PORTC.5 = 1
;#define digit5() PORTC.1 = 1
;#define digit6() PORTC.2 = 1
;#define digit7() PORTC.3 = 1
;#define digit8() PORTC.4 = 1
;#define digit9() PORTB.6 = 1        //led red common
;#define digit10() PORTB.7 = 1       //led green common
;
;#define mb_dir  PORTD.2
;
;#define relay1 PORTD.6
;#define relay2 PORTD.7
;
;#define key1 PINB.2
;#define key2 PINB.3
;#define key3 PINB.4
;#define key4 PINB.5
;#define key5 PINB.2
;
;#define mux9 PORTD.3
;#define mux10 PORTD.4
;#define mux11 PORTD.5
;
;void clear_display(void)
; 0000 006F {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0070 PORTA =0xff;    //segment off
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0071 PORTC = 0x00;  //digit drive off
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0072 PORTB.6 = 0;   //led common off
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0073 PORTB.7 =0;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0074 
; 0000 0075 
; 0000 0076 }
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;
;unsigned short int led_status,led_status1;
;unsigned short int display_buffer[10];
;short int dummy[1] = {0};
;short int dummy2[1] = {0};
;int process_value[8];
;short int display_count;
;short int display_scan_cnt;
;
;#define all_led_off() led_status = 0xff;             //red led status
;#define rled3_on() led_status &= 0xfe
;#define rled2_on() led_status &= 0xfd
;#define rled1_on() led_status &= 0xfb
;#define rled4_on() led_status &= 0xf7
;#define rled5_on() led_status &= 0xef
;#define rled6_on() led_status &= 0xdf
;#define rled7_on() led_status &= 0xbf
;#define rled8_on() led_status &= 0x7f
;#define rled3_off() led_status |= 0x01
;#define rled2_off() led_status |= 0x02
;#define rled1_off() led_status |= 0x04
;#define rled4_off() led_status |= 0x08
;#define rled5_off() led_status |= 0x10
;#define rled6_off() led_status |= 0x20
;#define rled7_off() led_status |= 0x40
;#define rled8_off() led_status |= 0x80
;
;#define all_led_off1() led_status1 = 0xff;             //red led status
;#define gled3_on() led_status1 &= 0xfe
;#define gled2_on() led_status1 &= 0xfd
;#define gled1_on() led_status1 &= 0xfb
;#define gled4_on() led_status1 &= 0xf7
;#define gled5_on() led_status1 &= 0xef
;#define gled6_on() led_status1 &= 0xdf
;#define gled7_on() led_status1 &= 0xbf
;#define gled8_on() led_status1 &= 0x7f
;#define gled3_off() led_status1 |= 0x01
;#define gled2_off() led_status1 |= 0x02
;#define gled1_off() led_status1 |= 0x04
;#define gled4_off() led_status1 |= 0x08
;#define gled5_off() led_status1 |= 0x10
;#define gled6_off() led_status1 |= 0x20
;#define gled7_off() led_status1 |= 0x40
;#define gled8_off() led_status1 |= 0x80
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 48
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index=0,rx_rd_index=0;
;#else
;unsigned int rx_wr_index=0,rx_rd_index=0;
;#endif
;
;#if RX_BUFFER_SIZE < 256
;unsigned char rx_counter=0;
;#else
;unsigned int rx_counter=0;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 00B9 {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 00BA char status,data;
; 0000 00BB status=UCSRA;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 00BC data=UDR;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 00BD if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 00BE    {
; 0000 00BF    rx_buffer[rx_wr_index++]=data;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 00C0 #if RX_BUFFER_SIZE == 256
; 0000 00C1    // special case for receiver buffer size=256
; 0000 00C2    if (++rx_counter == 0) rx_buffer_overflow=1;
; 0000 00C3 #else
; 0000 00C4    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 00C5    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 00C6       {
; 0000 00C7       rx_counter=0;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 00C8       rx_buffer_overflow=1;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 00C9       }
; 0000 00CA #endif
; 0000 00CB    }
;PCODE: $00000038 VOL: 0
; 0000 00CC }
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 00D3 {
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 00D4 char data;
; 0000 00D5 while (rx_counter==0);
;PCODE: $00000040 VOL: 0
;	data -> R17
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 00D6 data=rx_buffer[rx_rd_index++];
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 00D7 #if RX_BUFFER_SIZE != 256
; 0000 00D8 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 00D9 #endif
; 0000 00DA #asm("cli")
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
	cli
;PCODE: $00000052 VOL: 0
; 0000 00DB --rx_counter;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 00DC #asm("sei")
;PCODE: $00000056 VOL: 0
	sei
;PCODE: $00000057 VOL: 0
; 0000 00DD return data;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 00DE }
;PCODE: $0000005B VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 48
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE <= 256
;unsigned char tx_wr_index=0,tx_rd_index=0;
;#else
;unsigned int tx_wr_index=0,tx_rd_index=0;
;#endif
;
;#if TX_BUFFER_SIZE < 256
;unsigned char tx_counter=0;
;#else
;unsigned int tx_counter=0;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 00F4 {
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 00F5 if (tx_counter)
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 00F6    {
; 0000 00F7    --tx_counter;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 00F8    UDR=tx_buffer[tx_rd_index++];
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 00F9 #if TX_BUFFER_SIZE != 256
; 0000 00FA    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 00FB #endif
; 0000 00FC    }
;PCODE: $00000071 VOL: 0
; 0000 00FD }
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 0104 {
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0105 while (tx_counter == TX_BUFFER_SIZE);
;PCODE: $00000078 VOL: 0
;	c -> Y+0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0106 #asm("cli")
;PCODE: $0000007F VOL: 0
	cli
;PCODE: $00000080 VOL: 0
; 0000 0107 if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0108    {
; 0000 0109    tx_buffer[tx_wr_index++]=c;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 010A #if TX_BUFFER_SIZE != 256
; 0000 010B    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 010C #endif
; 0000 010D    ++tx_counter;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 010E    }
; 0000 010F else
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0110    UDR=c;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0111 #asm("sei")
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
	sei
;PCODE: $000000A0 VOL: 0
; 0000 0112 }
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;#include <delay.h>
;
;
;//                              0     1     2   3    4    5    6    7     8    9   10    11   12   13   14   15   16   1 ...
;//                              0     1     2   3    4    5    6    7     8    9    a    b    c    d    e    f    g    h ...
;unsigned char segment_table[]= {0x84,0xf5,0xc2,0xc1,0xb1,0x89,0x88,0xe5,0x80,0x81,0xa0,0x98,0x8e,0xd0,0x8a,0xaa,0x8c,0xb ...

	.DSEG
;bit blink_flag,blinking,qsecfl,tsec_fl,hsec_fl;
;short int blink_digit;
;short int mux_scan,tsec_cnt;
;
;//key routine map
;
;short int key_count;
;bit key1_old,key2_old,key3_old,key4_old;
;bit menu_fl;
;short int menu_count,item1,item2;
;short int level;    //level  = 0,1,2 sub level
;short int item1,item2;  // item 1 has common parameters st/id/baudrate
;//menu text
;short int ms_menu[]={21,14,22,27};
;//menu message
;//gen,os,skip,r-lo,r-hi,a-lo,a-hi,inp
;short int message_menu[] = {33,16,14,22,33,33,23,05,05,19,01,24,25,30,20,23,25,30,17,01,10,30,20,23,10,30,17,01,33,01,22 ...
;//st,id,baud
;short int message_gen[]={33,33,5,26,33,33,1,13,11,10,27,13};
;//os-1,os-2.....os-8
;short int message_os[]={23,5,30,1,23,5,30,2,23,5,30,3,23,5,30,4,23,5,30,5,23,5,30,6,23,5,30,7,23,5,30,8};
;//sk-1,sk-2.....sk-8
;short int message_skip[]={05,19,30,01,05,19,30,02,05,19,30,03,05,19,30,04,05,19,30,05,05,19,30,06,05,19,30,07,05,19,30,8 ...
;//rl-1,rl-2....rl-8
;short int message_rlow[]={25,20,30,01,25,20,30,02,25,20,30,03,25,20,30,04,25,20,30,05,25,20,30,06,25,20,30,07,25,20,30,8 ...
;//rh-1...rh-8
;short int message_rhigh[]={25,17,30,01,25,17,30,02,25,17,30,03,25,17,30,04,25,17,30,05,25,17,30,06,25,17,30,07,25,17,30, ...
;//al-1.....al-8
;short int message_alow[]={10,20,30,01,10,20,30,02,10,20,30,03,10,20,30,04,10,20,30,05,10,20,30,06,10,20,30,07,25,20,30,8 ...
;//ah-1...ah-8
;short int message_ahigh[]={10,17,30,01,10,17,30,02,10,17,30,03,10,17,30,04,10,17,30,05,10,17,30,06,10,17,30,07,10,17,30, ...
;//in-1....in-8
;short int message_in[]={01,22,30,01,01,22,30,02,01,22,30,03,01,22,30,04,01,22,30,05,01,22,30,06,01,22,30,07,01,22,30,8};
;//dp-1....dp-8
;short int message_dp[]={13,24,30,1,13,24,30,2,13,24,30,3,13,24,30,4,13,24,30,5,13,24,30,6,13,24,30,7,13,24,30,8};
;
;
;
;//sub menu messages for skip/unskip,input
;//unsk/skip
;short int message_skuk[]={27,22,05,19,05,19,01,24};
;//pt1,pt2,j,k,r,s,t,volt,4~20
;short int message_inp[]={33,24,26,01,33,24,26,02,33,33,33,18,33,33,33,19,33,33,33,25,33,33,33,05,33,33,33,26,27,23,20,26 ...
;short int message_baud[]={33,32,6,19,1,32,2,19};  // 9.6k and 19.2k
;short int message_cal[]={12,20,30,01,12,20,30,02,12,20,30,03,12,20,30,04,12,20,30,05,12,20,30,06,12,20,30,07,12,20,30,8} ...
;short int message_dp1[]={34,0,0,1,0,34,0,1,0,0,34,1,0,0,0,1}; //0.001,00.01,000.1,0001
;
;bit cal_fl,ser_fl;     //calibration mode flag;
;
;
;
;// end of key routine parameters map/////
;
;int table_p[]={-8388,-6176,-4054,-2000,0,1955,3870,5730,7554,9335,11075,12775,14432,16052,17635,19171,20685,22158};
;int table_j[]={0,2585,5269,8010,10779,13555,16327,19090,21848,24610,27393,30216,33102,36071,39132};
;int table_k[]={0,2023,4096,6138,8138,10153,12209,14293,16397,18516,20644,22776,24905,27025,29129,31213,33275,35313,37326 ...
;int table_r[]={0,296,647,1041,1469,1923,2401,2896,3408,3933,4471,5021,5583,6157,6743,7340,7950,8571,9205,9850,10506,1117 ...
;int table_s[]={0,299,646,1029,1441,1874,2323,2786,3259,3742,4233,4732,5239,5753,6275,6806,7345,7893,8449,9014,9587,10168 ...
;int table_t[]={0,2036,4279,6704,9288,12013,14862,17819};
;
;//memory map
;int gen[8];
;eeprom int ee_gen[8]={1,1,0,0,0,0,0,0};
;int os[8];
;eeprom int ee_os[8]={0,0,0,0,0,0,0,0};
;int skip[8];
;eeprom int ee_skip[8]={0,0,0,0,0,0,0,0};
;int rlow[8];
;eeprom int ee_rlow[8]={0,0,0,0,0,0,0,0};
;int rhigh[8];
;eeprom int ee_rhigh[8]={100,100,100,100,100,100,100,100};
;int alow[8];
;eeprom int ee_alow[8]={0,0,0,0,0,0,0,0};
;int ahigh[8];
;eeprom int ee_ahigh[8]={100,100,100,100,100,100,100,100};
;int input[8];
;eeprom int ee_input[8]={0,0,0,0,0,0,0,0};
;int dp[8];
;eeprom int ee_dp[8]={0,0,0,0,0,0,0,0};
;
;int cal_zero[8];
;eeprom int ee_cal_zero[8]={10300,10300,10300,10300,10300,10300,10300,10300};
;int cal_span[8];
;eeprom int ee_cal_span[8]={21300,21300,21300,21300,21300,21300,21300,21300};
;
;
;
; void adc3421_init(void)
; 0000 0176 {

	.CSEG
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0177 i2c_start();
;PCODE: $000000A6 VOL: 0
; 0000 0178 i2c_write(0xd2);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0179 delay_ms(1);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 017A //i2c_write(0x9f);   //18 bit mode 8v/v
; 0000 017B i2c_write(0x98);        //16 bit 1v/v
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 017C i2c_stop();
;PCODE: $000000AE VOL: 0
; 0000 017D }
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;
;/*
;long int adc3421_read18(void)
;{
; unsigned int buffer1;
; unsigned int buffer2,buffer3;
; long int buffer4;
; i2c_start();
; buffer1 = i2c_write(0xd3);
; buffer1 = i2c_read(1);
; buffer2 = i2c_read(1);
; buffer3 = i2c_read(0);
; i2c_stop();
; buffer1 = buffer1 & 0x01;
; buffer4 = (long) (buffer1) * 65536 ;
; buffer4 = buffer4 + ((long)(buffer2) * 256);
; buffer4 = buffer4 + (long)(buffer3);
; return(buffer4);
;}
;*/
;
;int adc3421_read(void)
; 0000 0194 {
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0195  unsigned int buffer1;
; 0000 0196  unsigned int buffer2;
; 0000 0197 signed int buffer4;
; 0000 0198  i2c_start();
;PCODE: $000000B3 VOL: 0
;	buffer1 -> R16,R17
;	buffer2 -> R18,R19
;	buffer4 -> R20,R21
;PCODE: $000000B4 VOL: 0
; 0000 0199  buffer1 = i2c_write(0xd3);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 019A  buffer1 = i2c_read(1);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 019B  buffer2 = i2c_read(0);
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 019C  i2c_stop();
;PCODE: $000000C1 VOL: 0
; 0000 019D  //buffer1 = buffer1 & 0x7f;      //ignore sign bit
; 0000 019E  //buffer4 = (long)(buffer1) * 256);
; 0000 019F  //buffer4 = buffer4 + (long)(buffer2);
; 0000 01A0  buffer4 = (buffer1 *256) + buffer2;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 01A1 if (buffer4<0) buffer4 = -buffer4;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 01A2  return(buffer4);
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 01A3 }
;PCODE: $000000D0 VOL: 0
;
;
;int linearise_p(float a,float zero_tc,float span_tc)
; 0000 01A7 {
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 01A8 int number =0;
; 0000 01A9 int count;
; 0000 01AA int b=0;
; 0000 01AB long int temp=0;
; 0000 01AC float temp1=0;
; 0000 01AD int true_value = 0;
; 0000 01AE 
; 0000 01AF temp1 = ((a - zero_tc) /(span_tc - zero_tc)) * 11075;    //adc value of 300 deg. is 11075 in table_p
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;	a -> Y+24
;	zero_tc -> Y+20
;	span_tc -> Y+16
;	number -> R16,R17
;	count -> R18,R19
;	b -> R20,R21
;	temp -> Y+12
;	temp1 -> Y+8
;	true_value -> Y+6
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 01B0 b = (int)temp1;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 01B1 
; 0000 01B2 for (count=0;count <= 18; count++)
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 01B3     {
; 0000 01B4     if (b>table_p[count] && b <= table_p[count+1])
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 01B5         {
; 0000 01B6         number = count;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 01B7         break;
;PCODE: $0000010A VOL: 0
; 0000 01B8         }
; 0000 01B9     }
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 01BA 
; 0000 01BB temp = ((500*(temp1-(float)table_p[number]))/((float)table_p[number+1] - (float)table_p[number]))+ ((long)(number-4) * 5 ...
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 01BC true_value = (int) temp;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 01BD return (true_value);
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 01BE }
;PCODE: $00000141 VOL: 0
;
;
;int linearise_tc(float a,float zero_tc,float span_tc,int iter,int* tabletc)
; 0000 01C2 {
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 01C3 int number =0;
; 0000 01C4 int count;
; 0000 01C5 int b=0;
; 0000 01C6 long int temp=0;
; 0000 01C7 float temp1=0;
; 0000 01C8 int true_value = 0;
; 0000 01C9 
; 0000 01CA temp1 = ((a - zero_tc)*50000 /(span_tc - zero_tc));    //adc value of 300 deg. is 11075 in table_p
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;	a -> Y+28
;	zero_tc -> Y+24
;	span_tc -> Y+20
;	iter -> Y+18
;	*tabletc -> Y+16
;	number -> R16,R17
;	count -> R18,R19
;	b -> R20,R21
;	temp -> Y+12
;	temp1 -> Y+8
;	true_value -> Y+6
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 01CB b = (int)temp1;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 01CC 
; 0000 01CD for (count=0;count <= iter; count++)
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 01CE     {
; 0000 01CF     if (b> *(tabletc+count) && b <= *(tabletc+count+1))
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 01D0         {
; 0000 01D1         number = count;
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 01D2         break;
;PCODE: $0000017C VOL: 0
; 0000 01D3         }
; 0000 01D4     }
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 01D5 
; 0000 01D6 temp = (50 * (temp1 - *(tabletc+number))/( *(tabletc+number+1) - *(tabletc+number))) + ((long)number*50) ;
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 01D7 
; 0000 01D8 
; 0000 01D9 //temp = ((500*(temp1-(float)table_p[number]))/((float)table_p[number+1] - (float)table_p[number]))+ ((long)(number-4) * ...
; 0000 01DA true_value = (int) temp;
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 01DB return (true_value);
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 01DC }
;PCODE: $000001B1 VOL: 0
;
;
;
;
;void increment_value(int* value,int low_limit,int high_limit,short int power)
; 0000 01E2 {
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 01E3 int a;
; 0000 01E4 int b=1;
; 0000 01E5 for (a=0;a<power;a++) b = b*10;
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;	*value -> Y+10
;	low_limit -> Y+8
;	high_limit -> Y+6
;	power -> Y+4
;	a -> R16,R17
;	b -> R18,R19
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 01E6 *value = *value + b;
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 01E7 if (*value < low_limit) *value = low_limit;
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 01E8 if (*value >= high_limit) *value = high_limit;
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 01E9 }
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;
;void decrement_value(int* value,int low_limit,int high_limit,short int power)
; 0000 01EC {
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 01ED int a;
; 0000 01EE int b=1;
; 0000 01EF for (a=0;a<power;a++) b = b*10;
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;	*value -> Y+10
;	low_limit -> Y+8
;	high_limit -> Y+6
;	power -> Y+4
;	a -> R16,R17
;	b -> R18,R19
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 01F0 *value = *value- b;
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 01F1 if (*value < low_limit) *value = low_limit;
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 01F2 if (*value >= high_limit) *value = high_limit;
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0000 01F3 }
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;
;
;void escape_menu(void)
; 0000 01F7 {
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0000 01F8 menu_fl =0;
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 01F9 level=0;
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0000 01FA item1=item2=0;
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0000 01FB blinking=0;
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 01FC blink_digit=0;
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 01FD blink_flag =0;
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 01FE 
; 0000 01FF }
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;
;
;void check_set(void)
; 0000 0203 {
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 0204 if (!key5)
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0000 0205     {
; 0000 0206     menu_count++;
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 0207     if (menu_count >=4)
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0000 0208         {
; 0000 0209         menu_count =0;
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 020A         if(!menu_fl)
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0000 020B             {
; 0000 020C             menu_fl =1;
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 020D             level =1;
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0000 020E             item1=item2=0;
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0000 020F             blink_digit =0;
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0000 0210             blink_flag=1;
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0000 0211             }
; 0000 0212         else if (menu_fl)
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0000 0213             {
; 0000 0214             escape_menu();
;PCODE: $00000253 VOL: 0
; 0000 0215             }
; 0000 0216         }
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 0217     }
;PCODE: $00000256 VOL: 0
; 0000 0218 else
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
; 0000 0219     menu_count =0;
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0000 021A }
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;
;
;void ent_key(void)
; 0000 021E {
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 021F if (menu_fl && !cal_fl)
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0000 0220     {
; 0000 0221     blink_digit =0;
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0000 0222 
; 0000 0223     if (level ==1)
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0000 0224         {
; 0000 0225         level =2;
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
; 0000 0226         item2 =0;
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
; 0000 0227         }
; 0000 0228     else if (level==2)
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 0229         {
; 0000 022A         item2++;
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0000 022B         switch (item1)
;PCODE: $0000027C VOL: 0
; 0000 022C             {
; 0000 022D             case 0: ee_gen[item2-1] = gen[item2-1]; //store in eeprom
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
; 0000 022E 
; 0000 022F                     if (item2 >= 3)
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0000 0230                     {
; 0000 0231                     item2 =0;       //general parameters st/mb id ,baud
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 0232                     level =1;       // return to level 1
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0000 0233                     }
; 0000 0234                     break;
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
; 0000 0235             case 1: ee_os[item2-1] = os[item2-1]; //store in eeprom
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
; 0000 0236 
; 0000 0237                     if (item2 >= 8)
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0000 0238                     {
; 0000 0239                     item2 =0;       //offset
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0000 023A                     level =1;
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 0000 023B                     }
; 0000 023C                     break;
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 023D             case 2: ee_skip[item2-1] = skip[item2-1]; //store in eeprom
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0000 023E                     if (item2 >= 8)
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
; 0000 023F                     {
; 0000 0240                     item2 =0;       //skip
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0000 0241                     level =1;       // return to level 1
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0000 0242 
; 0000 0243                     }
; 0000 0244                     break;
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0000 0245             case 3: ee_rlow[item2-1] = rlow[item2-1]; //store in eeprom
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
; 0000 0246                     if (item2 >= 8)
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
; 0000 0247                     {
; 0000 0248                     item2 =0;       //rlow
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0000 0249                     level =1;       // return to level 1
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0000 024A 
; 0000 024B                     }
; 0000 024C                     break;
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0000 024D             case 4: ee_rhigh[item2-1] = rhigh[item2-1]; //store in eeprom
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0000 024E                     if (item2 >= 8)
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
; 0000 024F                     {
; 0000 0250                     item2 =0;       //rhigh
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
; 0000 0251                     level =1;       // return to level 1
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
; 0000 0252 
; 0000 0253 
; 0000 0254                     }
; 0000 0255                     break;
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
; 0000 0256             case 5: ee_alow[item2-1] = alow[item2-1]; //store in eeprom
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
; 0000 0257                     if (item2 >= 8)
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
; 0000 0258                     {
; 0000 0259                     item2 =0;       //alow
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
; 0000 025A                     level =1;       // return to level 1
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
; 0000 025B                     }
; 0000 025C                     break;
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
; 0000 025D             case 6: ee_ahigh[item2-1] = ahigh[item2-1]; //store in eeprom
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
; 0000 025E                     if (item2 >= 8)
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
; 0000 025F                     {
; 0000 0260                     item2 =0;       //ahigh
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
; 0000 0261                     level =1;       // return to level 1
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
; 0000 0262 
; 0000 0263                     }
; 0000 0264                     break;
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
; 0000 0265             case 7: ee_input[item2-1] = input[item2-1]; //store in eeprom
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
; 0000 0266                     switch (input[item2-1])
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
; 0000 0267                         {
; 0000 0268                         case 0:dp[item2-1]=2;
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
; 0000 0269                              break;
;PCODE: $00000352 VOL: 0
; 0000 026A                         case 1: dp[item2-1] =3;
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
; 0000 026B                                 break;
;PCODE: $0000035D VOL: 0
; 0000 026C                         case 2: dp[item2-1] =3;
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
; 0000 026D                                 break;
;PCODE: $00000368 VOL: 0
; 0000 026E                         case 3: dp[item2-1] =3;
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
; 0000 026F                                 break;
;PCODE: $00000373 VOL: 0
; 0000 0270                         case 4: dp[item2-1] =3;
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
; 0000 0271                                 break;
;PCODE: $0000037E VOL: 0
; 0000 0272                         case 5: dp[item2-1] =3;
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
; 0000 0273                                 break;
;PCODE: $00000389 VOL: 0
; 0000 0274                         case 6: dp[item2-1] =3;
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
; 0000 0275                                 break;
;PCODE: $00000394 VOL: 0
; 0000 0276                         }
;PCODE: $00000395 VOL: 0
; 0000 0277                     if (item2 >= 8)
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
; 0000 0278                     {
; 0000 0279                     item2 =0;       //input
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
; 0000 027A                     level =1;       // return to level 1
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
; 0000 027B 
; 0000 027C                     }
; 0000 027D                     break;
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
; 0000 027E             case 8: ee_dp[item2-1] = dp[item2-1]; //store in eeprom
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
; 0000 027F                     if (item2 >= 8)
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
; 0000 0280                     {
; 0000 0281                     item2 =0;       //input
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
; 0000 0282                     level =1;       // return to level 1
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
; 0000 0283 
; 0000 0284                     }
; 0000 0285                     break;
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
; 0000 0286 
; 0000 0287 
; 0000 0288             }
;PCODE: $000003B9 VOL: 0
; 0000 0289         }
; 0000 028A 
; 0000 028B     else
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
; 0000 028C         {
; 0000 028D         escape_menu();
;PCODE: $000003BC VOL: 0
; 0000 028E         }
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
; 0000 028F     }
; 0000 0290     else if (cal_fl)
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
; 0000 0291         {
; 0000 0292         mux_scan++;
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
; 0000 0293         if (mux_scan>=8) mux_scan=0;
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
; 0000 0294         switch(mux_scan)
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
; 0000 0295                 {
; 0000 0296                 case 0: mux9 =0;
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
; 0000 0297                         mux10 =0;
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
; 0000 0298                         mux11 =0;
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
; 0000 0299                        break;
;PCODE: $000003D7 VOL: 0
; 0000 029A                 case 1: mux9 =1;
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
; 0000 029B                       mux10 =0;
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
; 0000 029C                         mux11 =0;
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
; 0000 029D                         break;
;PCODE: $000003E1 VOL: 0
; 0000 029E                 case 2: mux9 =0;
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
; 0000 029F                         mux10 =1;
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
; 0000 02A0                         mux11 =0;
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
; 0000 02A1                       break;
;PCODE: $000003EB VOL: 0
; 0000 02A2                 case 3: mux9 =1;
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
; 0000 02A3                         mux10 =1;
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
; 0000 02A4                         mux11 =0;
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
; 0000 02A5                         break;
;PCODE: $000003F5 VOL: 0
; 0000 02A6                 case 4: mux9 =0;
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
; 0000 02A7                         mux10 =0;
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
; 0000 02A8                         mux11 =1;
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
; 0000 02A9                         break;
;PCODE: $000003FF VOL: 0
; 0000 02AA                 case 5: mux9 =1;
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
; 0000 02AB                         mux10 =0;
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
; 0000 02AC                         mux11 =1;
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
; 0000 02AD                         break;
;PCODE: $00000409 VOL: 0
; 0000 02AE                 case 6: mux9 =0;
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
; 0000 02AF                         mux10 =1;
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
; 0000 02B0                         mux11 =1;
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
; 0000 02B1                         break;
;PCODE: $00000413 VOL: 0
; 0000 02B2                 case 7: mux9 =1;
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
; 0000 02B3                         mux10 =1;
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
; 0000 02B4                         mux11 =1;
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
; 0000 02B5                         break;
;PCODE: $0000041D VOL: 0
; 0000 02B6                 default:mux_scan =0;
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
; 0000 02B7                         mux9 =0;
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
; 0000 02B8                         mux10 =0;
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
; 0000 02B9                         mux11 =0;
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
; 0000 02BA                         break;
;PCODE: $00000427 VOL: 0
; 0000 02BB                 }
;PCODE: $00000428 VOL: 0
; 0000 02BC         }
; 0000 02BD }
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;
;void inc_key(void)
; 0000 02C0 {
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
; 0000 02C1 int max_value,min_value;        // to determine maximum and minimum values for different inputs
; 0000 02C2 switch (input[item2])
;PCODE: $0000042F VOL: 0
;	max_value -> R16,R17
;	min_value -> R18,R19
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
; 0000 02C3     {
; 0000 02C4     case 0: min_value = -1000;
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
; 0000 02C5             max_value = 6500;
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
; 0000 02C6             break;
;PCODE: $0000043B VOL: 0
; 0000 02C7     case 1: min_value = -100;
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
; 0000 02C8             max_value = 650;
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
; 0000 02C9             break;
;PCODE: $00000443 VOL: 0
; 0000 02CA     case 2: min_value = 0;
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
; 0000 02CB             max_value = 650;
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
; 0000 02CC             break;
;PCODE: $0000044B VOL: 0
; 0000 02CD     case 3: min_value = 0;
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
; 0000 02CE             max_value = 1300;
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
; 0000 02CF             break;
;PCODE: $00000453 VOL: 0
; 0000 02D0     case 4: min_value = 0;
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
; 0000 02D1             max_value = 1700;
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
; 0000 02D2             break;
;PCODE: $0000045B VOL: 0
; 0000 02D3     case 5: min_value = 0;
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
; 0000 02D4             max_value = 1700;
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
; 0000 02D5             break;
;PCODE: $00000463 VOL: 0
; 0000 02D6     case 6: min_value = -100;
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
; 0000 02D7             max_value = 250;
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
; 0000 02D8             break;
;PCODE: $0000046B VOL: 0
; 0000 02D9     case 7: min_value = -1999;
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
; 0000 02DA             max_value = 9999;
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
; 0000 02DB             break;
;PCODE: $00000473 VOL: 0
; 0000 02DC     case 8: min_value = -1999;
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
; 0000 02DD             max_value = 9999;
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
; 0000 02DE             break;
;PCODE: $0000047B VOL: 0
; 0000 02DF     }
;PCODE: $0000047C VOL: 0
; 0000 02E0 if (menu_fl && !cal_fl)
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
; 0000 02E1     {
; 0000 02E2     if (level ==1)
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
; 0000 02E3         {
; 0000 02E4         item1 ++;
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
; 0000 02E5         if (item1>=9) item1 =0;
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
; 0000 02E6         }
;PCODE: $00000493 VOL: 0
; 0000 02E7     else if (level ==2)
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
; 0000 02E8         {
; 0000 02E9         switch (item1)
;PCODE: $00000499 VOL: 0
; 0000 02EA             {
; 0000 02EB             case 0: if (item2==0) increment_value(&gen[0],0,99,0);  //scan time
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
; 0000 02EC                     if(item2 ==1) increment_value(&gen[1],1,242,blink_digit);//modbus id
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
; 0000 02ED                     if (item2==2) increment_value(&gen[2],0,1,0);   //baud rates 9600/19200
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
; 0000 02EE                     break;
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
; 0000 02EF             case 1: increment_value(&os[item2],-999,1999,blink_digit);   //offset
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
; 0000 02F0                     break;
;PCODE: $000004D3 VOL: 0
; 0000 02F1             case 2: increment_value(&skip[item2],0,1,0);    //skip
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
; 0000 02F2                     break;
;PCODE: $000004E3 VOL: 0
; 0000 02F3             case 3: increment_value(&rlow[item2],min_value,max_value,blink_digit);    //rlow
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
; 0000 02F4                     break;
;PCODE: $000004F0 VOL: 0
; 0000 02F5             case 4: increment_value(&rhigh[item2],min_value,max_value,blink_digit);   //rhigh
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
; 0000 02F6                     break;
;PCODE: $000004FD VOL: 0
; 0000 02F7             case 5: increment_value(&alow[item2],min_value,ahigh[item2],blink_digit);    //alow
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 0
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
; 0000 02F8                     break;
;PCODE: $0000050F VOL: 0
; 0000 02F9             case 6: increment_value(&ahigh[item2],alow[item2],max_value,blink_digit);   //ahigh
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
;PCODE: $00000514 VOL: 0
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
; 0000 02FA                     break;
;PCODE: $00000521 VOL: 0
; 0000 02FB             case 7: increment_value(&input[item2],0,8,0);     //input selection
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
; 0000 02FC                      break;
;PCODE: $00000531 VOL: 0
; 0000 02FD             case 8: if (input[item2]<7)
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
;PCODE: $00000536 VOL: 0
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
; 0000 02FE                         increment_value(&dp[item2],3,3,0);       //decimal point selection for temperature
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
;PCODE: $00000544 VOL: 0
;PCODE: $00000545 VOL: 0
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
; 0000 02FF                     else
;PCODE: $00000548 VOL: 0
;PCODE: $00000549 VOL: 0
; 0000 0300                         increment_value(&dp[item2],0,3,0);       //decimal point selection for voltage and current
;PCODE: $0000054A VOL: 0
;PCODE: $0000054B VOL: 0
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
; 0000 0301                     break;
;PCODE: $00000556 VOL: 0
;PCODE: $00000557 VOL: 0
; 0000 0302             default:escape_menu();
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
; 0000 0303                     break;
;PCODE: $0000055A VOL: 0
; 0000 0304             }
;PCODE: $0000055B VOL: 0
; 0000 0305         }
; 0000 0306 
; 0000 0307 
; 0000 0308 
; 0000 0309     }
;PCODE: $0000055C VOL: 0
;PCODE: $0000055D VOL: 0
; 0000 030A else if (cal_fl)         //zero setting for all 8 channels
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
;PCODE: $00000562 VOL: 0
; 0000 030B     {
; 0000 030C     cal_zero[mux_scan]=adc3421_read();
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
; 0000 030D     ee_cal_zero[mux_scan]= cal_zero[mux_scan];
;PCODE: $0000056B VOL: 0
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
;PCODE: $0000056E VOL: 0
;PCODE: $0000056F VOL: 0
;PCODE: $00000570 VOL: 0
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
;PCODE: $00000573 VOL: 0
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
; 0000 030E     }
; 0000 030F }
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
;PCODE: $0000057A VOL: 0
;PCODE: $0000057B VOL: 0
;PCODE: $0000057C VOL: 0
;
;void dec_key(void)
; 0000 0312 {
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
; 0000 0313 int max_value,min_value;        // to determine maximum and minimum values for different inputs
; 0000 0314 switch (input[item2])
;PCODE: $0000057F VOL: 0
;	max_value -> R16,R17
;	min_value -> R18,R19
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
;PCODE: $00000584 VOL: 0
; 0000 0315     {
; 0000 0316     case 0: min_value = -1000;
;PCODE: $00000585 VOL: 0
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
;PCODE: $00000588 VOL: 0
; 0000 0317             max_value = 6500;
;PCODE: $00000589 VOL: 0
;PCODE: $0000058A VOL: 0
; 0000 0318             break;
;PCODE: $0000058B VOL: 0
; 0000 0319     case 1: min_value = -100;
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
;PCODE: $0000058E VOL: 0
;PCODE: $0000058F VOL: 0
;PCODE: $00000590 VOL: 0
; 0000 031A             max_value = 650;
;PCODE: $00000591 VOL: 0
;PCODE: $00000592 VOL: 0
; 0000 031B             break;
;PCODE: $00000593 VOL: 0
; 0000 031C     case 2: min_value = 0;
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
;PCODE: $00000596 VOL: 0
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
; 0000 031D             max_value = 650;
;PCODE: $00000599 VOL: 0
;PCODE: $0000059A VOL: 0
; 0000 031E             break;
;PCODE: $0000059B VOL: 0
; 0000 031F     case 3: min_value = 0;
;PCODE: $0000059C VOL: 0
;PCODE: $0000059D VOL: 0
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
;PCODE: $000005A0 VOL: 0
; 0000 0320             max_value = 1300;
;PCODE: $000005A1 VOL: 0
;PCODE: $000005A2 VOL: 0
; 0000 0321             break;
;PCODE: $000005A3 VOL: 0
; 0000 0322     case 4: min_value = 0;
;PCODE: $000005A4 VOL: 0
;PCODE: $000005A5 VOL: 0
;PCODE: $000005A6 VOL: 0
;PCODE: $000005A7 VOL: 0
;PCODE: $000005A8 VOL: 0
; 0000 0323             max_value = 1700;
;PCODE: $000005A9 VOL: 0
;PCODE: $000005AA VOL: 0
; 0000 0324             break;
;PCODE: $000005AB VOL: 0
; 0000 0325     case 5: min_value = 0;
;PCODE: $000005AC VOL: 0
;PCODE: $000005AD VOL: 0
;PCODE: $000005AE VOL: 0
;PCODE: $000005AF VOL: 0
;PCODE: $000005B0 VOL: 0
; 0000 0326             max_value = 1700;
;PCODE: $000005B1 VOL: 0
;PCODE: $000005B2 VOL: 0
; 0000 0327             break;
;PCODE: $000005B3 VOL: 0
; 0000 0328     case 6: min_value = -100;
;PCODE: $000005B4 VOL: 0
;PCODE: $000005B5 VOL: 0
;PCODE: $000005B6 VOL: 0
;PCODE: $000005B7 VOL: 0
;PCODE: $000005B8 VOL: 0
; 0000 0329             max_value = 250;
;PCODE: $000005B9 VOL: 0
;PCODE: $000005BA VOL: 0
; 0000 032A             break;
;PCODE: $000005BB VOL: 0
; 0000 032B     case 7: min_value = -1999;
;PCODE: $000005BC VOL: 0
;PCODE: $000005BD VOL: 0
;PCODE: $000005BE VOL: 0
;PCODE: $000005BF VOL: 0
;PCODE: $000005C0 VOL: 0
; 0000 032C             max_value = 9999;
;PCODE: $000005C1 VOL: 0
;PCODE: $000005C2 VOL: 0
; 0000 032D             break;
;PCODE: $000005C3 VOL: 0
; 0000 032E     case 8: min_value = -1999;
;PCODE: $000005C4 VOL: 0
;PCODE: $000005C5 VOL: 0
;PCODE: $000005C6 VOL: 0
;PCODE: $000005C7 VOL: 0
;PCODE: $000005C8 VOL: 0
; 0000 032F             max_value = 9999;
;PCODE: $000005C9 VOL: 0
;PCODE: $000005CA VOL: 0
; 0000 0330             break;
;PCODE: $000005CB VOL: 0
; 0000 0331     }
;PCODE: $000005CC VOL: 0
; 0000 0332 if (menu_fl &&!cal_fl)
;PCODE: $000005CD VOL: 0
;PCODE: $000005CE VOL: 0
;PCODE: $000005CF VOL: 0
;PCODE: $000005D0 VOL: 0
;PCODE: $000005D1 VOL: 0
;PCODE: $000005D2 VOL: 0
;PCODE: $000005D3 VOL: 0
;PCODE: $000005D4 VOL: 0
;PCODE: $000005D5 VOL: 0
;PCODE: $000005D6 VOL: 0
; 0000 0333     {
; 0000 0334     if (level ==1)
;PCODE: $000005D7 VOL: 0
;PCODE: $000005D8 VOL: 0
;PCODE: $000005D9 VOL: 0
; 0000 0335         {
; 0000 0336         item1 --;
;PCODE: $000005DA VOL: 0
;PCODE: $000005DB VOL: 0
;PCODE: $000005DC VOL: 0
;PCODE: $000005DD VOL: 0
; 0000 0337         if (item1<0) item1 =8;
;PCODE: $000005DE VOL: 0
;PCODE: $000005DF VOL: 0
;PCODE: $000005E0 VOL: 0
;PCODE: $000005E1 VOL: 0
;PCODE: $000005E2 VOL: 0
; 0000 0338         }
;PCODE: $000005E3 VOL: 0
; 0000 0339     else if (level ==2)
;PCODE: $000005E4 VOL: 0
;PCODE: $000005E5 VOL: 0
;PCODE: $000005E6 VOL: 0
;PCODE: $000005E7 VOL: 0
;PCODE: $000005E8 VOL: 0
; 0000 033A         {
; 0000 033B         switch (item1)
;PCODE: $000005E9 VOL: 0
; 0000 033C             {
; 0000 033D             case 0: if (item2==0) decrement_value(&gen[0],0,99,0);  //scan time
;PCODE: $000005EA VOL: 0
;PCODE: $000005EB VOL: 0
;PCODE: $000005EC VOL: 0
;PCODE: $000005ED VOL: 0
;PCODE: $000005EE VOL: 0
;PCODE: $000005EF VOL: 0
;PCODE: $000005F0 VOL: 0
;PCODE: $000005F1 VOL: 0
;PCODE: $000005F2 VOL: 0
;PCODE: $000005F3 VOL: 0
;PCODE: $000005F4 VOL: 0
;PCODE: $000005F5 VOL: 0
;PCODE: $000005F6 VOL: 0
;PCODE: $000005F7 VOL: 0
; 0000 033E                     if(item2 ==1) decrement_value(&gen[1],1,242,blink_digit);//modbus id
;PCODE: $000005F8 VOL: 0
;PCODE: $000005F9 VOL: 0
;PCODE: $000005FA VOL: 0
;PCODE: $000005FB VOL: 0
;PCODE: $000005FC VOL: 0
;PCODE: $000005FD VOL: 0
;PCODE: $000005FE VOL: 0
;PCODE: $000005FF VOL: 0
;PCODE: $00000600 VOL: 0
;PCODE: $00000601 VOL: 0
;PCODE: $00000602 VOL: 0
;PCODE: $00000603 VOL: 0
;PCODE: $00000604 VOL: 0
; 0000 033F                     if (item2==2) decrement_value(&gen[2],0,1,0);   //baud rates 9600/19200
;PCODE: $00000605 VOL: 0
;PCODE: $00000606 VOL: 0
;PCODE: $00000607 VOL: 0
;PCODE: $00000608 VOL: 0
;PCODE: $00000609 VOL: 0
;PCODE: $0000060A VOL: 0
;PCODE: $0000060B VOL: 0
;PCODE: $0000060C VOL: 0
;PCODE: $0000060D VOL: 0
;PCODE: $0000060E VOL: 0
;PCODE: $0000060F VOL: 0
;PCODE: $00000610 VOL: 0
;PCODE: $00000611 VOL: 0
;PCODE: $00000612 VOL: 0
; 0000 0340                     break;
;PCODE: $00000613 VOL: 0
;PCODE: $00000614 VOL: 0
; 0000 0341             case 1: decrement_value(&os[item2],-999,999,blink_digit);   //offset
;PCODE: $00000615 VOL: 0
;PCODE: $00000616 VOL: 0
;PCODE: $00000617 VOL: 0
;PCODE: $00000618 VOL: 0
;PCODE: $00000619 VOL: 0
;PCODE: $0000061A VOL: 0
;PCODE: $0000061B VOL: 0
;PCODE: $0000061C VOL: 0
;PCODE: $0000061D VOL: 0
;PCODE: $0000061E VOL: 0
;PCODE: $0000061F VOL: 0
;PCODE: $00000620 VOL: 0
;PCODE: $00000621 VOL: 0
;PCODE: $00000622 VOL: 0
; 0000 0342                     break;
;PCODE: $00000623 VOL: 0
; 0000 0343             case 2: decrement_value(&skip[item2],0,1,0);    //skip
;PCODE: $00000624 VOL: 0
;PCODE: $00000625 VOL: 0
;PCODE: $00000626 VOL: 0
;PCODE: $00000627 VOL: 0
;PCODE: $00000628 VOL: 0
;PCODE: $00000629 VOL: 0
;PCODE: $0000062A VOL: 0
;PCODE: $0000062B VOL: 0
;PCODE: $0000062C VOL: 0
;PCODE: $0000062D VOL: 0
;PCODE: $0000062E VOL: 0
;PCODE: $0000062F VOL: 0
;PCODE: $00000630 VOL: 0
;PCODE: $00000631 VOL: 0
;PCODE: $00000632 VOL: 0
; 0000 0344                     break;
;PCODE: $00000633 VOL: 0
; 0000 0345             case 3: decrement_value(&rlow[item2],min_value,max_value,blink_digit);    //rlow
;PCODE: $00000634 VOL: 0
;PCODE: $00000635 VOL: 0
;PCODE: $00000636 VOL: 0
;PCODE: $00000637 VOL: 0
;PCODE: $00000638 VOL: 0
;PCODE: $00000639 VOL: 0
;PCODE: $0000063A VOL: 0
;PCODE: $0000063B VOL: 0
;PCODE: $0000063C VOL: 0
;PCODE: $0000063D VOL: 0
;PCODE: $0000063E VOL: 0
;PCODE: $0000063F VOL: 0
; 0000 0346                     break;
;PCODE: $00000640 VOL: 0
; 0000 0347             case 4: decrement_value(&rhigh[item2],min_value,max_value,blink_digit);   //rhigh
;PCODE: $00000641 VOL: 0
;PCODE: $00000642 VOL: 0
;PCODE: $00000643 VOL: 0
;PCODE: $00000644 VOL: 0
;PCODE: $00000645 VOL: 0
;PCODE: $00000646 VOL: 0
;PCODE: $00000647 VOL: 0
;PCODE: $00000648 VOL: 0
;PCODE: $00000649 VOL: 0
;PCODE: $0000064A VOL: 0
;PCODE: $0000064B VOL: 0
;PCODE: $0000064C VOL: 0
; 0000 0348                     break;
;PCODE: $0000064D VOL: 0
; 0000 0349             case 5: decrement_value(&alow[item2],min_value,ahigh[item2],blink_digit);    //alow
;PCODE: $0000064E VOL: 0
;PCODE: $0000064F VOL: 0
;PCODE: $00000650 VOL: 0
;PCODE: $00000651 VOL: 0
;PCODE: $00000652 VOL: 0
;PCODE: $00000653 VOL: 0
;PCODE: $00000654 VOL: 0
;PCODE: $00000655 VOL: 0
;PCODE: $00000656 VOL: 0
;PCODE: $00000657 VOL: 0
;PCODE: $00000658 VOL: 0
;PCODE: $00000659 VOL: 0
;PCODE: $0000065A VOL: 0
;PCODE: $0000065B VOL: 0
;PCODE: $0000065C VOL: 0
;PCODE: $0000065D VOL: 0
;PCODE: $0000065E VOL: 0
; 0000 034A                     break;
;PCODE: $0000065F VOL: 0
; 0000 034B             case 6: decrement_value(&ahigh[item2],alow[item2],max_value,blink_digit);   //ahigh
;PCODE: $00000660 VOL: 0
;PCODE: $00000661 VOL: 0
;PCODE: $00000662 VOL: 0
;PCODE: $00000663 VOL: 0
;PCODE: $00000664 VOL: 0
;PCODE: $00000665 VOL: 0
;PCODE: $00000666 VOL: 0
;PCODE: $00000667 VOL: 0
;PCODE: $00000668 VOL: 0
;PCODE: $00000669 VOL: 0
;PCODE: $0000066A VOL: 0
;PCODE: $0000066B VOL: 0
;PCODE: $0000066C VOL: 0
;PCODE: $0000066D VOL: 0
;PCODE: $0000066E VOL: 0
;PCODE: $0000066F VOL: 0
;PCODE: $00000670 VOL: 0
; 0000 034C                     break;
;PCODE: $00000671 VOL: 0
; 0000 034D             case 7: decrement_value(&input[item2],0,8,0);     //input selection
;PCODE: $00000672 VOL: 0
;PCODE: $00000673 VOL: 0
;PCODE: $00000674 VOL: 0
;PCODE: $00000675 VOL: 0
;PCODE: $00000676 VOL: 0
;PCODE: $00000677 VOL: 0
;PCODE: $00000678 VOL: 0
;PCODE: $00000679 VOL: 0
;PCODE: $0000067A VOL: 0
;PCODE: $0000067B VOL: 0
;PCODE: $0000067C VOL: 0
;PCODE: $0000067D VOL: 0
;PCODE: $0000067E VOL: 0
;PCODE: $0000067F VOL: 0
;PCODE: $00000680 VOL: 0
; 0000 034E                     break;
;PCODE: $00000681 VOL: 0
; 0000 034F             case 8: if (input[item2]<7)
;PCODE: $00000682 VOL: 0
;PCODE: $00000683 VOL: 0
;PCODE: $00000684 VOL: 0
;PCODE: $00000685 VOL: 0
;PCODE: $00000686 VOL: 0
;PCODE: $00000687 VOL: 0
;PCODE: $00000688 VOL: 0
;PCODE: $00000689 VOL: 0
;PCODE: $0000068A VOL: 0
;PCODE: $0000068B VOL: 0
; 0000 0350                         decrement_value(&dp[item2],3,3,0);       //decimal point selection for temperature
;PCODE: $0000068C VOL: 0
;PCODE: $0000068D VOL: 0
;PCODE: $0000068E VOL: 0
;PCODE: $0000068F VOL: 0
;PCODE: $00000690 VOL: 0
;PCODE: $00000691 VOL: 0
;PCODE: $00000692 VOL: 0
;PCODE: $00000693 VOL: 0
;PCODE: $00000694 VOL: 0
;PCODE: $00000695 VOL: 0
;PCODE: $00000696 VOL: 0
;PCODE: $00000697 VOL: 0
; 0000 0351                     else
;PCODE: $00000698 VOL: 0
;PCODE: $00000699 VOL: 0
; 0000 0352                         decrement_value(&dp[item2],0,3,0);       //decimal point selection for voltage and current
;PCODE: $0000069A VOL: 0
;PCODE: $0000069B VOL: 0
;PCODE: $0000069C VOL: 0
;PCODE: $0000069D VOL: 0
;PCODE: $0000069E VOL: 0
;PCODE: $0000069F VOL: 0
;PCODE: $000006A0 VOL: 0
;PCODE: $000006A1 VOL: 0
;PCODE: $000006A2 VOL: 0
;PCODE: $000006A3 VOL: 0
;PCODE: $000006A4 VOL: 0
;PCODE: $000006A5 VOL: 0
; 0000 0353                     break;
;PCODE: $000006A6 VOL: 0
;PCODE: $000006A7 VOL: 0
; 0000 0354 
; 0000 0355             default:escape_menu();
;PCODE: $000006A8 VOL: 0
;PCODE: $000006A9 VOL: 0
; 0000 0356                     break;
;PCODE: $000006AA VOL: 0
; 0000 0357             }
;PCODE: $000006AB VOL: 0
; 0000 0358         }
; 0000 0359 
; 0000 035A 
; 0000 035B 
; 0000 035C     }
;PCODE: $000006AC VOL: 0
;PCODE: $000006AD VOL: 0
; 0000 035D else if (cal_fl)
;PCODE: $000006AE VOL: 0
;PCODE: $000006AF VOL: 0
;PCODE: $000006B0 VOL: 0
;PCODE: $000006B1 VOL: 0
;PCODE: $000006B2 VOL: 0
; 0000 035E     {
; 0000 035F     cal_span[mux_scan]=adc3421_read();
;PCODE: $000006B3 VOL: 0
;PCODE: $000006B4 VOL: 0
;PCODE: $000006B5 VOL: 0
;PCODE: $000006B6 VOL: 0
;PCODE: $000006B7 VOL: 0
;PCODE: $000006B8 VOL: 0
;PCODE: $000006B9 VOL: 0
;PCODE: $000006BA VOL: 0
; 0000 0360     ee_cal_span[mux_scan] = cal_span[mux_scan];
;PCODE: $000006BB VOL: 0
;PCODE: $000006BC VOL: 0
;PCODE: $000006BD VOL: 0
;PCODE: $000006BE VOL: 0
;PCODE: $000006BF VOL: 0
;PCODE: $000006C0 VOL: 0
;PCODE: $000006C1 VOL: 0
;PCODE: $000006C2 VOL: 0
;PCODE: $000006C3 VOL: 0
;PCODE: $000006C4 VOL: 0
;PCODE: $000006C5 VOL: 0
;PCODE: $000006C6 VOL: 0
; 0000 0361     }
; 0000 0362 }
;PCODE: $000006C7 VOL: 0
;PCODE: $000006C8 VOL: 0
;PCODE: $000006C9 VOL: 0
;PCODE: $000006CA VOL: 0
;PCODE: $000006CB VOL: 0
;PCODE: $000006CC VOL: 0
;
;void shf_key(void)
; 0000 0365 {
;PCODE: $000006CD VOL: 0
;PCODE: $000006CE VOL: 0
; 0000 0366     if (blink_flag)
;PCODE: $000006CF VOL: 0
;PCODE: $000006D0 VOL: 0
;PCODE: $000006D1 VOL: 0
; 0000 0367     blink_digit++;
;PCODE: $000006D2 VOL: 0
;PCODE: $000006D3 VOL: 0
;PCODE: $000006D4 VOL: 0
;PCODE: $000006D5 VOL: 0
; 0000 0368     if (blink_digit > 3)
;PCODE: $000006D6 VOL: 0
;PCODE: $000006D7 VOL: 0
;PCODE: $000006D8 VOL: 0
;PCODE: $000006D9 VOL: 0
; 0000 0369     blink_digit=0;
;PCODE: $000006DA VOL: 0
;PCODE: $000006DB VOL: 0
; 0000 036A }
;PCODE: $000006DC VOL: 0
;PCODE: $000006DD VOL: 0
;PCODE: $000006DE VOL: 0
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 036E {
;PCODE: $000006DF VOL: 0
;PCODE: $000006E0 VOL: 0
; 0000 036F // Reinitialize Timer1 value
; 0000 0370 TCNT1H=0xABA0 >> 8;
;PCODE: $000006E1 VOL: 0
;PCODE: $000006E2 VOL: 0
; 0000 0371 TCNT1L=0xABA0 & 0xff;
;PCODE: $000006E3 VOL: 0
;PCODE: $000006E4 VOL: 0
; 0000 0372 // Place your code here
; 0000 0373 qsecfl = ~qsecfl;
;PCODE: $000006E5 VOL: 0
;PCODE: $000006E6 VOL: 0
;PCODE: $000006E7 VOL: 0
; 0000 0374 hsec_fl =1;
;PCODE: $000006E8 VOL: 0
;PCODE: $000006E9 VOL: 0
;PCODE: $000006EA VOL: 0
; 0000 0375 blinking = ~blinking;
;PCODE: $000006EB VOL: 0
;PCODE: $000006EC VOL: 0
;PCODE: $000006ED VOL: 0
; 0000 0376 tsec_cnt++;
;PCODE: $000006EE VOL: 0
;PCODE: $000006EF VOL: 0
;PCODE: $000006F0 VOL: 0
;PCODE: $000006F1 VOL: 0
; 0000 0377 if (tsec_cnt >=4)
;PCODE: $000006F2 VOL: 0
;PCODE: $000006F3 VOL: 0
;PCODE: $000006F4 VOL: 0
; 0000 0378     {
; 0000 0379     tsec_fl =1;
;PCODE: $000006F5 VOL: 0
;PCODE: $000006F6 VOL: 0
;PCODE: $000006F7 VOL: 0
; 0000 037A     tsec_cnt =0;
;PCODE: $000006F8 VOL: 0
;PCODE: $000006F9 VOL: 0
; 0000 037B     ser_fl =1;
;PCODE: $000006FA VOL: 0
;PCODE: $000006FB VOL: 0
;PCODE: $000006FC VOL: 0
; 0000 037C     }
; 0000 037D 
; 0000 037E 
; 0000 037F }
;PCODE: $000006FD VOL: 0
;PCODE: $000006FE VOL: 0
;PCODE: $000006FF VOL: 0
;PCODE: $00000700 VOL: 0
;
;
;
;
;void led_check(void)
; 0000 0385 {
;PCODE: $00000701 VOL: 0
;PCODE: $00000702 VOL: 0
; 0000 0386 all_led_off();
;PCODE: $00000703 VOL: 0
;PCODE: $00000704 VOL: 0
; 0000 0387 all_led_off1();
;PCODE: $00000705 VOL: 0
;PCODE: $00000706 VOL: 0
; 0000 0388 if (process_value[0] <= alow[0])
;PCODE: $00000707 VOL: 0
;PCODE: $00000708 VOL: 0
;PCODE: $00000709 VOL: 0
;PCODE: $0000070A VOL: 0
; 0000 0389 gled1_on();
;PCODE: $0000070B VOL: 0
;PCODE: $0000070C VOL: 0
;PCODE: $0000070D VOL: 0
; 0000 038A if (process_value[0] >= ahigh[0])
;PCODE: $0000070E VOL: 0
;PCODE: $0000070F VOL: 0
;PCODE: $00000710 VOL: 0
;PCODE: $00000711 VOL: 0
;PCODE: $00000712 VOL: 0
; 0000 038B rled1_on();
;PCODE: $00000713 VOL: 0
;PCODE: $00000714 VOL: 0
;PCODE: $00000715 VOL: 0
; 0000 038C if (process_value[1] <= alow[1])
;PCODE: $00000716 VOL: 0
;PCODE: $00000717 VOL: 0
;PCODE: $00000718 VOL: 0
;PCODE: $00000719 VOL: 0
;PCODE: $0000071A VOL: 0
;PCODE: $0000071B VOL: 0
;PCODE: $0000071C VOL: 0
; 0000 038D gled2_on();
;PCODE: $0000071D VOL: 0
;PCODE: $0000071E VOL: 0
;PCODE: $0000071F VOL: 0
; 0000 038E if (process_value[1] >= ahigh[1])
;PCODE: $00000720 VOL: 0
;PCODE: $00000721 VOL: 0
;PCODE: $00000722 VOL: 0
;PCODE: $00000723 VOL: 0
;PCODE: $00000724 VOL: 0
;PCODE: $00000725 VOL: 0
;PCODE: $00000726 VOL: 0
; 0000 038F rled2_on();
;PCODE: $00000727 VOL: 0
;PCODE: $00000728 VOL: 0
;PCODE: $00000729 VOL: 0
; 0000 0390 if (process_value[2] <= alow[2])
;PCODE: $0000072A VOL: 0
;PCODE: $0000072B VOL: 0
;PCODE: $0000072C VOL: 0
;PCODE: $0000072D VOL: 0
;PCODE: $0000072E VOL: 0
;PCODE: $0000072F VOL: 0
;PCODE: $00000730 VOL: 0
; 0000 0391 gled3_on();
;PCODE: $00000731 VOL: 0
;PCODE: $00000732 VOL: 0
;PCODE: $00000733 VOL: 0
; 0000 0392 if (process_value[2] >= ahigh[2])
;PCODE: $00000734 VOL: 0
;PCODE: $00000735 VOL: 0
;PCODE: $00000736 VOL: 0
;PCODE: $00000737 VOL: 0
;PCODE: $00000738 VOL: 0
;PCODE: $00000739 VOL: 0
;PCODE: $0000073A VOL: 0
; 0000 0393 rled3_on();
;PCODE: $0000073B VOL: 0
;PCODE: $0000073C VOL: 0
;PCODE: $0000073D VOL: 0
; 0000 0394 if (process_value[3] <= alow[3])
;PCODE: $0000073E VOL: 0
;PCODE: $0000073F VOL: 0
;PCODE: $00000740 VOL: 0
;PCODE: $00000741 VOL: 0
;PCODE: $00000742 VOL: 0
;PCODE: $00000743 VOL: 0
;PCODE: $00000744 VOL: 0
; 0000 0395 gled4_on();
;PCODE: $00000745 VOL: 0
;PCODE: $00000746 VOL: 0
;PCODE: $00000747 VOL: 0
; 0000 0396 if (process_value[3] >= ahigh[3])
;PCODE: $00000748 VOL: 0
;PCODE: $00000749 VOL: 0
;PCODE: $0000074A VOL: 0
;PCODE: $0000074B VOL: 0
;PCODE: $0000074C VOL: 0
;PCODE: $0000074D VOL: 0
;PCODE: $0000074E VOL: 0
; 0000 0397 rled4_on();
;PCODE: $0000074F VOL: 0
;PCODE: $00000750 VOL: 0
;PCODE: $00000751 VOL: 0
; 0000 0398 if (process_value[4] <= alow[4])
;PCODE: $00000752 VOL: 0
;PCODE: $00000753 VOL: 0
;PCODE: $00000754 VOL: 0
;PCODE: $00000755 VOL: 0
;PCODE: $00000756 VOL: 0
;PCODE: $00000757 VOL: 0
;PCODE: $00000758 VOL: 0
; 0000 0399 gled5_on();
;PCODE: $00000759 VOL: 0
;PCODE: $0000075A VOL: 0
;PCODE: $0000075B VOL: 0
; 0000 039A if (process_value[4] >= ahigh[4])
;PCODE: $0000075C VOL: 0
;PCODE: $0000075D VOL: 0
;PCODE: $0000075E VOL: 0
;PCODE: $0000075F VOL: 0
;PCODE: $00000760 VOL: 0
;PCODE: $00000761 VOL: 0
;PCODE: $00000762 VOL: 0
; 0000 039B rled5_on();
;PCODE: $00000763 VOL: 0
;PCODE: $00000764 VOL: 0
;PCODE: $00000765 VOL: 0
; 0000 039C if (process_value[5] <= alow[5])
;PCODE: $00000766 VOL: 0
;PCODE: $00000767 VOL: 0
;PCODE: $00000768 VOL: 0
;PCODE: $00000769 VOL: 0
;PCODE: $0000076A VOL: 0
;PCODE: $0000076B VOL: 0
;PCODE: $0000076C VOL: 0
; 0000 039D gled6_on();
;PCODE: $0000076D VOL: 0
;PCODE: $0000076E VOL: 0
;PCODE: $0000076F VOL: 0
; 0000 039E if (process_value[5] >= ahigh[5])
;PCODE: $00000770 VOL: 0
;PCODE: $00000771 VOL: 0
;PCODE: $00000772 VOL: 0
;PCODE: $00000773 VOL: 0
;PCODE: $00000774 VOL: 0
;PCODE: $00000775 VOL: 0
;PCODE: $00000776 VOL: 0
; 0000 039F rled6_on();
;PCODE: $00000777 VOL: 0
;PCODE: $00000778 VOL: 0
;PCODE: $00000779 VOL: 0
; 0000 03A0 if (process_value[6] <= alow[6])
;PCODE: $0000077A VOL: 0
;PCODE: $0000077B VOL: 0
;PCODE: $0000077C VOL: 0
;PCODE: $0000077D VOL: 0
;PCODE: $0000077E VOL: 0
;PCODE: $0000077F VOL: 0
;PCODE: $00000780 VOL: 0
; 0000 03A1 gled7_on();
;PCODE: $00000781 VOL: 0
;PCODE: $00000782 VOL: 0
;PCODE: $00000783 VOL: 0
; 0000 03A2 if (process_value[6] >= ahigh[6])
;PCODE: $00000784 VOL: 0
;PCODE: $00000785 VOL: 0
;PCODE: $00000786 VOL: 0
;PCODE: $00000787 VOL: 0
;PCODE: $00000788 VOL: 0
;PCODE: $00000789 VOL: 0
;PCODE: $0000078A VOL: 0
; 0000 03A3 rled7_on();
;PCODE: $0000078B VOL: 0
;PCODE: $0000078C VOL: 0
;PCODE: $0000078D VOL: 0
; 0000 03A4 if (process_value[7] <= alow[7])
;PCODE: $0000078E VOL: 0
;PCODE: $0000078F VOL: 0
;PCODE: $00000790 VOL: 0
;PCODE: $00000791 VOL: 0
;PCODE: $00000792 VOL: 0
;PCODE: $00000793 VOL: 0
;PCODE: $00000794 VOL: 0
; 0000 03A5 gled8_on();
;PCODE: $00000795 VOL: 0
;PCODE: $00000796 VOL: 0
;PCODE: $00000797 VOL: 0
; 0000 03A6 if (process_value[7] >= ahigh[7])
;PCODE: $00000798 VOL: 0
;PCODE: $00000799 VOL: 0
;PCODE: $0000079A VOL: 0
;PCODE: $0000079B VOL: 0
;PCODE: $0000079C VOL: 0
;PCODE: $0000079D VOL: 0
;PCODE: $0000079E VOL: 0
; 0000 03A7 rled8_on();
;PCODE: $0000079F VOL: 0
;PCODE: $000007A0 VOL: 0
;PCODE: $000007A1 VOL: 0
; 0000 03A8 }
;PCODE: $000007A2 VOL: 0
;PCODE: $000007A3 VOL: 0
;PCODE: $000007A4 VOL: 0
;
;void relay_logic()
; 0000 03AB {
;PCODE: $000007A5 VOL: 0
;PCODE: $000007A6 VOL: 0
; 0000 03AC if (led_status ==0xff)
;PCODE: $000007A7 VOL: 0
;PCODE: $000007A8 VOL: 0
;PCODE: $000007A9 VOL: 0
; 0000 03AD relay1 =1;
;PCODE: $000007AA VOL: 0
;PCODE: $000007AB VOL: 0
; 0000 03AE else
;PCODE: $000007AC VOL: 0
;PCODE: $000007AD VOL: 0
; 0000 03AF relay1 =0;
;PCODE: $000007AE VOL: 0
;PCODE: $000007AF VOL: 0
; 0000 03B0 
; 0000 03B1 if (led_status1 ==0xff)
;PCODE: $000007B0 VOL: 0
;PCODE: $000007B1 VOL: 0
;PCODE: $000007B2 VOL: 0
;PCODE: $000007B3 VOL: 0
; 0000 03B2 relay2 =1;
;PCODE: $000007B4 VOL: 0
;PCODE: $000007B5 VOL: 0
; 0000 03B3 else
;PCODE: $000007B6 VOL: 0
;PCODE: $000007B7 VOL: 0
; 0000 03B4 relay2 =0;
;PCODE: $000007B8 VOL: 0
;PCODE: $000007B9 VOL: 0
; 0000 03B5 }
;PCODE: $000007BA VOL: 0
;PCODE: $000007BB VOL: 0
;PCODE: $000007BC VOL: 0
;
;void pv_update(void)
; 0000 03B8 {
;PCODE: $000007BD VOL: 0
;PCODE: $000007BE VOL: 0
; 0000 03B9 int adc_value;
; 0000 03BA if (!cal_fl)
;PCODE: $000007BF VOL: 0
;PCODE: $000007C0 VOL: 0
;	adc_value -> R16,R17
;PCODE: $000007C1 VOL: 0
;PCODE: $000007C2 VOL: 0
;PCODE: $000007C3 VOL: 0
; 0000 03BB {
; 0000 03BC adc_value=adc3421_read();
;PCODE: $000007C4 VOL: 0
;PCODE: $000007C5 VOL: 0
; 0000 03BD //process_value[mux_scan] = ((long)adc_value -(long)cal_zero[mux_scan]) * 10000 / ((long)cal_span[mux_scan]- (long)cal_z ...
; 0000 03BE switch (input[mux_scan])
;PCODE: $000007C6 VOL: 0
;PCODE: $000007C7 VOL: 0
;PCODE: $000007C8 VOL: 0
;PCODE: $000007C9 VOL: 0
;PCODE: $000007CA VOL: 0
; 0000 03BF     {
; 0000 03C0     case 0: process_value[mux_scan] = linearise_p(adc_value,cal_zero[mux_scan],cal_span[mux_scan]);
;PCODE: $000007CB VOL: 0
;PCODE: $000007CC VOL: 0
;PCODE: $000007CD VOL: 0
;PCODE: $000007CE VOL: 0
;PCODE: $000007CF VOL: 0
;PCODE: $000007D0 VOL: 0
;PCODE: $000007D1 VOL: 0
;PCODE: $000007D2 VOL: 0
;PCODE: $000007D3 VOL: 0
;PCODE: $000007D4 VOL: 0
;PCODE: $000007D5 VOL: 0
;PCODE: $000007D6 VOL: 0
;PCODE: $000007D7 VOL: 0
;PCODE: $000007D8 VOL: 0
;PCODE: $000007D9 VOL: 0
;PCODE: $000007DA VOL: 0
;PCODE: $000007DB VOL: 0
;PCODE: $000007DC VOL: 0
;PCODE: $000007DD VOL: 0
;PCODE: $000007DE VOL: 0
;PCODE: $000007DF VOL: 0
;PCODE: $000007E0 VOL: 0
;PCODE: $000007E1 VOL: 0
;PCODE: $000007E2 VOL: 0
;PCODE: $000007E3 VOL: 0
;PCODE: $000007E4 VOL: 0
;PCODE: $000007E5 VOL: 0
; 0000 03C1             break;
;PCODE: $000007E6 VOL: 0
; 0000 03C2     case 1: process_value[mux_scan] = linearise_p(adc_value,cal_zero[mux_scan],cal_span[mux_scan])/10;
;PCODE: $000007E7 VOL: 0
;PCODE: $000007E8 VOL: 0
;PCODE: $000007E9 VOL: 0
;PCODE: $000007EA VOL: 0
;PCODE: $000007EB VOL: 0
;PCODE: $000007EC VOL: 0
;PCODE: $000007ED VOL: 0
;PCODE: $000007EE VOL: 0
;PCODE: $000007EF VOL: 0
;PCODE: $000007F0 VOL: 0
;PCODE: $000007F1 VOL: 0
;PCODE: $000007F2 VOL: 0
;PCODE: $000007F3 VOL: 0
;PCODE: $000007F4 VOL: 0
;PCODE: $000007F5 VOL: 0
;PCODE: $000007F6 VOL: 0
;PCODE: $000007F7 VOL: 0
;PCODE: $000007F8 VOL: 0
;PCODE: $000007F9 VOL: 0
;PCODE: $000007FA VOL: 0
;PCODE: $000007FB VOL: 0
;PCODE: $000007FC VOL: 0
;PCODE: $000007FD VOL: 0
;PCODE: $000007FE VOL: 0
;PCODE: $000007FF VOL: 0
;PCODE: $00000800 VOL: 0
;PCODE: $00000801 VOL: 0
;PCODE: $00000802 VOL: 0
;PCODE: $00000803 VOL: 0
;PCODE: $00000804 VOL: 0
;PCODE: $00000805 VOL: 0
; 0000 03C3             break;
;PCODE: $00000806 VOL: 0
; 0000 03C4     case 2: process_value[mux_scan] = linearise_tc(adc_value,cal_zero[mux_scan],cal_span[mux_scan],15,table_j);
;PCODE: $00000807 VOL: 0
;PCODE: $00000808 VOL: 0
;PCODE: $00000809 VOL: 0
;PCODE: $0000080A VOL: 0
;PCODE: $0000080B VOL: 0
;PCODE: $0000080C VOL: 0
;PCODE: $0000080D VOL: 0
;PCODE: $0000080E VOL: 0
;PCODE: $0000080F VOL: 0
;PCODE: $00000810 VOL: 0
;PCODE: $00000811 VOL: 0
;PCODE: $00000812 VOL: 0
;PCODE: $00000813 VOL: 0
;PCODE: $00000814 VOL: 0
;PCODE: $00000815 VOL: 0
;PCODE: $00000816 VOL: 0
;PCODE: $00000817 VOL: 0
;PCODE: $00000818 VOL: 0
;PCODE: $00000819 VOL: 0
;PCODE: $0000081A VOL: 0
;PCODE: $0000081B VOL: 0
;PCODE: $0000081C VOL: 0
;PCODE: $0000081D VOL: 0
;PCODE: $0000081E VOL: 0
;PCODE: $0000081F VOL: 0
;PCODE: $00000820 VOL: 0
;PCODE: $00000821 VOL: 0
;PCODE: $00000822 VOL: 0
;PCODE: $00000823 VOL: 0
;PCODE: $00000824 VOL: 0
;PCODE: $00000825 VOL: 0
; 0000 03C5             break;
;PCODE: $00000826 VOL: 0
; 0000 03C6     case 3: process_value[mux_scan] = linearise_tc(adc_value,cal_zero[mux_scan],cal_span[mux_scan],28,table_k);
;PCODE: $00000827 VOL: 0
;PCODE: $00000828 VOL: 0
;PCODE: $00000829 VOL: 0
;PCODE: $0000082A VOL: 0
;PCODE: $0000082B VOL: 0
;PCODE: $0000082C VOL: 0
;PCODE: $0000082D VOL: 0
;PCODE: $0000082E VOL: 0
;PCODE: $0000082F VOL: 0
;PCODE: $00000830 VOL: 0
;PCODE: $00000831 VOL: 0
;PCODE: $00000832 VOL: 0
;PCODE: $00000833 VOL: 0
;PCODE: $00000834 VOL: 0
;PCODE: $00000835 VOL: 0
;PCODE: $00000836 VOL: 0
;PCODE: $00000837 VOL: 0
;PCODE: $00000838 VOL: 0
;PCODE: $00000839 VOL: 0
;PCODE: $0000083A VOL: 0
;PCODE: $0000083B VOL: 0
;PCODE: $0000083C VOL: 0
;PCODE: $0000083D VOL: 0
;PCODE: $0000083E VOL: 0
;PCODE: $0000083F VOL: 0
;PCODE: $00000840 VOL: 0
;PCODE: $00000841 VOL: 0
;PCODE: $00000842 VOL: 0
;PCODE: $00000843 VOL: 0
;PCODE: $00000844 VOL: 0
;PCODE: $00000845 VOL: 0
; 0000 03C7             break;
;PCODE: $00000846 VOL: 0
; 0000 03C8     case 4: process_value[mux_scan] = linearise_tc(adc_value,cal_zero[mux_scan],cal_span[mux_scan],36,table_r);
;PCODE: $00000847 VOL: 0
;PCODE: $00000848 VOL: 0
;PCODE: $00000849 VOL: 0
;PCODE: $0000084A VOL: 0
;PCODE: $0000084B VOL: 0
;PCODE: $0000084C VOL: 0
;PCODE: $0000084D VOL: 0
;PCODE: $0000084E VOL: 0
;PCODE: $0000084F VOL: 0
;PCODE: $00000850 VOL: 0
;PCODE: $00000851 VOL: 0
;PCODE: $00000852 VOL: 0
;PCODE: $00000853 VOL: 0
;PCODE: $00000854 VOL: 0
;PCODE: $00000855 VOL: 0
;PCODE: $00000856 VOL: 0
;PCODE: $00000857 VOL: 0
;PCODE: $00000858 VOL: 0
;PCODE: $00000859 VOL: 0
;PCODE: $0000085A VOL: 0
;PCODE: $0000085B VOL: 0
;PCODE: $0000085C VOL: 0
;PCODE: $0000085D VOL: 0
;PCODE: $0000085E VOL: 0
;PCODE: $0000085F VOL: 0
;PCODE: $00000860 VOL: 0
;PCODE: $00000861 VOL: 0
;PCODE: $00000862 VOL: 0
;PCODE: $00000863 VOL: 0
;PCODE: $00000864 VOL: 0
;PCODE: $00000865 VOL: 0
; 0000 03C9             break;
;PCODE: $00000866 VOL: 0
; 0000 03CA     case 5: process_value[mux_scan] = linearise_tc(adc_value,cal_zero[mux_scan],cal_span[mux_scan],36,table_s);
;PCODE: $00000867 VOL: 0
;PCODE: $00000868 VOL: 0
;PCODE: $00000869 VOL: 0
;PCODE: $0000086A VOL: 0
;PCODE: $0000086B VOL: 0
;PCODE: $0000086C VOL: 0
;PCODE: $0000086D VOL: 0
;PCODE: $0000086E VOL: 0
;PCODE: $0000086F VOL: 0
;PCODE: $00000870 VOL: 0
;PCODE: $00000871 VOL: 0
;PCODE: $00000872 VOL: 0
;PCODE: $00000873 VOL: 0
;PCODE: $00000874 VOL: 0
;PCODE: $00000875 VOL: 0
;PCODE: $00000876 VOL: 0
;PCODE: $00000877 VOL: 0
;PCODE: $00000878 VOL: 0
;PCODE: $00000879 VOL: 0
;PCODE: $0000087A VOL: 0
;PCODE: $0000087B VOL: 0
;PCODE: $0000087C VOL: 0
;PCODE: $0000087D VOL: 0
;PCODE: $0000087E VOL: 0
;PCODE: $0000087F VOL: 0
;PCODE: $00000880 VOL: 0
;PCODE: $00000881 VOL: 0
;PCODE: $00000882 VOL: 0
;PCODE: $00000883 VOL: 0
;PCODE: $00000884 VOL: 0
;PCODE: $00000885 VOL: 0
; 0000 03CB             break;
;PCODE: $00000886 VOL: 0
; 0000 03CC     case 6: process_value[mux_scan] = linearise_tc(adc_value,cal_zero[mux_scan],cal_span[mux_scan],8,table_t);
;PCODE: $00000887 VOL: 0
;PCODE: $00000888 VOL: 0
;PCODE: $00000889 VOL: 0
;PCODE: $0000088A VOL: 0
;PCODE: $0000088B VOL: 0
;PCODE: $0000088C VOL: 0
;PCODE: $0000088D VOL: 0
;PCODE: $0000088E VOL: 0
;PCODE: $0000088F VOL: 0
;PCODE: $00000890 VOL: 0
;PCODE: $00000891 VOL: 0
;PCODE: $00000892 VOL: 0
;PCODE: $00000893 VOL: 0
;PCODE: $00000894 VOL: 0
;PCODE: $00000895 VOL: 0
;PCODE: $00000896 VOL: 0
;PCODE: $00000897 VOL: 0
;PCODE: $00000898 VOL: 0
;PCODE: $00000899 VOL: 0
;PCODE: $0000089A VOL: 0
;PCODE: $0000089B VOL: 0
;PCODE: $0000089C VOL: 0
;PCODE: $0000089D VOL: 0
;PCODE: $0000089E VOL: 0
;PCODE: $0000089F VOL: 0
;PCODE: $000008A0 VOL: 0
;PCODE: $000008A1 VOL: 0
;PCODE: $000008A2 VOL: 0
;PCODE: $000008A3 VOL: 0
;PCODE: $000008A4 VOL: 0
;PCODE: $000008A5 VOL: 0
; 0000 03CD             break;
;PCODE: $000008A6 VOL: 0
; 0000 03CE     }
;PCODE: $000008A7 VOL: 0
; 0000 03CF 
; 0000 03D0 
; 0000 03D1 
; 0000 03D2 
; 0000 03D3 
; 0000 03D4 mux_scan++;
;PCODE: $000008A8 VOL: 0
;PCODE: $000008A9 VOL: 0
;PCODE: $000008AA VOL: 0
;PCODE: $000008AB VOL: 0
; 0000 03D5 //////////////////////////////////////////////////////////////////
; 0000 03D6 //internal scanning according to skip status. to be checked later after uncommenting
; 0000 03D7 //////////////////////////////////////////////////////////////////
; 0000 03D8 
; 0000 03D9 while (skip[mux_scan] !=0)
;PCODE: $000008AC VOL: 0
;PCODE: $000008AD VOL: 0
;PCODE: $000008AE VOL: 0
;PCODE: $000008AF VOL: 0
;PCODE: $000008B0 VOL: 0
;PCODE: $000008B1 VOL: 0
;PCODE: $000008B2 VOL: 0
;PCODE: $000008B3 VOL: 0
; 0000 03DA {
; 0000 03DB mux_scan++;
;PCODE: $000008B4 VOL: 0
;PCODE: $000008B5 VOL: 0
;PCODE: $000008B6 VOL: 0
;PCODE: $000008B7 VOL: 0
; 0000 03DC if (mux_scan>=8)
;PCODE: $000008B8 VOL: 0
;PCODE: $000008B9 VOL: 0
;PCODE: $000008BA VOL: 0
; 0000 03DD break;
;PCODE: $000008BB VOL: 0
; 0000 03DE }
;PCODE: $000008BC VOL: 0
;PCODE: $000008BD VOL: 0
;PCODE: $000008BE VOL: 0
; 0000 03DF 
; 0000 03E0 //////////////////////////////////////////////////////////////////
; 0000 03E1 
; 0000 03E2 
; 0000 03E3 
; 0000 03E4 if (mux_scan >=8) mux_scan =0;
;PCODE: $000008BF VOL: 0
;PCODE: $000008C0 VOL: 0
;PCODE: $000008C1 VOL: 0
;PCODE: $000008C2 VOL: 0
;PCODE: $000008C3 VOL: 0
; 0000 03E5 switch(mux_scan)
;PCODE: $000008C4 VOL: 0
;PCODE: $000008C5 VOL: 0
; 0000 03E6     {
; 0000 03E7     case 0: mux9 =0;
;PCODE: $000008C6 VOL: 0
;PCODE: $000008C7 VOL: 0
;PCODE: $000008C8 VOL: 0
;PCODE: $000008C9 VOL: 0
; 0000 03E8             mux10 =0;
;PCODE: $000008CA VOL: 0
;PCODE: $000008CB VOL: 0
; 0000 03E9             mux11 =0;
;PCODE: $000008CC VOL: 0
;PCODE: $000008CD VOL: 0
; 0000 03EA             break;
;PCODE: $000008CE VOL: 0
; 0000 03EB     case 1: mux9 =1;
;PCODE: $000008CF VOL: 0
;PCODE: $000008D0 VOL: 0
;PCODE: $000008D1 VOL: 0
;PCODE: $000008D2 VOL: 0
;PCODE: $000008D3 VOL: 0
; 0000 03EC             mux10 =0;
;PCODE: $000008D4 VOL: 0
;PCODE: $000008D5 VOL: 0
; 0000 03ED             mux11 =0;
;PCODE: $000008D6 VOL: 0
;PCODE: $000008D7 VOL: 0
; 0000 03EE             break;
;PCODE: $000008D8 VOL: 0
; 0000 03EF     case 2: mux9 =0;
;PCODE: $000008D9 VOL: 0
;PCODE: $000008DA VOL: 0
;PCODE: $000008DB VOL: 0
;PCODE: $000008DC VOL: 0
;PCODE: $000008DD VOL: 0
; 0000 03F0             mux10 =1;
;PCODE: $000008DE VOL: 0
;PCODE: $000008DF VOL: 0
; 0000 03F1             mux11 =0;
;PCODE: $000008E0 VOL: 0
;PCODE: $000008E1 VOL: 0
; 0000 03F2             break;
;PCODE: $000008E2 VOL: 0
; 0000 03F3     case 3: mux9 =1;
;PCODE: $000008E3 VOL: 0
;PCODE: $000008E4 VOL: 0
;PCODE: $000008E5 VOL: 0
;PCODE: $000008E6 VOL: 0
;PCODE: $000008E7 VOL: 0
; 0000 03F4             mux10 =1;
;PCODE: $000008E8 VOL: 0
;PCODE: $000008E9 VOL: 0
; 0000 03F5             mux11 =0;
;PCODE: $000008EA VOL: 0
;PCODE: $000008EB VOL: 0
; 0000 03F6             break;
;PCODE: $000008EC VOL: 0
; 0000 03F7     case 4: mux9 =0;
;PCODE: $000008ED VOL: 0
;PCODE: $000008EE VOL: 0
;PCODE: $000008EF VOL: 0
;PCODE: $000008F0 VOL: 0
;PCODE: $000008F1 VOL: 0
; 0000 03F8             mux10 =0;
;PCODE: $000008F2 VOL: 0
;PCODE: $000008F3 VOL: 0
; 0000 03F9             mux11 =1;
;PCODE: $000008F4 VOL: 0
;PCODE: $000008F5 VOL: 0
; 0000 03FA             break;
;PCODE: $000008F6 VOL: 0
; 0000 03FB     case 5: mux9 =1;
;PCODE: $000008F7 VOL: 0
;PCODE: $000008F8 VOL: 0
;PCODE: $000008F9 VOL: 0
;PCODE: $000008FA VOL: 0
;PCODE: $000008FB VOL: 0
; 0000 03FC             mux10 =0;
;PCODE: $000008FC VOL: 0
;PCODE: $000008FD VOL: 0
; 0000 03FD             mux11 =1;
;PCODE: $000008FE VOL: 0
;PCODE: $000008FF VOL: 0
; 0000 03FE             break;
;PCODE: $00000900 VOL: 0
; 0000 03FF     case 6: mux9 =0;
;PCODE: $00000901 VOL: 0
;PCODE: $00000902 VOL: 0
;PCODE: $00000903 VOL: 0
;PCODE: $00000904 VOL: 0
;PCODE: $00000905 VOL: 0
; 0000 0400             mux10 =1;
;PCODE: $00000906 VOL: 0
;PCODE: $00000907 VOL: 0
; 0000 0401             mux11 =1;
;PCODE: $00000908 VOL: 0
;PCODE: $00000909 VOL: 0
; 0000 0402             break;
;PCODE: $0000090A VOL: 0
; 0000 0403     case 7: mux9 =1;
;PCODE: $0000090B VOL: 0
;PCODE: $0000090C VOL: 0
;PCODE: $0000090D VOL: 0
;PCODE: $0000090E VOL: 0
;PCODE: $0000090F VOL: 0
; 0000 0404             mux10 =1;
;PCODE: $00000910 VOL: 0
;PCODE: $00000911 VOL: 0
; 0000 0405             mux11 =1;
;PCODE: $00000912 VOL: 0
;PCODE: $00000913 VOL: 0
; 0000 0406             break;
;PCODE: $00000914 VOL: 0
; 0000 0407     default:mux_scan =0;
;PCODE: $00000915 VOL: 0
;PCODE: $00000916 VOL: 0
;PCODE: $00000917 VOL: 0
; 0000 0408             mux9 =0;
;PCODE: $00000918 VOL: 0
;PCODE: $00000919 VOL: 0
; 0000 0409             mux10 =0;
;PCODE: $0000091A VOL: 0
;PCODE: $0000091B VOL: 0
; 0000 040A             mux11 =0;
;PCODE: $0000091C VOL: 0
;PCODE: $0000091D VOL: 0
; 0000 040B             break;
;PCODE: $0000091E VOL: 0
; 0000 040C     }
;PCODE: $0000091F VOL: 0
; 0000 040D }
; 0000 040E }
;PCODE: $00000920 VOL: 0
;PCODE: $00000921 VOL: 0
;PCODE: $00000922 VOL: 0
;PCODE: $00000923 VOL: 0
;
;void display_put(int up_display, int low_display,int status,short int* message1,short int* message2)
; 0000 0411 {
;PCODE: $00000924 VOL: 0
;PCODE: $00000925 VOL: 0
; 0000 0412 if (status ==0)
;PCODE: $00000926 VOL: 0
;	up_display -> Y+8
;	low_display -> Y+6
;	status -> Y+4
;	*message1 -> Y+2
;	*message2 -> Y+0
;PCODE: $00000927 VOL: 0
;PCODE: $00000928 VOL: 0
;PCODE: $00000929 VOL: 0
; 0000 0413         {
; 0000 0414         if (up_display <0 && up_display > -1000)
;PCODE: $0000092A VOL: 0
;PCODE: $0000092B VOL: 0
;PCODE: $0000092C VOL: 0
;PCODE: $0000092D VOL: 0
;PCODE: $0000092E VOL: 0
;PCODE: $0000092F VOL: 0
;PCODE: $00000930 VOL: 0
;PCODE: $00000931 VOL: 0
;PCODE: $00000932 VOL: 0
;PCODE: $00000933 VOL: 0
;PCODE: $00000934 VOL: 0
; 0000 0415         {
; 0000 0416         up_display = -up_display;
;PCODE: $00000935 VOL: 0
;PCODE: $00000936 VOL: 0
;PCODE: $00000937 VOL: 0
; 0000 0417         up_display%=1000;
;PCODE: $00000938 VOL: 0
;PCODE: $00000939 VOL: 0
;PCODE: $0000093A VOL: 0
;PCODE: $0000093B VOL: 0
; 0000 0418         display_buffer[0]= 30;
;PCODE: $0000093C VOL: 0
;PCODE: $0000093D VOL: 0
; 0000 0419         }
; 0000 041A         else if (up_display <=-1000)
;PCODE: $0000093E VOL: 0
;PCODE: $0000093F VOL: 0
;PCODE: $00000940 VOL: 0
;PCODE: $00000941 VOL: 0
;PCODE: $00000942 VOL: 0
;PCODE: $00000943 VOL: 0
; 0000 041B         {
; 0000 041C         up_display = -up_display;
;PCODE: $00000944 VOL: 0
;PCODE: $00000945 VOL: 0
;PCODE: $00000946 VOL: 0
; 0000 041D         up_display%=1000;
;PCODE: $00000947 VOL: 0
;PCODE: $00000948 VOL: 0
;PCODE: $00000949 VOL: 0
;PCODE: $0000094A VOL: 0
; 0000 041E         display_buffer[0]= 35;
;PCODE: $0000094B VOL: 0
;PCODE: $0000094C VOL: 0
; 0000 041F 
; 0000 0420 
; 0000 0421         }
; 0000 0422         else
;PCODE: $0000094D VOL: 0
;PCODE: $0000094E VOL: 0
; 0000 0423         {
; 0000 0424         display_buffer[0]=up_display/1000;
;PCODE: $0000094F VOL: 0
;PCODE: $00000950 VOL: 0
;PCODE: $00000951 VOL: 0
;PCODE: $00000952 VOL: 0
; 0000 0425         up_display%=1000;
;PCODE: $00000953 VOL: 0
;PCODE: $00000954 VOL: 0
;PCODE: $00000955 VOL: 0
;PCODE: $00000956 VOL: 0
; 0000 0426         }
;PCODE: $00000957 VOL: 0
;PCODE: $00000958 VOL: 0
; 0000 0427         display_buffer[1]=up_display/100;
;PCODE: $00000959 VOL: 0
;PCODE: $0000095A VOL: 0
;PCODE: $0000095B VOL: 0
;PCODE: $0000095C VOL: 0
;PCODE: $0000095D VOL: 0
; 0000 0428         up_display%=100;
;PCODE: $0000095E VOL: 0
;PCODE: $0000095F VOL: 0
;PCODE: $00000960 VOL: 0
;PCODE: $00000961 VOL: 0
; 0000 0429         display_buffer[2]=up_display/10;
;PCODE: $00000962 VOL: 0
;PCODE: $00000963 VOL: 0
;PCODE: $00000964 VOL: 0
;PCODE: $00000965 VOL: 0
;PCODE: $00000966 VOL: 0
; 0000 042A         up_display%=10;
;PCODE: $00000967 VOL: 0
;PCODE: $00000968 VOL: 0
;PCODE: $00000969 VOL: 0
;PCODE: $0000096A VOL: 0
; 0000 042B         display_buffer[3]=up_display;
;PCODE: $0000096B VOL: 0
;PCODE: $0000096C VOL: 0
;PCODE: $0000096D VOL: 0
; 0000 042C 
; 0000 042D         if (low_display <0)
;PCODE: $0000096E VOL: 0
;PCODE: $0000096F VOL: 0
;PCODE: $00000970 VOL: 0
; 0000 042E         {
; 0000 042F         low_display = -low_display;
;PCODE: $00000971 VOL: 0
;PCODE: $00000972 VOL: 0
;PCODE: $00000973 VOL: 0
; 0000 0430         low_display%=1000;
;PCODE: $00000974 VOL: 0
;PCODE: $00000975 VOL: 0
;PCODE: $00000976 VOL: 0
;PCODE: $00000977 VOL: 0
; 0000 0431         display_buffer[4]= 30;
;PCODE: $00000978 VOL: 0
;PCODE: $00000979 VOL: 0
;PCODE: $0000097A VOL: 0
;PCODE: $0000097B VOL: 0
; 0000 0432         }
; 0000 0433         else
;PCODE: $0000097C VOL: 0
;PCODE: $0000097D VOL: 0
; 0000 0434         {
; 0000 0435         display_buffer[4]=low_display/1000;
;PCODE: $0000097E VOL: 0
;PCODE: $0000097F VOL: 0
;PCODE: $00000980 VOL: 0
;PCODE: $00000981 VOL: 0
;PCODE: $00000982 VOL: 0
; 0000 0436         low_display%=1000;
;PCODE: $00000983 VOL: 0
;PCODE: $00000984 VOL: 0
;PCODE: $00000985 VOL: 0
;PCODE: $00000986 VOL: 0
; 0000 0437         }
;PCODE: $00000987 VOL: 0
; 0000 0438         display_buffer[5]=low_display/100;
;PCODE: $00000988 VOL: 0
;PCODE: $00000989 VOL: 0
;PCODE: $0000098A VOL: 0
;PCODE: $0000098B VOL: 0
;PCODE: $0000098C VOL: 0
; 0000 0439         low_display%=100;
;PCODE: $0000098D VOL: 0
;PCODE: $0000098E VOL: 0
;PCODE: $0000098F VOL: 0
;PCODE: $00000990 VOL: 0
; 0000 043A         display_buffer[6]=low_display/10;
;PCODE: $00000991 VOL: 0
;PCODE: $00000992 VOL: 0
;PCODE: $00000993 VOL: 0
;PCODE: $00000994 VOL: 0
;PCODE: $00000995 VOL: 0
; 0000 043B         low_display%=10;
;PCODE: $00000996 VOL: 0
;PCODE: $00000997 VOL: 0
;PCODE: $00000998 VOL: 0
;PCODE: $00000999 VOL: 0
; 0000 043C         display_buffer[7]=low_display;
;PCODE: $0000099A VOL: 0
;PCODE: $0000099B VOL: 0
;PCODE: $0000099C VOL: 0
; 0000 043D         }
; 0000 043E else if (status ==1)
;PCODE: $0000099D VOL: 0
;PCODE: $0000099E VOL: 0
;PCODE: $0000099F VOL: 0
;PCODE: $000009A0 VOL: 0
;PCODE: $000009A1 VOL: 0
; 0000 043F         {
; 0000 0440         message1 = message1 + (up_display *4);
;PCODE: $000009A2 VOL: 0
;PCODE: $000009A3 VOL: 0
;PCODE: $000009A4 VOL: 0
;PCODE: $000009A5 VOL: 0
;PCODE: $000009A6 VOL: 0
;PCODE: $000009A7 VOL: 0
; 0000 0441         display_buffer[0]=*message1;
;PCODE: $000009A8 VOL: 0
;PCODE: $000009A9 VOL: 0
;PCODE: $000009AA VOL: 0
; 0000 0442         message1++;
;PCODE: $000009AB VOL: 0
;PCODE: $000009AC VOL: 0
;PCODE: $000009AD VOL: 0
; 0000 0443         display_buffer[1]=*message1;
;PCODE: $000009AE VOL: 0
;PCODE: $000009AF VOL: 0
;PCODE: $000009B0 VOL: 0
;PCODE: $000009B1 VOL: 0
; 0000 0444         message1++;
;PCODE: $000009B2 VOL: 0
;PCODE: $000009B3 VOL: 0
;PCODE: $000009B4 VOL: 0
; 0000 0445         display_buffer[2]=*message1;
;PCODE: $000009B5 VOL: 0
;PCODE: $000009B6 VOL: 0
;PCODE: $000009B7 VOL: 0
;PCODE: $000009B8 VOL: 0
; 0000 0446         message1++;
;PCODE: $000009B9 VOL: 0
;PCODE: $000009BA VOL: 0
;PCODE: $000009BB VOL: 0
; 0000 0447         display_buffer[3]=*message1;
;PCODE: $000009BC VOL: 0
;PCODE: $000009BD VOL: 0
;PCODE: $000009BE VOL: 0
;PCODE: $000009BF VOL: 0
; 0000 0448         if (low_display <0)
;PCODE: $000009C0 VOL: 0
;PCODE: $000009C1 VOL: 0
;PCODE: $000009C2 VOL: 0
; 0000 0449         {
; 0000 044A         low_display = -low_display;
;PCODE: $000009C3 VOL: 0
;PCODE: $000009C4 VOL: 0
;PCODE: $000009C5 VOL: 0
; 0000 044B         low_display%=1000;
;PCODE: $000009C6 VOL: 0
;PCODE: $000009C7 VOL: 0
;PCODE: $000009C8 VOL: 0
;PCODE: $000009C9 VOL: 0
; 0000 044C         display_buffer[4]= 30;
;PCODE: $000009CA VOL: 0
;PCODE: $000009CB VOL: 0
;PCODE: $000009CC VOL: 0
;PCODE: $000009CD VOL: 0
; 0000 044D         }
; 0000 044E         else
;PCODE: $000009CE VOL: 0
;PCODE: $000009CF VOL: 0
; 0000 044F         {
; 0000 0450         display_buffer[4]=low_display/1000;
;PCODE: $000009D0 VOL: 0
;PCODE: $000009D1 VOL: 0
;PCODE: $000009D2 VOL: 0
;PCODE: $000009D3 VOL: 0
;PCODE: $000009D4 VOL: 0
; 0000 0451         low_display%=1000;
;PCODE: $000009D5 VOL: 0
;PCODE: $000009D6 VOL: 0
;PCODE: $000009D7 VOL: 0
;PCODE: $000009D8 VOL: 0
; 0000 0452         }        display_buffer[5]=low_display/100;
;PCODE: $000009D9 VOL: 0
;PCODE: $000009DA VOL: 0
;PCODE: $000009DB VOL: 0
;PCODE: $000009DC VOL: 0
;PCODE: $000009DD VOL: 0
;PCODE: $000009DE VOL: 0
; 0000 0453         low_display%=100;
;PCODE: $000009DF VOL: 0
;PCODE: $000009E0 VOL: 0
;PCODE: $000009E1 VOL: 0
;PCODE: $000009E2 VOL: 0
; 0000 0454         display_buffer[6]=low_display/10;
;PCODE: $000009E3 VOL: 0
;PCODE: $000009E4 VOL: 0
;PCODE: $000009E5 VOL: 0
;PCODE: $000009E6 VOL: 0
;PCODE: $000009E7 VOL: 0
; 0000 0455         low_display%=10;
;PCODE: $000009E8 VOL: 0
;PCODE: $000009E9 VOL: 0
;PCODE: $000009EA VOL: 0
;PCODE: $000009EB VOL: 0
; 0000 0456         display_buffer[7]=low_display;
;PCODE: $000009EC VOL: 0
;PCODE: $000009ED VOL: 0
;PCODE: $000009EE VOL: 0
; 0000 0457         }
; 0000 0458 else if (status ==2)
;PCODE: $000009EF VOL: 0
;PCODE: $000009F0 VOL: 0
;PCODE: $000009F1 VOL: 0
;PCODE: $000009F2 VOL: 0
;PCODE: $000009F3 VOL: 0
; 0000 0459         {
; 0000 045A         message1 = message1 + (up_display *4);
;PCODE: $000009F4 VOL: 0
;PCODE: $000009F5 VOL: 0
;PCODE: $000009F6 VOL: 0
;PCODE: $000009F7 VOL: 0
;PCODE: $000009F8 VOL: 0
;PCODE: $000009F9 VOL: 0
; 0000 045B         display_buffer[0]=*message1;
;PCODE: $000009FA VOL: 0
;PCODE: $000009FB VOL: 0
;PCODE: $000009FC VOL: 0
; 0000 045C         message1++;
;PCODE: $000009FD VOL: 0
;PCODE: $000009FE VOL: 0
;PCODE: $000009FF VOL: 0
; 0000 045D         display_buffer[1]=*message1;
;PCODE: $00000A00 VOL: 0
;PCODE: $00000A01 VOL: 0
;PCODE: $00000A02 VOL: 0
;PCODE: $00000A03 VOL: 0
; 0000 045E         message1++;
;PCODE: $00000A04 VOL: 0
;PCODE: $00000A05 VOL: 0
;PCODE: $00000A06 VOL: 0
; 0000 045F         display_buffer[2]=*message1;
;PCODE: $00000A07 VOL: 0
;PCODE: $00000A08 VOL: 0
;PCODE: $00000A09 VOL: 0
;PCODE: $00000A0A VOL: 0
; 0000 0460         message1++;
;PCODE: $00000A0B VOL: 0
;PCODE: $00000A0C VOL: 0
;PCODE: $00000A0D VOL: 0
; 0000 0461         display_buffer[3]=*message1;
;PCODE: $00000A0E VOL: 0
;PCODE: $00000A0F VOL: 0
;PCODE: $00000A10 VOL: 0
;PCODE: $00000A11 VOL: 0
; 0000 0462         message2 = message2 + (low_display * 4);
;PCODE: $00000A12 VOL: 0
;PCODE: $00000A13 VOL: 0
;PCODE: $00000A14 VOL: 0
;PCODE: $00000A15 VOL: 0
;PCODE: $00000A16 VOL: 0
;PCODE: $00000A17 VOL: 0
; 0000 0463         display_buffer[4]=*message2;
;PCODE: $00000A18 VOL: 0
;PCODE: $00000A19 VOL: 0
;PCODE: $00000A1A VOL: 0
;PCODE: $00000A1B VOL: 0
; 0000 0464         message2++;
;PCODE: $00000A1C VOL: 0
;PCODE: $00000A1D VOL: 0
;PCODE: $00000A1E VOL: 0
; 0000 0465         display_buffer[5]=*message2;
;PCODE: $00000A1F VOL: 0
;PCODE: $00000A20 VOL: 0
;PCODE: $00000A21 VOL: 0
;PCODE: $00000A22 VOL: 0
; 0000 0466         message2++;
;PCODE: $00000A23 VOL: 0
;PCODE: $00000A24 VOL: 0
;PCODE: $00000A25 VOL: 0
; 0000 0467         display_buffer[6]=*message2;
;PCODE: $00000A26 VOL: 0
;PCODE: $00000A27 VOL: 0
;PCODE: $00000A28 VOL: 0
;PCODE: $00000A29 VOL: 0
; 0000 0468         message2++;
;PCODE: $00000A2A VOL: 0
;PCODE: $00000A2B VOL: 0
;PCODE: $00000A2C VOL: 0
; 0000 0469         display_buffer[7]=*message2;
;PCODE: $00000A2D VOL: 0
;PCODE: $00000A2E VOL: 0
;PCODE: $00000A2F VOL: 0
;PCODE: $00000A30 VOL: 0
; 0000 046A         }
; 0000 046B /*
; 0000 046C if (mode ==9 && open_sensor)
; 0000 046D         {
; 0000 046E         display_buffer[0] = 1;
; 0000 046F         display_buffer[1] = 33;
; 0000 0470         display_buffer[2] = 33;
; 0000 0471         display_buffer[3] = 33;
; 0000 0472         }
; 0000 0473 if (mode ==9 && neg_fl)
; 0000 0474         {
; 0000 0475         display_buffer[0] = 32;
; 0000 0476         display_buffer[1] = 32;
; 0000 0477         display_buffer[2] = 32;
; 0000 0478         display_buffer[3] = 32;
; 0000 0479         }
; 0000 047A */
; 0000 047B }
;PCODE: $00000A31 VOL: 0
;PCODE: $00000A32 VOL: 0
;PCODE: $00000A33 VOL: 0
;PCODE: $00000A34 VOL: 0
;PCODE: $00000A35 VOL: 0
;PCODE: $00000A36 VOL: 0
;
;void display_check(void)
; 0000 047E {
;PCODE: $00000A37 VOL: 0
;PCODE: $00000A38 VOL: 0
; 0000 047F int adc_value;
; 0000 0480 if(!menu_fl && !cal_fl)
;PCODE: $00000A39 VOL: 0
;PCODE: $00000A3A VOL: 0
;	adc_value -> R16,R17
;PCODE: $00000A3B VOL: 0
;PCODE: $00000A3C VOL: 0
;PCODE: $00000A3D VOL: 0
;PCODE: $00000A3E VOL: 0
;PCODE: $00000A3F VOL: 0
;PCODE: $00000A40 VOL: 0
;PCODE: $00000A41 VOL: 0
;PCODE: $00000A42 VOL: 0
;PCODE: $00000A43 VOL: 0
;PCODE: $00000A44 VOL: 0
; 0000 0481     {
; 0000 0482     skip[0] = ee_skip[0] =0;
;PCODE: $00000A45 VOL: 0
;PCODE: $00000A46 VOL: 0
;PCODE: $00000A47 VOL: 0
;PCODE: $00000A48 VOL: 0
; 0000 0483     if (tsec_fl)
;PCODE: $00000A49 VOL: 0
;PCODE: $00000A4A VOL: 0
;PCODE: $00000A4B VOL: 0
; 0000 0484         {
; 0000 0485         display_scan_cnt++;
;PCODE: $00000A4C VOL: 0
;PCODE: $00000A4D VOL: 0
;PCODE: $00000A4E VOL: 0
; 0000 0486         if (skip[display_scan_cnt]!=0 && display_scan_cnt <=8)
;PCODE: $00000A4F VOL: 0
;PCODE: $00000A50 VOL: 0
;PCODE: $00000A51 VOL: 0
;PCODE: $00000A52 VOL: 0
;PCODE: $00000A53 VOL: 0
;PCODE: $00000A54 VOL: 0
;PCODE: $00000A55 VOL: 0
;PCODE: $00000A56 VOL: 0
;PCODE: $00000A57 VOL: 0
;PCODE: $00000A58 VOL: 0
;PCODE: $00000A59 VOL: 0
;PCODE: $00000A5A VOL: 0
;PCODE: $00000A5B VOL: 0
;PCODE: $00000A5C VOL: 0
; 0000 0487         goto bypass;
;PCODE: $00000A5D VOL: 0
; 0000 0488         tsec_fl =0;
;PCODE: $00000A5E VOL: 0
;PCODE: $00000A5F VOL: 0
;PCODE: $00000A60 VOL: 0
;PCODE: $00000A61 VOL: 0
; 0000 0489         if (display_scan_cnt >=8) display_scan_cnt =0;
;PCODE: $00000A62 VOL: 0
;PCODE: $00000A63 VOL: 0
;PCODE: $00000A64 VOL: 0
;PCODE: $00000A65 VOL: 0
; 0000 048A         display_put(process_value[display_scan_cnt],display_scan_cnt+1,0,dummy,dummy2);
;PCODE: $00000A66 VOL: 0
;PCODE: $00000A67 VOL: 0
;PCODE: $00000A68 VOL: 0
;PCODE: $00000A69 VOL: 0
;PCODE: $00000A6A VOL: 0
;PCODE: $00000A6B VOL: 0
;PCODE: $00000A6C VOL: 0
;PCODE: $00000A6D VOL: 0
;PCODE: $00000A6E VOL: 0
;PCODE: $00000A6F VOL: 0
;PCODE: $00000A70 VOL: 0
;PCODE: $00000A71 VOL: 0
;PCODE: $00000A72 VOL: 0
;PCODE: $00000A73 VOL: 0
;PCODE: $00000A74 VOL: 0
;PCODE: $00000A75 VOL: 0
; 0000 048B bypass:
;PCODE: $00000A76 VOL: 0
; 0000 048C         }
; 0000 048D     }
;PCODE: $00000A77 VOL: 0
; 0000 048E 
; 0000 048F else if (menu_fl && !cal_fl)
;PCODE: $00000A78 VOL: 0
;PCODE: $00000A79 VOL: 0
;PCODE: $00000A7A VOL: 0
;PCODE: $00000A7B VOL: 0
;PCODE: $00000A7C VOL: 0
;PCODE: $00000A7D VOL: 0
;PCODE: $00000A7E VOL: 0
;PCODE: $00000A7F VOL: 0
;PCODE: $00000A80 VOL: 0
;PCODE: $00000A81 VOL: 0
;PCODE: $00000A82 VOL: 0
;PCODE: $00000A83 VOL: 0
; 0000 0490     {
; 0000 0491     if (level ==1)
;PCODE: $00000A84 VOL: 0
;PCODE: $00000A85 VOL: 0
;PCODE: $00000A86 VOL: 0
; 0000 0492         {
; 0000 0493         display_put(0,item1,2,ms_menu,message_menu);
;PCODE: $00000A87 VOL: 0
;PCODE: $00000A88 VOL: 0
;PCODE: $00000A89 VOL: 0
;PCODE: $00000A8A VOL: 0
;PCODE: $00000A8B VOL: 0
;PCODE: $00000A8C VOL: 0
;PCODE: $00000A8D VOL: 0
;PCODE: $00000A8E VOL: 0
;PCODE: $00000A8F VOL: 0
;PCODE: $00000A90 VOL: 0
; 0000 0494         }
; 0000 0495     else if (level ==2)
;PCODE: $00000A91 VOL: 0
;PCODE: $00000A92 VOL: 0
;PCODE: $00000A93 VOL: 0
;PCODE: $00000A94 VOL: 0
;PCODE: $00000A95 VOL: 0
; 0000 0496         {
; 0000 0497         switch (item1)
;PCODE: $00000A96 VOL: 0
; 0000 0498             {
; 0000 0499             case 0: if (item2==0) display_put(0,gen[0],1,message_gen,dummy); //st
;PCODE: $00000A97 VOL: 0
;PCODE: $00000A98 VOL: 0
;PCODE: $00000A99 VOL: 0
;PCODE: $00000A9A VOL: 0
;PCODE: $00000A9B VOL: 0
;PCODE: $00000A9C VOL: 0
;PCODE: $00000A9D VOL: 0
;PCODE: $00000A9E VOL: 0
;PCODE: $00000A9F VOL: 0
;PCODE: $00000AA0 VOL: 0
;PCODE: $00000AA1 VOL: 0
;PCODE: $00000AA2 VOL: 0
;PCODE: $00000AA3 VOL: 0
;PCODE: $00000AA4 VOL: 0
;PCODE: $00000AA5 VOL: 0
; 0000 049A                     if (item2==1) display_put(1,gen[1],1,message_gen,dummy);
;PCODE: $00000AA6 VOL: 0
;PCODE: $00000AA7 VOL: 0
;PCODE: $00000AA8 VOL: 0
;PCODE: $00000AA9 VOL: 0
;PCODE: $00000AAA VOL: 0
;PCODE: $00000AAB VOL: 0
;PCODE: $00000AAC VOL: 0
;PCODE: $00000AAD VOL: 0
;PCODE: $00000AAE VOL: 0
;PCODE: $00000AAF VOL: 0
;PCODE: $00000AB0 VOL: 0
;PCODE: $00000AB1 VOL: 0
;PCODE: $00000AB2 VOL: 0
;PCODE: $00000AB3 VOL: 0
;PCODE: $00000AB4 VOL: 0
; 0000 049B                     if (item2==2) display_put(2,gen[2],2,message_gen,message_baud);
;PCODE: $00000AB5 VOL: 0
;PCODE: $00000AB6 VOL: 0
;PCODE: $00000AB7 VOL: 0
;PCODE: $00000AB8 VOL: 0
;PCODE: $00000AB9 VOL: 0
;PCODE: $00000ABA VOL: 0
;PCODE: $00000ABB VOL: 0
;PCODE: $00000ABC VOL: 0
;PCODE: $00000ABD VOL: 0
;PCODE: $00000ABE VOL: 0
;PCODE: $00000ABF VOL: 0
;PCODE: $00000AC0 VOL: 0
;PCODE: $00000AC1 VOL: 0
;PCODE: $00000AC2 VOL: 0
;PCODE: $00000AC3 VOL: 0
; 0000 049C                     break;
;PCODE: $00000AC4 VOL: 0
;PCODE: $00000AC5 VOL: 0
; 0000 049D             case 1: display_put(item2,os[item2],1,message_os,dummy);
;PCODE: $00000AC6 VOL: 0
;PCODE: $00000AC7 VOL: 0
;PCODE: $00000AC8 VOL: 0
;PCODE: $00000AC9 VOL: 0
;PCODE: $00000ACA VOL: 0
;PCODE: $00000ACB VOL: 0
;PCODE: $00000ACC VOL: 0
;PCODE: $00000ACD VOL: 0
;PCODE: $00000ACE VOL: 0
;PCODE: $00000ACF VOL: 0
;PCODE: $00000AD0 VOL: 0
;PCODE: $00000AD1 VOL: 0
;PCODE: $00000AD2 VOL: 0
;PCODE: $00000AD3 VOL: 0
;PCODE: $00000AD4 VOL: 0
;PCODE: $00000AD5 VOL: 0
;PCODE: $00000AD6 VOL: 0
; 0000 049E                     break;
;PCODE: $00000AD7 VOL: 0
; 0000 049F             case 2: display_put(item2,skip[item2],2,message_skip,message_skuk);
;PCODE: $00000AD8 VOL: 0
;PCODE: $00000AD9 VOL: 0
;PCODE: $00000ADA VOL: 0
;PCODE: $00000ADB VOL: 0
;PCODE: $00000ADC VOL: 0
;PCODE: $00000ADD VOL: 0
;PCODE: $00000ADE VOL: 0
;PCODE: $00000ADF VOL: 0
;PCODE: $00000AE0 VOL: 0
;PCODE: $00000AE1 VOL: 0
;PCODE: $00000AE2 VOL: 0
;PCODE: $00000AE3 VOL: 0
;PCODE: $00000AE4 VOL: 0
;PCODE: $00000AE5 VOL: 0
;PCODE: $00000AE6 VOL: 0
;PCODE: $00000AE7 VOL: 0
;PCODE: $00000AE8 VOL: 0
; 0000 04A0                     break;
;PCODE: $00000AE9 VOL: 0
; 0000 04A1             case 3: display_put(item2,rlow[item2],1,message_rlow,dummy);
;PCODE: $00000AEA VOL: 0
;PCODE: $00000AEB VOL: 0
;PCODE: $00000AEC VOL: 0
;PCODE: $00000AED VOL: 0
;PCODE: $00000AEE VOL: 0
;PCODE: $00000AEF VOL: 0
;PCODE: $00000AF0 VOL: 0
;PCODE: $00000AF1 VOL: 0
;PCODE: $00000AF2 VOL: 0
;PCODE: $00000AF3 VOL: 0
;PCODE: $00000AF4 VOL: 0
;PCODE: $00000AF5 VOL: 0
;PCODE: $00000AF6 VOL: 0
;PCODE: $00000AF7 VOL: 0
;PCODE: $00000AF8 VOL: 0
;PCODE: $00000AF9 VOL: 0
;PCODE: $00000AFA VOL: 0
; 0000 04A2                     break;
;PCODE: $00000AFB VOL: 0
; 0000 04A3             case 4: display_put(item2,rhigh[item2],1,message_rhigh,dummy);
;PCODE: $00000AFC VOL: 0
;PCODE: $00000AFD VOL: 0
;PCODE: $00000AFE VOL: 0
;PCODE: $00000AFF VOL: 0
;PCODE: $00000B00 VOL: 0
;PCODE: $00000B01 VOL: 0
;PCODE: $00000B02 VOL: 0
;PCODE: $00000B03 VOL: 0
;PCODE: $00000B04 VOL: 0
;PCODE: $00000B05 VOL: 0
;PCODE: $00000B06 VOL: 0
;PCODE: $00000B07 VOL: 0
;PCODE: $00000B08 VOL: 0
;PCODE: $00000B09 VOL: 0
;PCODE: $00000B0A VOL: 0
;PCODE: $00000B0B VOL: 0
;PCODE: $00000B0C VOL: 0
; 0000 04A4                     break;
;PCODE: $00000B0D VOL: 0
; 0000 04A5             case 5: display_put(item2,alow[item2],1,message_alow,dummy);
;PCODE: $00000B0E VOL: 0
;PCODE: $00000B0F VOL: 0
;PCODE: $00000B10 VOL: 0
;PCODE: $00000B11 VOL: 0
;PCODE: $00000B12 VOL: 0
;PCODE: $00000B13 VOL: 0
;PCODE: $00000B14 VOL: 0
;PCODE: $00000B15 VOL: 0
;PCODE: $00000B16 VOL: 0
;PCODE: $00000B17 VOL: 0
;PCODE: $00000B18 VOL: 0
;PCODE: $00000B19 VOL: 0
;PCODE: $00000B1A VOL: 0
;PCODE: $00000B1B VOL: 0
;PCODE: $00000B1C VOL: 0
;PCODE: $00000B1D VOL: 0
;PCODE: $00000B1E VOL: 0
; 0000 04A6                     break;
;PCODE: $00000B1F VOL: 0
; 0000 04A7             case 6: display_put(item2,ahigh[item2],1,message_ahigh,dummy);
;PCODE: $00000B20 VOL: 0
;PCODE: $00000B21 VOL: 0
;PCODE: $00000B22 VOL: 0
;PCODE: $00000B23 VOL: 0
;PCODE: $00000B24 VOL: 0
;PCODE: $00000B25 VOL: 0
;PCODE: $00000B26 VOL: 0
;PCODE: $00000B27 VOL: 0
;PCODE: $00000B28 VOL: 0
;PCODE: $00000B29 VOL: 0
;PCODE: $00000B2A VOL: 0
;PCODE: $00000B2B VOL: 0
;PCODE: $00000B2C VOL: 0
;PCODE: $00000B2D VOL: 0
;PCODE: $00000B2E VOL: 0
;PCODE: $00000B2F VOL: 0
;PCODE: $00000B30 VOL: 0
; 0000 04A8                     break;
;PCODE: $00000B31 VOL: 0
; 0000 04A9             case 7: display_put(item2,input[item2],2,message_in,message_inp);
;PCODE: $00000B32 VOL: 0
;PCODE: $00000B33 VOL: 0
;PCODE: $00000B34 VOL: 0
;PCODE: $00000B35 VOL: 0
;PCODE: $00000B36 VOL: 0
;PCODE: $00000B37 VOL: 0
;PCODE: $00000B38 VOL: 0
;PCODE: $00000B39 VOL: 0
;PCODE: $00000B3A VOL: 0
;PCODE: $00000B3B VOL: 0
;PCODE: $00000B3C VOL: 0
;PCODE: $00000B3D VOL: 0
;PCODE: $00000B3E VOL: 0
;PCODE: $00000B3F VOL: 0
;PCODE: $00000B40 VOL: 0
;PCODE: $00000B41 VOL: 0
;PCODE: $00000B42 VOL: 0
; 0000 04AA                     break;
;PCODE: $00000B43 VOL: 0
; 0000 04AB             case 8: display_put(item2,dp[item2],2,message_dp,message_dp1);
;PCODE: $00000B44 VOL: 0
;PCODE: $00000B45 VOL: 0
;PCODE: $00000B46 VOL: 0
;PCODE: $00000B47 VOL: 0
;PCODE: $00000B48 VOL: 0
;PCODE: $00000B49 VOL: 0
;PCODE: $00000B4A VOL: 0
;PCODE: $00000B4B VOL: 0
;PCODE: $00000B4C VOL: 0
;PCODE: $00000B4D VOL: 0
;PCODE: $00000B4E VOL: 0
;PCODE: $00000B4F VOL: 0
;PCODE: $00000B50 VOL: 0
;PCODE: $00000B51 VOL: 0
;PCODE: $00000B52 VOL: 0
;PCODE: $00000B53 VOL: 0
;PCODE: $00000B54 VOL: 0
; 0000 04AC 
; 0000 04AD             }
;PCODE: $00000B55 VOL: 0
; 0000 04AE 
; 0000 04AF         }
; 0000 04B0 
; 0000 04B1 
; 0000 04B2 
; 0000 04B3 
; 0000 04B4     }
;PCODE: $00000B56 VOL: 0
;PCODE: $00000B57 VOL: 0
; 0000 04B5 else if (cal_fl)
;PCODE: $00000B58 VOL: 0
;PCODE: $00000B59 VOL: 0
;PCODE: $00000B5A VOL: 0
;PCODE: $00000B5B VOL: 0
;PCODE: $00000B5C VOL: 0
; 0000 04B6     {
; 0000 04B7     adc_value = adc3421_read();
;PCODE: $00000B5D VOL: 0
;PCODE: $00000B5E VOL: 0
; 0000 04B8     display_put(mux_scan,adc_value,1,message_cal,dummy);
;PCODE: $00000B5F VOL: 0
;PCODE: $00000B60 VOL: 0
;PCODE: $00000B61 VOL: 0
;PCODE: $00000B62 VOL: 0
;PCODE: $00000B63 VOL: 0
;PCODE: $00000B64 VOL: 0
;PCODE: $00000B65 VOL: 0
;PCODE: $00000B66 VOL: 0
;PCODE: $00000B67 VOL: 0
; 0000 04B9     }
; 0000 04BA }
;PCODE: $00000B68 VOL: 0
;PCODE: $00000B69 VOL: 0
;PCODE: $00000B6A VOL: 0
;PCODE: $00000B6B VOL: 0
;PCODE: $00000B6C VOL: 0
;PCODE: $00000B6D VOL: 0
;
;void display_out(short int count2)
; 0000 04BD {
;PCODE: $00000B6E VOL: 0
;PCODE: $00000B6F VOL: 0
; 0000 04BE int asa;
; 0000 04BF clear_display();
;PCODE: $00000B70 VOL: 0
;PCODE: $00000B71 VOL: 0
;PCODE: $00000B72 VOL: 0
;	count2 -> Y+2
;	asa -> R16,R17
;PCODE: $00000B73 VOL: 0
; 0000 04C0 asa = display_buffer[count2];
;PCODE: $00000B74 VOL: 0
;PCODE: $00000B75 VOL: 0
;PCODE: $00000B76 VOL: 0
;PCODE: $00000B77 VOL: 0
;PCODE: $00000B78 VOL: 0
; 0000 04C1 asa = segment_table[asa];
;PCODE: $00000B79 VOL: 0
;PCODE: $00000B7A VOL: 0
;PCODE: $00000B7B VOL: 0
;PCODE: $00000B7C VOL: 0
; 0000 04C2 if (count2 == (7-blink_digit))
;PCODE: $00000B7D VOL: 0
;PCODE: $00000B7E VOL: 0
;PCODE: $00000B7F VOL: 0
;PCODE: $00000B80 VOL: 0
;PCODE: $00000B81 VOL: 0
;PCODE: $00000B82 VOL: 0
; 0000 04C3 {
; 0000 04C4 if (blink_flag && blinking)
;PCODE: $00000B83 VOL: 0
;PCODE: $00000B84 VOL: 0
;PCODE: $00000B85 VOL: 0
;PCODE: $00000B86 VOL: 0
;PCODE: $00000B87 VOL: 0
;PCODE: $00000B88 VOL: 0
;PCODE: $00000B89 VOL: 0
;PCODE: $00000B8A VOL: 0
;PCODE: $00000B8B VOL: 0
;PCODE: $00000B8C VOL: 0
; 0000 04C5 PORTA =0xff;
;PCODE: $00000B8D VOL: 0
;PCODE: $00000B8E VOL: 0
; 0000 04C6 else
;PCODE: $00000B8F VOL: 0
;PCODE: $00000B90 VOL: 0
; 0000 04C7 PORTA = asa;
;PCODE: $00000B91 VOL: 0
;PCODE: $00000B92 VOL: 0
; 0000 04C8 }
;PCODE: $00000B93 VOL: 0
; 0000 04C9 else
;PCODE: $00000B94 VOL: 0
;PCODE: $00000B95 VOL: 0
; 0000 04CA PORTA = asa;//decimal point for upper display
;PCODE: $00000B96 VOL: 0
;PCODE: $00000B97 VOL: 0
; 0000 04CB // logic to display decimal point
; 0000 04CC switch (count2)
;PCODE: $00000B98 VOL: 0
;PCODE: $00000B99 VOL: 0
; 0000 04CD     {
; 0000 04CE     case 0: if (!menu_fl && !cal_fl )
;PCODE: $00000B9A VOL: 0
;PCODE: $00000B9B VOL: 0
;PCODE: $00000B9C VOL: 0
;PCODE: $00000B9D VOL: 0
;PCODE: $00000B9E VOL: 0
;PCODE: $00000B9F VOL: 0
;PCODE: $00000BA0 VOL: 0
;PCODE: $00000BA1 VOL: 0
;PCODE: $00000BA2 VOL: 0
;PCODE: $00000BA3 VOL: 0
;PCODE: $00000BA4 VOL: 0
;PCODE: $00000BA5 VOL: 0
; 0000 04CF                 {
; 0000 04D0                 if (dp[display_scan_cnt] ==0) PORTA.7 =0;
;PCODE: $00000BA6 VOL: 0
;PCODE: $00000BA7 VOL: 0
;PCODE: $00000BA8 VOL: 0
;PCODE: $00000BA9 VOL: 0
;PCODE: $00000BAA VOL: 0
;PCODE: $00000BAB VOL: 0
;PCODE: $00000BAC VOL: 0
;PCODE: $00000BAD VOL: 0
;PCODE: $00000BAE VOL: 0
; 0000 04D1                 }
;PCODE: $00000BAF VOL: 0
; 0000 04D2             break;
;PCODE: $00000BB0 VOL: 0
;PCODE: $00000BB1 VOL: 0
; 0000 04D3     case 1: if (!menu_fl && !cal_fl )
;PCODE: $00000BB2 VOL: 0
;PCODE: $00000BB3 VOL: 0
;PCODE: $00000BB4 VOL: 0
;PCODE: $00000BB5 VOL: 0
;PCODE: $00000BB6 VOL: 0
;PCODE: $00000BB7 VOL: 0
;PCODE: $00000BB8 VOL: 0
;PCODE: $00000BB9 VOL: 0
;PCODE: $00000BBA VOL: 0
;PCODE: $00000BBB VOL: 0
;PCODE: $00000BBC VOL: 0
;PCODE: $00000BBD VOL: 0
;PCODE: $00000BBE VOL: 0
; 0000 04D4                 {
; 0000 04D5                 if (dp[display_scan_cnt] ==1) PORTA.7 =0;
;PCODE: $00000BBF VOL: 0
;PCODE: $00000BC0 VOL: 0
;PCODE: $00000BC1 VOL: 0
;PCODE: $00000BC2 VOL: 0
;PCODE: $00000BC3 VOL: 0
;PCODE: $00000BC4 VOL: 0
;PCODE: $00000BC5 VOL: 0
;PCODE: $00000BC6 VOL: 0
;PCODE: $00000BC7 VOL: 0
; 0000 04D6                 }
;PCODE: $00000BC8 VOL: 0
; 0000 04D7             break;
;PCODE: $00000BC9 VOL: 0
;PCODE: $00000BCA VOL: 0
; 0000 04D8     case 2: if (!menu_fl && !cal_fl )
;PCODE: $00000BCB VOL: 0
;PCODE: $00000BCC VOL: 0
;PCODE: $00000BCD VOL: 0
;PCODE: $00000BCE VOL: 0
;PCODE: $00000BCF VOL: 0
;PCODE: $00000BD0 VOL: 0
;PCODE: $00000BD1 VOL: 0
;PCODE: $00000BD2 VOL: 0
;PCODE: $00000BD3 VOL: 0
;PCODE: $00000BD4 VOL: 0
;PCODE: $00000BD5 VOL: 0
;PCODE: $00000BD6 VOL: 0
;PCODE: $00000BD7 VOL: 0
; 0000 04D9                 {
; 0000 04DA                 if (dp[display_scan_cnt] ==2) PORTA.7 =0;
;PCODE: $00000BD8 VOL: 0
;PCODE: $00000BD9 VOL: 0
;PCODE: $00000BDA VOL: 0
;PCODE: $00000BDB VOL: 0
;PCODE: $00000BDC VOL: 0
;PCODE: $00000BDD VOL: 0
;PCODE: $00000BDE VOL: 0
;PCODE: $00000BDF VOL: 0
;PCODE: $00000BE0 VOL: 0
; 0000 04DB                 }
;PCODE: $00000BE1 VOL: 0
; 0000 04DC             break;
;PCODE: $00000BE2 VOL: 0
;PCODE: $00000BE3 VOL: 0
; 0000 04DD     case 4: if (menu_fl && !cal_fl && (level ==2))
;PCODE: $00000BE4 VOL: 0
;PCODE: $00000BE5 VOL: 0
;PCODE: $00000BE6 VOL: 0
;PCODE: $00000BE7 VOL: 0
;PCODE: $00000BE8 VOL: 0
;PCODE: $00000BE9 VOL: 0
;PCODE: $00000BEA VOL: 0
;PCODE: $00000BEB VOL: 0
;PCODE: $00000BEC VOL: 0
;PCODE: $00000BED VOL: 0
;PCODE: $00000BEE VOL: 0
;PCODE: $00000BEF VOL: 0
;PCODE: $00000BF0 VOL: 0
;PCODE: $00000BF1 VOL: 0
;PCODE: $00000BF2 VOL: 0
;PCODE: $00000BF3 VOL: 0
; 0000 04DE                 {
; 0000 04DF                 if ((dp[item2] ==0) && ((item1==1)||(item1==3)||(item1==4)||(item1 ==5)||(item1==6))) PORTA.7=0;
;PCODE: $00000BF4 VOL: 0
;PCODE: $00000BF5 VOL: 0
;PCODE: $00000BF6 VOL: 0
;PCODE: $00000BF7 VOL: 0
;PCODE: $00000BF8 VOL: 0
;PCODE: $00000BF9 VOL: 0
;PCODE: $00000BFA VOL: 0
;PCODE: $00000BFB VOL: 0
;PCODE: $00000BFC VOL: 0
;PCODE: $00000BFD VOL: 0
;PCODE: $00000BFE VOL: 0
;PCODE: $00000BFF VOL: 0
;PCODE: $00000C00 VOL: 0
;PCODE: $00000C01 VOL: 0
;PCODE: $00000C02 VOL: 0
;PCODE: $00000C03 VOL: 0
;PCODE: $00000C04 VOL: 0
;PCODE: $00000C05 VOL: 0
;PCODE: $00000C06 VOL: 0
;PCODE: $00000C07 VOL: 0
;PCODE: $00000C08 VOL: 0
;PCODE: $00000C09 VOL: 0
;PCODE: $00000C0A VOL: 0
;PCODE: $00000C0B VOL: 0
;PCODE: $00000C0C VOL: 0
;PCODE: $00000C0D VOL: 0
;PCODE: $00000C0E VOL: 0
;PCODE: $00000C0F VOL: 0
;PCODE: $00000C10 VOL: 0
;PCODE: $00000C11 VOL: 0
; 0000 04E0                 }
;PCODE: $00000C12 VOL: 0
; 0000 04E1             break;
;PCODE: $00000C13 VOL: 0
;PCODE: $00000C14 VOL: 0
; 0000 04E2     case 5: if (menu_fl && !cal_fl && (level ==2))
;PCODE: $00000C15 VOL: 0
;PCODE: $00000C16 VOL: 0
;PCODE: $00000C17 VOL: 0
;PCODE: $00000C18 VOL: 0
;PCODE: $00000C19 VOL: 0
;PCODE: $00000C1A VOL: 0
;PCODE: $00000C1B VOL: 0
;PCODE: $00000C1C VOL: 0
;PCODE: $00000C1D VOL: 0
;PCODE: $00000C1E VOL: 0
;PCODE: $00000C1F VOL: 0
;PCODE: $00000C20 VOL: 0
;PCODE: $00000C21 VOL: 0
;PCODE: $00000C22 VOL: 0
;PCODE: $00000C23 VOL: 0
;PCODE: $00000C24 VOL: 0
; 0000 04E3                 {
; 0000 04E4                 if ((dp[item2] ==1)&& ((item1==1)||(item1==3)||(item1==4)||(item1 ==5)||(item1==6))) PORTA.7=0;
;PCODE: $00000C25 VOL: 0
;PCODE: $00000C26 VOL: 0
;PCODE: $00000C27 VOL: 0
;PCODE: $00000C28 VOL: 0
;PCODE: $00000C29 VOL: 0
;PCODE: $00000C2A VOL: 0
;PCODE: $00000C2B VOL: 0
;PCODE: $00000C2C VOL: 0
;PCODE: $00000C2D VOL: 0
;PCODE: $00000C2E VOL: 0
;PCODE: $00000C2F VOL: 0
;PCODE: $00000C30 VOL: 0
;PCODE: $00000C31 VOL: 0
;PCODE: $00000C32 VOL: 0
;PCODE: $00000C33 VOL: 0
;PCODE: $00000C34 VOL: 0
;PCODE: $00000C35 VOL: 0
;PCODE: $00000C36 VOL: 0
;PCODE: $00000C37 VOL: 0
;PCODE: $00000C38 VOL: 0
;PCODE: $00000C39 VOL: 0
;PCODE: $00000C3A VOL: 0
;PCODE: $00000C3B VOL: 0
;PCODE: $00000C3C VOL: 0
;PCODE: $00000C3D VOL: 0
;PCODE: $00000C3E VOL: 0
;PCODE: $00000C3F VOL: 0
;PCODE: $00000C40 VOL: 0
;PCODE: $00000C41 VOL: 0
;PCODE: $00000C42 VOL: 0
; 0000 04E5                 }
;PCODE: $00000C43 VOL: 0
; 0000 04E6             break;
;PCODE: $00000C44 VOL: 0
;PCODE: $00000C45 VOL: 0
; 0000 04E7     case 6: if (menu_fl && !cal_fl && (level ==2))
;PCODE: $00000C46 VOL: 0
;PCODE: $00000C47 VOL: 0
;PCODE: $00000C48 VOL: 0
;PCODE: $00000C49 VOL: 0
;PCODE: $00000C4A VOL: 0
;PCODE: $00000C4B VOL: 0
;PCODE: $00000C4C VOL: 0
;PCODE: $00000C4D VOL: 0
;PCODE: $00000C4E VOL: 0
;PCODE: $00000C4F VOL: 0
;PCODE: $00000C50 VOL: 0
;PCODE: $00000C51 VOL: 0
;PCODE: $00000C52 VOL: 0
;PCODE: $00000C53 VOL: 0
;PCODE: $00000C54 VOL: 0
;PCODE: $00000C55 VOL: 0
; 0000 04E8                 {
; 0000 04E9                 if ((dp[item2] ==2)&& ((item1==1)||(item1==3)||(item1==4)||(item1 ==5)||(item1==6))) PORTA.7=0;
;PCODE: $00000C56 VOL: 0
;PCODE: $00000C57 VOL: 0
;PCODE: $00000C58 VOL: 0
;PCODE: $00000C59 VOL: 0
;PCODE: $00000C5A VOL: 0
;PCODE: $00000C5B VOL: 0
;PCODE: $00000C5C VOL: 0
;PCODE: $00000C5D VOL: 0
;PCODE: $00000C5E VOL: 0
;PCODE: $00000C5F VOL: 0
;PCODE: $00000C60 VOL: 0
;PCODE: $00000C61 VOL: 0
;PCODE: $00000C62 VOL: 0
;PCODE: $00000C63 VOL: 0
;PCODE: $00000C64 VOL: 0
;PCODE: $00000C65 VOL: 0
;PCODE: $00000C66 VOL: 0
;PCODE: $00000C67 VOL: 0
;PCODE: $00000C68 VOL: 0
;PCODE: $00000C69 VOL: 0
;PCODE: $00000C6A VOL: 0
;PCODE: $00000C6B VOL: 0
;PCODE: $00000C6C VOL: 0
;PCODE: $00000C6D VOL: 0
;PCODE: $00000C6E VOL: 0
;PCODE: $00000C6F VOL: 0
;PCODE: $00000C70 VOL: 0
;PCODE: $00000C71 VOL: 0
;PCODE: $00000C72 VOL: 0
;PCODE: $00000C73 VOL: 0
; 0000 04EA                 }
;PCODE: $00000C74 VOL: 0
; 0000 04EB             break;
;PCODE: $00000C75 VOL: 0
;PCODE: $00000C76 VOL: 0
; 0000 04EC 
; 0000 04ED 
; 0000 04EE     }
;PCODE: $00000C77 VOL: 0
; 0000 04EF 
; 0000 04F0 
; 0000 04F1 
; 0000 04F2 
; 0000 04F3 
; 0000 04F4 ////end of decimal point logic
; 0000 04F5 
; 0000 04F6 switch(count2)
;PCODE: $00000C78 VOL: 0
; 0000 04F7         {
; 0000 04F8         case 0:  digit1();
;PCODE: $00000C79 VOL: 0
;PCODE: $00000C7A VOL: 0
;PCODE: $00000C7B VOL: 0
;PCODE: $00000C7C VOL: 0
; 0000 04F9         break;
;PCODE: $00000C7D VOL: 0
; 0000 04FA         case 1:  digit2();
;PCODE: $00000C7E VOL: 0
;PCODE: $00000C7F VOL: 0
;PCODE: $00000C80 VOL: 0
;PCODE: $00000C81 VOL: 0
;PCODE: $00000C82 VOL: 0
; 0000 04FB         break;
;PCODE: $00000C83 VOL: 0
; 0000 04FC         case 2:  digit3();
;PCODE: $00000C84 VOL: 0
;PCODE: $00000C85 VOL: 0
;PCODE: $00000C86 VOL: 0
;PCODE: $00000C87 VOL: 0
;PCODE: $00000C88 VOL: 0
; 0000 04FD         break;
;PCODE: $00000C89 VOL: 0
; 0000 04FE         case 3:  digit4();
;PCODE: $00000C8A VOL: 0
;PCODE: $00000C8B VOL: 0
;PCODE: $00000C8C VOL: 0
;PCODE: $00000C8D VOL: 0
;PCODE: $00000C8E VOL: 0
; 0000 04FF         break;
;PCODE: $00000C8F VOL: 0
; 0000 0500         case 4:  digit5();
;PCODE: $00000C90 VOL: 0
;PCODE: $00000C91 VOL: 0
;PCODE: $00000C92 VOL: 0
;PCODE: $00000C93 VOL: 0
;PCODE: $00000C94 VOL: 0
; 0000 0501         break;
;PCODE: $00000C95 VOL: 0
; 0000 0502         case 5:  digit6();
;PCODE: $00000C96 VOL: 0
;PCODE: $00000C97 VOL: 0
;PCODE: $00000C98 VOL: 0
;PCODE: $00000C99 VOL: 0
;PCODE: $00000C9A VOL: 0
; 0000 0503         break;
;PCODE: $00000C9B VOL: 0
; 0000 0504         case 6:  digit7();
;PCODE: $00000C9C VOL: 0
;PCODE: $00000C9D VOL: 0
;PCODE: $00000C9E VOL: 0
;PCODE: $00000C9F VOL: 0
;PCODE: $00000CA0 VOL: 0
; 0000 0505         break;
;PCODE: $00000CA1 VOL: 0
; 0000 0506         case 7:  digit8();
;PCODE: $00000CA2 VOL: 0
;PCODE: $00000CA3 VOL: 0
;PCODE: $00000CA4 VOL: 0
;PCODE: $00000CA5 VOL: 0
;PCODE: $00000CA6 VOL: 0
; 0000 0507         break;
;PCODE: $00000CA7 VOL: 0
; 0000 0508         case 8: PORTA = led_status;
;PCODE: $00000CA8 VOL: 0
;PCODE: $00000CA9 VOL: 0
;PCODE: $00000CAA VOL: 0
;PCODE: $00000CAB VOL: 0
;PCODE: $00000CAC VOL: 0
; 0000 0509                 digit9();
;PCODE: $00000CAD VOL: 0
;PCODE: $00000CAE VOL: 0
; 0000 050A                 break;
;PCODE: $00000CAF VOL: 0
; 0000 050B         case 9: PORTA = led_status1;
;PCODE: $00000CB0 VOL: 0
;PCODE: $00000CB1 VOL: 0
;PCODE: $00000CB2 VOL: 0
;PCODE: $00000CB3 VOL: 0
;PCODE: $00000CB4 VOL: 0
; 0000 050C                 digit10();
;PCODE: $00000CB5 VOL: 0
;PCODE: $00000CB6 VOL: 0
; 0000 050D         break;
;PCODE: $00000CB7 VOL: 0
; 0000 050E         }
;PCODE: $00000CB8 VOL: 0
; 0000 050F 
; 0000 0510 //display_put(process_value[0],process_value[1],0,dummy,dummy2);                       //**
; 0000 0511 
; 0000 0512 
; 0000 0513 }
;PCODE: $00000CB9 VOL: 0
;PCODE: $00000CBA VOL: 0
;PCODE: $00000CBB VOL: 0
;PCODE: $00000CBC VOL: 0
;PCODE: $00000CBD VOL: 0
;PCODE: $00000CBE VOL: 0
;PCODE: $00000CBF VOL: 0
;
;
;
;void key_check()
; 0000 0518 {
;PCODE: $00000CC0 VOL: 0
;PCODE: $00000CC1 VOL: 0
; 0000 0519      key1 = key2 = key3 = key4 = 1;
;PCODE: $00000CC2 VOL: 0
;PCODE: $00000CC3 VOL: 0
;PCODE: $00000CC4 VOL: 0
;PCODE: $00000CC5 VOL: 0
;PCODE: $00000CC6 VOL: 0
;PCODE: $00000CC7 VOL: 0
;PCODE: $00000CC8 VOL: 0
;PCODE: $00000CC9 VOL: 0
; 0000 051A       key_count++;
;PCODE: $00000CCA VOL: 0
;PCODE: $00000CCB VOL: 0
;PCODE: $00000CCC VOL: 0
;PCODE: $00000CCD VOL: 0
; 0000 051B  if (key_count >=100)
;PCODE: $00000CCE VOL: 0
;PCODE: $00000CCF VOL: 0
;PCODE: $00000CD0 VOL: 0
; 0000 051C     {
; 0000 051D       key_count=0;
;PCODE: $00000CD1 VOL: 0
;PCODE: $00000CD2 VOL: 0
; 0000 051E       if (!key1 && key1_old)ent_key();
;PCODE: $00000CD3 VOL: 0
;PCODE: $00000CD4 VOL: 0
;PCODE: $00000CD5 VOL: 0
;PCODE: $00000CD6 VOL: 0
;PCODE: $00000CD7 VOL: 0
;PCODE: $00000CD8 VOL: 0
;PCODE: $00000CD9 VOL: 0
;PCODE: $00000CDA VOL: 0
;PCODE: $00000CDB VOL: 0
;PCODE: $00000CDC VOL: 0
;PCODE: $00000CDD VOL: 0
; 0000 051F       if (!key2 && key2_old)inc_key();
;PCODE: $00000CDE VOL: 0
;PCODE: $00000CDF VOL: 0
;PCODE: $00000CE0 VOL: 0
;PCODE: $00000CE1 VOL: 0
;PCODE: $00000CE2 VOL: 0
;PCODE: $00000CE3 VOL: 0
;PCODE: $00000CE4 VOL: 0
;PCODE: $00000CE5 VOL: 0
;PCODE: $00000CE6 VOL: 0
;PCODE: $00000CE7 VOL: 0
;PCODE: $00000CE8 VOL: 0
;PCODE: $00000CE9 VOL: 0
; 0000 0520       if (!key3 && key3_old)dec_key();
;PCODE: $00000CEA VOL: 0
;PCODE: $00000CEB VOL: 0
;PCODE: $00000CEC VOL: 0
;PCODE: $00000CED VOL: 0
;PCODE: $00000CEE VOL: 0
;PCODE: $00000CEF VOL: 0
;PCODE: $00000CF0 VOL: 0
;PCODE: $00000CF1 VOL: 0
;PCODE: $00000CF2 VOL: 0
;PCODE: $00000CF3 VOL: 0
;PCODE: $00000CF4 VOL: 0
;PCODE: $00000CF5 VOL: 0
; 0000 0521       if (!key4 && key4_old)shf_key();
;PCODE: $00000CF6 VOL: 0
;PCODE: $00000CF7 VOL: 0
;PCODE: $00000CF8 VOL: 0
;PCODE: $00000CF9 VOL: 0
;PCODE: $00000CFA VOL: 0
;PCODE: $00000CFB VOL: 0
;PCODE: $00000CFC VOL: 0
;PCODE: $00000CFD VOL: 0
;PCODE: $00000CFE VOL: 0
;PCODE: $00000CFF VOL: 0
;PCODE: $00000D00 VOL: 0
;PCODE: $00000D01 VOL: 0
; 0000 0522       key1_old = key1;
;PCODE: $00000D02 VOL: 0
;PCODE: $00000D03 VOL: 0
;PCODE: $00000D04 VOL: 0
;PCODE: $00000D05 VOL: 0
;PCODE: $00000D06 VOL: 0
; 0000 0523       key2_old = key2;
;PCODE: $00000D07 VOL: 0
;PCODE: $00000D08 VOL: 0
;PCODE: $00000D09 VOL: 0
;PCODE: $00000D0A VOL: 0
; 0000 0524       key3_old = key3;
;PCODE: $00000D0B VOL: 0
;PCODE: $00000D0C VOL: 0
;PCODE: $00000D0D VOL: 0
;PCODE: $00000D0E VOL: 0
; 0000 0525       key4_old = key4;
;PCODE: $00000D0F VOL: 0
;PCODE: $00000D10 VOL: 0
;PCODE: $00000D11 VOL: 0
;PCODE: $00000D12 VOL: 0
; 0000 0526      }
; 0000 0527 }
;PCODE: $00000D13 VOL: 0
;PCODE: $00000D14 VOL: 0
;PCODE: $00000D15 VOL: 0
;
;void eeprom_transfer(void)
; 0000 052A {
;PCODE: $00000D16 VOL: 0
;PCODE: $00000D17 VOL: 0
; 0000 052B short int i;
; 0000 052C for(i=0;i<=8;i++)
;PCODE: $00000D18 VOL: 0
;PCODE: $00000D19 VOL: 0
;	i -> R16,R17
;PCODE: $00000D1A VOL: 0
;PCODE: $00000D1B VOL: 0
;PCODE: $00000D1C VOL: 0
;PCODE: $00000D1D VOL: 0
;PCODE: $00000D1E VOL: 0
;PCODE: $00000D1F VOL: 0
;PCODE: $00000D20 VOL: 0
;PCODE: $00000D21 VOL: 0
;PCODE: $00000D22 VOL: 0
; 0000 052D     {
; 0000 052E     cal_zero[i] = ee_cal_zero[i];
;PCODE: $00000D23 VOL: 0
;PCODE: $00000D24 VOL: 0
;PCODE: $00000D25 VOL: 0
;PCODE: $00000D26 VOL: 0
;PCODE: $00000D27 VOL: 0
;PCODE: $00000D28 VOL: 0
;PCODE: $00000D29 VOL: 0
;PCODE: $00000D2A VOL: 0
;PCODE: $00000D2B VOL: 0
;PCODE: $00000D2C VOL: 0
;PCODE: $00000D2D VOL: 0
;PCODE: $00000D2E VOL: 0
; 0000 052F     }
;PCODE: $00000D2F VOL: 0
;PCODE: $00000D30 VOL: 0
;PCODE: $00000D31 VOL: 0
;PCODE: $00000D32 VOL: 0
;PCODE: $00000D33 VOL: 0
; 0000 0530 for(i=0;i<=8;i++)
;PCODE: $00000D34 VOL: 0
;PCODE: $00000D35 VOL: 0
;PCODE: $00000D36 VOL: 0
;PCODE: $00000D37 VOL: 0
;PCODE: $00000D38 VOL: 0
;PCODE: $00000D39 VOL: 0
;PCODE: $00000D3A VOL: 0
;PCODE: $00000D3B VOL: 0
;PCODE: $00000D3C VOL: 0
; 0000 0531     {
; 0000 0532     cal_span[i] = ee_cal_span[i];
;PCODE: $00000D3D VOL: 0
;PCODE: $00000D3E VOL: 0
;PCODE: $00000D3F VOL: 0
;PCODE: $00000D40 VOL: 0
;PCODE: $00000D41 VOL: 0
;PCODE: $00000D42 VOL: 0
;PCODE: $00000D43 VOL: 0
;PCODE: $00000D44 VOL: 0
;PCODE: $00000D45 VOL: 0
;PCODE: $00000D46 VOL: 0
;PCODE: $00000D47 VOL: 0
;PCODE: $00000D48 VOL: 0
; 0000 0533     }
;PCODE: $00000D49 VOL: 0
;PCODE: $00000D4A VOL: 0
;PCODE: $00000D4B VOL: 0
;PCODE: $00000D4C VOL: 0
;PCODE: $00000D4D VOL: 0
; 0000 0534 for(i=0;i<=3;i++)
;PCODE: $00000D4E VOL: 0
;PCODE: $00000D4F VOL: 0
;PCODE: $00000D50 VOL: 0
;PCODE: $00000D51 VOL: 0
;PCODE: $00000D52 VOL: 0
;PCODE: $00000D53 VOL: 0
;PCODE: $00000D54 VOL: 0
;PCODE: $00000D55 VOL: 0
;PCODE: $00000D56 VOL: 0
; 0000 0535     {
; 0000 0536     gen[i] = ee_gen[i];
;PCODE: $00000D57 VOL: 0
;PCODE: $00000D58 VOL: 0
;PCODE: $00000D59 VOL: 0
;PCODE: $00000D5A VOL: 0
;PCODE: $00000D5B VOL: 0
;PCODE: $00000D5C VOL: 0
;PCODE: $00000D5D VOL: 0
;PCODE: $00000D5E VOL: 0
;PCODE: $00000D5F VOL: 0
;PCODE: $00000D60 VOL: 0
;PCODE: $00000D61 VOL: 0
;PCODE: $00000D62 VOL: 0
; 0000 0537     }
;PCODE: $00000D63 VOL: 0
;PCODE: $00000D64 VOL: 0
;PCODE: $00000D65 VOL: 0
;PCODE: $00000D66 VOL: 0
;PCODE: $00000D67 VOL: 0
; 0000 0538 for(i=0;i<=8;i++)
;PCODE: $00000D68 VOL: 0
;PCODE: $00000D69 VOL: 0
;PCODE: $00000D6A VOL: 0
;PCODE: $00000D6B VOL: 0
;PCODE: $00000D6C VOL: 0
;PCODE: $00000D6D VOL: 0
;PCODE: $00000D6E VOL: 0
;PCODE: $00000D6F VOL: 0
;PCODE: $00000D70 VOL: 0
; 0000 0539     {
; 0000 053A     os[i] = ee_os[i];
;PCODE: $00000D71 VOL: 0
;PCODE: $00000D72 VOL: 0
;PCODE: $00000D73 VOL: 0
;PCODE: $00000D74 VOL: 0
;PCODE: $00000D75 VOL: 0
;PCODE: $00000D76 VOL: 0
;PCODE: $00000D77 VOL: 0
;PCODE: $00000D78 VOL: 0
;PCODE: $00000D79 VOL: 0
;PCODE: $00000D7A VOL: 0
;PCODE: $00000D7B VOL: 0
;PCODE: $00000D7C VOL: 0
; 0000 053B     }
;PCODE: $00000D7D VOL: 0
;PCODE: $00000D7E VOL: 0
;PCODE: $00000D7F VOL: 0
;PCODE: $00000D80 VOL: 0
;PCODE: $00000D81 VOL: 0
; 0000 053C for(i=0;i<=8;i++)
;PCODE: $00000D82 VOL: 0
;PCODE: $00000D83 VOL: 0
;PCODE: $00000D84 VOL: 0
;PCODE: $00000D85 VOL: 0
;PCODE: $00000D86 VOL: 0
;PCODE: $00000D87 VOL: 0
;PCODE: $00000D88 VOL: 0
;PCODE: $00000D89 VOL: 0
;PCODE: $00000D8A VOL: 0
; 0000 053D     {
; 0000 053E     skip[i] = ee_skip[i];
;PCODE: $00000D8B VOL: 0
;PCODE: $00000D8C VOL: 0
;PCODE: $00000D8D VOL: 0
;PCODE: $00000D8E VOL: 0
;PCODE: $00000D8F VOL: 0
;PCODE: $00000D90 VOL: 0
;PCODE: $00000D91 VOL: 0
;PCODE: $00000D92 VOL: 0
;PCODE: $00000D93 VOL: 0
;PCODE: $00000D94 VOL: 0
;PCODE: $00000D95 VOL: 0
;PCODE: $00000D96 VOL: 0
; 0000 053F     }
;PCODE: $00000D97 VOL: 0
;PCODE: $00000D98 VOL: 0
;PCODE: $00000D99 VOL: 0
;PCODE: $00000D9A VOL: 0
;PCODE: $00000D9B VOL: 0
; 0000 0540 for(i=0;i<=8;i++)
;PCODE: $00000D9C VOL: 0
;PCODE: $00000D9D VOL: 0
;PCODE: $00000D9E VOL: 0
;PCODE: $00000D9F VOL: 0
;PCODE: $00000DA0 VOL: 0
;PCODE: $00000DA1 VOL: 0
;PCODE: $00000DA2 VOL: 0
;PCODE: $00000DA3 VOL: 0
;PCODE: $00000DA4 VOL: 0
; 0000 0541     {
; 0000 0542     rlow[i] = ee_rlow[i];
;PCODE: $00000DA5 VOL: 0
;PCODE: $00000DA6 VOL: 0
;PCODE: $00000DA7 VOL: 0
;PCODE: $00000DA8 VOL: 0
;PCODE: $00000DA9 VOL: 0
;PCODE: $00000DAA VOL: 0
;PCODE: $00000DAB VOL: 0
;PCODE: $00000DAC VOL: 0
;PCODE: $00000DAD VOL: 0
;PCODE: $00000DAE VOL: 0
;PCODE: $00000DAF VOL: 0
;PCODE: $00000DB0 VOL: 0
; 0000 0543     }
;PCODE: $00000DB1 VOL: 0
;PCODE: $00000DB2 VOL: 0
;PCODE: $00000DB3 VOL: 0
;PCODE: $00000DB4 VOL: 0
;PCODE: $00000DB5 VOL: 0
; 0000 0544 for(i=0;i<=8;i++)
;PCODE: $00000DB6 VOL: 0
;PCODE: $00000DB7 VOL: 0
;PCODE: $00000DB8 VOL: 0
;PCODE: $00000DB9 VOL: 0
;PCODE: $00000DBA VOL: 0
;PCODE: $00000DBB VOL: 0
;PCODE: $00000DBC VOL: 0
;PCODE: $00000DBD VOL: 0
;PCODE: $00000DBE VOL: 0
; 0000 0545     {
; 0000 0546     rhigh[i] = ee_rhigh[i];
;PCODE: $00000DBF VOL: 0
;PCODE: $00000DC0 VOL: 0
;PCODE: $00000DC1 VOL: 0
;PCODE: $00000DC2 VOL: 0
;PCODE: $00000DC3 VOL: 0
;PCODE: $00000DC4 VOL: 0
;PCODE: $00000DC5 VOL: 0
;PCODE: $00000DC6 VOL: 0
;PCODE: $00000DC7 VOL: 0
;PCODE: $00000DC8 VOL: 0
;PCODE: $00000DC9 VOL: 0
;PCODE: $00000DCA VOL: 0
; 0000 0547     }
;PCODE: $00000DCB VOL: 0
;PCODE: $00000DCC VOL: 0
;PCODE: $00000DCD VOL: 0
;PCODE: $00000DCE VOL: 0
;PCODE: $00000DCF VOL: 0
; 0000 0548 for(i=0;i<=8;i++)
;PCODE: $00000DD0 VOL: 0
;PCODE: $00000DD1 VOL: 0
;PCODE: $00000DD2 VOL: 0
;PCODE: $00000DD3 VOL: 0
;PCODE: $00000DD4 VOL: 0
;PCODE: $00000DD5 VOL: 0
;PCODE: $00000DD6 VOL: 0
;PCODE: $00000DD7 VOL: 0
;PCODE: $00000DD8 VOL: 0
; 0000 0549     {
; 0000 054A     alow[i] = ee_alow[i];
;PCODE: $00000DD9 VOL: 0
;PCODE: $00000DDA VOL: 0
;PCODE: $00000DDB VOL: 0
;PCODE: $00000DDC VOL: 0
;PCODE: $00000DDD VOL: 0
;PCODE: $00000DDE VOL: 0
;PCODE: $00000DDF VOL: 0
;PCODE: $00000DE0 VOL: 0
;PCODE: $00000DE1 VOL: 0
;PCODE: $00000DE2 VOL: 0
;PCODE: $00000DE3 VOL: 0
;PCODE: $00000DE4 VOL: 0
; 0000 054B     }
;PCODE: $00000DE5 VOL: 0
;PCODE: $00000DE6 VOL: 0
;PCODE: $00000DE7 VOL: 0
;PCODE: $00000DE8 VOL: 0
;PCODE: $00000DE9 VOL: 0
; 0000 054C for(i=0;i<=8;i++)
;PCODE: $00000DEA VOL: 0
;PCODE: $00000DEB VOL: 0
;PCODE: $00000DEC VOL: 0
;PCODE: $00000DED VOL: 0
;PCODE: $00000DEE VOL: 0
;PCODE: $00000DEF VOL: 0
;PCODE: $00000DF0 VOL: 0
;PCODE: $00000DF1 VOL: 0
;PCODE: $00000DF2 VOL: 0
; 0000 054D     {
; 0000 054E     ahigh[i] = ee_ahigh[i];
;PCODE: $00000DF3 VOL: 0
;PCODE: $00000DF4 VOL: 0
;PCODE: $00000DF5 VOL: 0
;PCODE: $00000DF6 VOL: 0
;PCODE: $00000DF7 VOL: 0
;PCODE: $00000DF8 VOL: 0
;PCODE: $00000DF9 VOL: 0
;PCODE: $00000DFA VOL: 0
;PCODE: $00000DFB VOL: 0
;PCODE: $00000DFC VOL: 0
;PCODE: $00000DFD VOL: 0
;PCODE: $00000DFE VOL: 0
; 0000 054F     }
;PCODE: $00000DFF VOL: 0
;PCODE: $00000E00 VOL: 0
;PCODE: $00000E01 VOL: 0
;PCODE: $00000E02 VOL: 0
;PCODE: $00000E03 VOL: 0
; 0000 0550 for(i=0;i<=8;i++)
;PCODE: $00000E04 VOL: 0
;PCODE: $00000E05 VOL: 0
;PCODE: $00000E06 VOL: 0
;PCODE: $00000E07 VOL: 0
;PCODE: $00000E08 VOL: 0
;PCODE: $00000E09 VOL: 0
;PCODE: $00000E0A VOL: 0
;PCODE: $00000E0B VOL: 0
;PCODE: $00000E0C VOL: 0
; 0000 0551     {
; 0000 0552     input[i] = ee_input[i];
;PCODE: $00000E0D VOL: 0
;PCODE: $00000E0E VOL: 0
;PCODE: $00000E0F VOL: 0
;PCODE: $00000E10 VOL: 0
;PCODE: $00000E11 VOL: 0
;PCODE: $00000E12 VOL: 0
;PCODE: $00000E13 VOL: 0
;PCODE: $00000E14 VOL: 0
;PCODE: $00000E15 VOL: 0
;PCODE: $00000E16 VOL: 0
;PCODE: $00000E17 VOL: 0
;PCODE: $00000E18 VOL: 0
; 0000 0553     }
;PCODE: $00000E19 VOL: 0
;PCODE: $00000E1A VOL: 0
;PCODE: $00000E1B VOL: 0
;PCODE: $00000E1C VOL: 0
;PCODE: $00000E1D VOL: 0
; 0000 0554 for(i=0;i<=8;i++)
;PCODE: $00000E1E VOL: 0
;PCODE: $00000E1F VOL: 0
;PCODE: $00000E20 VOL: 0
;PCODE: $00000E21 VOL: 0
;PCODE: $00000E22 VOL: 0
;PCODE: $00000E23 VOL: 0
;PCODE: $00000E24 VOL: 0
;PCODE: $00000E25 VOL: 0
;PCODE: $00000E26 VOL: 0
; 0000 0555     {
; 0000 0556     dp[i] = ee_dp[i];
;PCODE: $00000E27 VOL: 0
;PCODE: $00000E28 VOL: 0
;PCODE: $00000E29 VOL: 0
;PCODE: $00000E2A VOL: 0
;PCODE: $00000E2B VOL: 0
;PCODE: $00000E2C VOL: 0
;PCODE: $00000E2D VOL: 0
;PCODE: $00000E2E VOL: 0
;PCODE: $00000E2F VOL: 0
;PCODE: $00000E30 VOL: 0
;PCODE: $00000E31 VOL: 0
;PCODE: $00000E32 VOL: 0
; 0000 0557     }
;PCODE: $00000E33 VOL: 0
;PCODE: $00000E34 VOL: 0
;PCODE: $00000E35 VOL: 0
;PCODE: $00000E36 VOL: 0
;PCODE: $00000E37 VOL: 0
; 0000 0558 
; 0000 0559 }
;PCODE: $00000E38 VOL: 0
;PCODE: $00000E39 VOL: 0
;PCODE: $00000E3A VOL: 0
;
;
;
;void init(void)
; 0000 055E {
;PCODE: $00000E3B VOL: 0
;PCODE: $00000E3C VOL: 0
; 0000 055F // Input/Output Ports initialization
; 0000 0560 // Port A initialization
; 0000 0561 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0562 DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
;PCODE: $00000E3D VOL: 0
;PCODE: $00000E3E VOL: 0
; 0000 0563 // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
; 0000 0564 PORTA=(1<<PORTA7) | (1<<PORTA6) | (1<<PORTA5) | (1<<PORTA4) | (1<<PORTA3) | (1<<PORTA2) | (1<<PORTA1) | (1<<PORTA0);
;PCODE: $00000E3F VOL: 0
;PCODE: $00000E40 VOL: 0
; 0000 0565 
; 0000 0566 // Port B initialization
; 0000 0567 // Function: Bit7=Out Bit6=Out Bit5=In Bit4=In Bit3=In Bit2=In Bit1=Out Bit0=Out
; 0000 0568 DDRB=(1<<DDB7) | (1<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $00000E41 VOL: 0
;PCODE: $00000E42 VOL: 0
; 0000 0569 // State: Bit7=1 Bit6=1 Bit5=P Bit4=P Bit3=P Bit2=P Bit1=1 Bit0=1
; 0000 056A PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
;PCODE: $00000E43 VOL: 0
;PCODE: $00000E44 VOL: 0
; 0000 056B 
; 0000 056C // Port C initialization
; 0000 056D // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 056E DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000E45 VOL: 0
;PCODE: $00000E46 VOL: 0
; 0000 056F // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
; 0000 0570 PORTC=(1<<PORTC7) | (1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
;PCODE: $00000E47 VOL: 0
;PCODE: $00000E48 VOL: 0
; 0000 0571 
; 0000 0572 // Port D initialization
; 0000 0573 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0574 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $00000E49 VOL: 0
;PCODE: $00000E4A VOL: 0
; 0000 0575 // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
; 0000 0576 PORTD=(1<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (1<<PORTD1) | (1<<PORTD0);
;PCODE: $00000E4B VOL: 0
;PCODE: $00000E4C VOL: 0
; 0000 0577 
; 0000 0578 // Timer/Counter 0 initialization
; 0000 0579 // Clock source: System Clock
; 0000 057A // Clock value: Timer 0 Stopped
; 0000 057B // Mode: Normal top=0xFF
; 0000 057C // OC0 output: Disconnected
; 0000 057D TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000E4D VOL: 0
;PCODE: $00000E4E VOL: 0
; 0000 057E TCNT0=0x00;
;PCODE: $00000E4F VOL: 0
;PCODE: $00000E50 VOL: 0
; 0000 057F OCR0=0x00;
;PCODE: $00000E51 VOL: 0
;PCODE: $00000E52 VOL: 0
; 0000 0580 
; 0000 0581 // Timer/Counter 1 initialization
; 0000 0582 // Clock source: System Clock
; 0000 0583 // Clock value: 172.800 kHz
; 0000 0584 // Mode: Normal top=0xFFFF
; 0000 0585 // OC1A output: Disconnected
; 0000 0586 // OC1B output: Disconnected
; 0000 0587 // Noise Canceler: Off
; 0000 0588 // Input Capture on Falling Edge
; 0000 0589 // Timer Period: 0.5 s
; 0000 058A // Timer1 Overflow Interrupt: On
; 0000 058B // Input Capture Interrupt: Off
; 0000 058C // Compare A Match Interrupt: Off
; 0000 058D // Compare B Match Interrupt: Off
; 0000 058E TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000E53 VOL: 0
;PCODE: $00000E54 VOL: 0
; 0000 058F TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000E55 VOL: 0
;PCODE: $00000E56 VOL: 0
; 0000 0590 TCNT1H=0xAB;
;PCODE: $00000E57 VOL: 0
;PCODE: $00000E58 VOL: 0
; 0000 0591 TCNT1L=0xA0;
;PCODE: $00000E59 VOL: 0
;PCODE: $00000E5A VOL: 0
; 0000 0592 ICR1H=0x00;
;PCODE: $00000E5B VOL: 0
;PCODE: $00000E5C VOL: 0
; 0000 0593 ICR1L=0x00;
;PCODE: $00000E5D VOL: 0
;PCODE: $00000E5E VOL: 0
; 0000 0594 OCR1AH=0x00;
;PCODE: $00000E5F VOL: 0
;PCODE: $00000E60 VOL: 0
; 0000 0595 OCR1AL=0x00;
;PCODE: $00000E61 VOL: 0
;PCODE: $00000E62 VOL: 0
; 0000 0596 OCR1BH=0x00;
;PCODE: $00000E63 VOL: 0
;PCODE: $00000E64 VOL: 0
; 0000 0597 OCR1BL=0x00;
;PCODE: $00000E65 VOL: 0
;PCODE: $00000E66 VOL: 0
; 0000 0598 
; 0000 0599 // Timer/Counter 2 initialization
; 0000 059A // Clock source: System Clock
; 0000 059B // Clock value: Timer2 Stopped
; 0000 059C // Mode: Normal top=0xFF
; 0000 059D // OC2 output: Disconnected
; 0000 059E ASSR=0<<AS2;
;PCODE: $00000E67 VOL: 0
;PCODE: $00000E68 VOL: 0
; 0000 059F TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000E69 VOL: 0
;PCODE: $00000E6A VOL: 0
; 0000 05A0 TCNT2=0x00;
;PCODE: $00000E6B VOL: 0
;PCODE: $00000E6C VOL: 0
; 0000 05A1 OCR2=0x00;
;PCODE: $00000E6D VOL: 0
;PCODE: $00000E6E VOL: 0
; 0000 05A2 
; 0000 05A3 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 05A4 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000E6F VOL: 0
;PCODE: $00000E70 VOL: 0
; 0000 05A5 
; 0000 05A6 // External Interrupt(s) initialization
; 0000 05A7 // INT0: Off
; 0000 05A8 // INT1: Off
; 0000 05A9 // INT2: Off
; 0000 05AA MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000E71 VOL: 0
;PCODE: $00000E72 VOL: 0
; 0000 05AB MCUCSR=(0<<ISC2);
;PCODE: $00000E73 VOL: 0
;PCODE: $00000E74 VOL: 0
; 0000 05AC 
; 0000 05AD // USART initialization
; 0000 05AE // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 05AF // USART Receiver: On
; 0000 05B0 // USART Transmitter: On
; 0000 05B1 // USART Mode: Asynchronous
; 0000 05B2 // USART Baud Rate: 9600 (Double Speed Mode)
; 0000 05B3 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (1<<U2X) | (0<<MPCM);
;PCODE: $00000E75 VOL: 0
;PCODE: $00000E76 VOL: 0
; 0000 05B4 UCSRB=(1<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000E77 VOL: 0
;PCODE: $00000E78 VOL: 0
; 0000 05B5 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $00000E79 VOL: 0
;PCODE: $00000E7A VOL: 0
; 0000 05B6 UBRRH=0x00;
;PCODE: $00000E7B VOL: 0
;PCODE: $00000E7C VOL: 0
; 0000 05B7 UBRRL=0x8F;
;PCODE: $00000E7D VOL: 0
;PCODE: $00000E7E VOL: 0
; 0000 05B8 
; 0000 05B9 // Analog Comparator initialization
; 0000 05BA // Analog Comparator: Off
; 0000 05BB // The Analog Comparator's positive input is
; 0000 05BC // connected to the AIN0 pin
; 0000 05BD // The Analog Comparator's negative input is
; 0000 05BE // connected to the AIN1 pin
; 0000 05BF ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000E7F VOL: 0
;PCODE: $00000E80 VOL: 0
; 0000 05C0 SFIOR=(0<<ACME);
;PCODE: $00000E81 VOL: 0
;PCODE: $00000E82 VOL: 0
; 0000 05C1 
; 0000 05C2 // ADC initialization
; 0000 05C3 // ADC disabled
; 0000 05C4 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000E83 VOL: 0
;PCODE: $00000E84 VOL: 0
; 0000 05C5 
; 0000 05C6 // SPI initialization
; 0000 05C7 // SPI disabled
; 0000 05C8 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000E85 VOL: 0
;PCODE: $00000E86 VOL: 0
; 0000 05C9 
; 0000 05CA // TWI initialization
; 0000 05CB // TWI disabled
; 0000 05CC TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000E87 VOL: 0
;PCODE: $00000E88 VOL: 0
; 0000 05CD 
; 0000 05CE // Bit-Banged I2C Bus initialization
; 0000 05CF // I2C Port: PORTB
; 0000 05D0 // I2C SDA bit: 1
; 0000 05D1 // I2C SCL bit: 0
; 0000 05D2 // Bit Rate: 100 kHz
; 0000 05D3 // Note: I2C settings are specified in the
; 0000 05D4 // Project|Configure|C Compiler|Libraries|I2C menu.
; 0000 05D5 i2c_init();
;PCODE: $00000E89 VOL: 0
; 0000 05D6 delay_ms(250);
;PCODE: $00000E8A VOL: 0
;PCODE: $00000E8B VOL: 0
;PCODE: $00000E8C VOL: 0
; 0000 05D7 adc3421_init();
;PCODE: $00000E8D VOL: 0
; 0000 05D8 delay_ms(250);
;PCODE: $00000E8E VOL: 0
;PCODE: $00000E8F VOL: 0
;PCODE: $00000E90 VOL: 0
; 0000 05D9 
; 0000 05DA // Global enable interrupts
; 0000 05DB #asm("sei")
;PCODE: $00000E91 VOL: 0
	sei
;PCODE: $00000E92 VOL: 0
; 0000 05DC }
;PCODE: $00000E93 VOL: 0
;PCODE: $00000E94 VOL: 0
;
;void main(void)
; 0000 05DF {
;PCODE: $00000E95 VOL: 0
; 0000 05E0 // Declare your local variables here
; 0000 05E1 
; 0000 05E2 
; 0000 05E3 init();
;PCODE: $00000E96 VOL: 0
; 0000 05E4 eeprom_transfer();
;PCODE: $00000E97 VOL: 0
; 0000 05E5 //change serial speed according to value set
; 0000 05E6 if (gen[2] ==0)    ///9600 baud
;PCODE: $00000E98 VOL: 0
;PCODE: $00000E99 VOL: 0
;PCODE: $00000E9A VOL: 0
;PCODE: $00000E9B VOL: 0
; 0000 05E7 {
; 0000 05E8 UBRRH=0x00;
;PCODE: $00000E9C VOL: 0
;PCODE: $00000E9D VOL: 0
; 0000 05E9 UBRRL=0x8F;
;PCODE: $00000E9E VOL: 0
;PCODE: $00000E9F VOL: 0
; 0000 05EA }
; 0000 05EB else if (gen[2] ==1)   //19200 baud
;PCODE: $00000EA0 VOL: 0
;PCODE: $00000EA1 VOL: 0
;PCODE: $00000EA2 VOL: 0
;PCODE: $00000EA3 VOL: 0
;PCODE: $00000EA4 VOL: 0
;PCODE: $00000EA5 VOL: 0
; 0000 05EC {
; 0000 05ED UBRRH=0x00;
;PCODE: $00000EA6 VOL: 0
;PCODE: $00000EA7 VOL: 0
; 0000 05EE UBRRL=0x47;
;PCODE: $00000EA8 VOL: 0
;PCODE: $00000EA9 VOL: 0
; 0000 05EF }
; 0000 05F0 else                    //force to default 9600 baud if not above
;PCODE: $00000EAA VOL: 0
;PCODE: $00000EAB VOL: 0
; 0000 05F1 {
; 0000 05F2 gen[2]=0;
;PCODE: $00000EAC VOL: 0
;PCODE: $00000EAD VOL: 0
;PCODE: $00000EAE VOL: 0
;PCODE: $00000EAF VOL: 0
; 0000 05F3 UBRRH=0x00;
;PCODE: $00000EB0 VOL: 0
;PCODE: $00000EB1 VOL: 0
; 0000 05F4 UBRRL=0x8F;
;PCODE: $00000EB2 VOL: 0
;PCODE: $00000EB3 VOL: 0
; 0000 05F5 }
;PCODE: $00000EB4 VOL: 0
;PCODE: $00000EB5 VOL: 0
; 0000 05F6 
; 0000 05F7 cal_fl =0;
;PCODE: $00000EB6 VOL: 0
;PCODE: $00000EB7 VOL: 0
;PCODE: $00000EB8 VOL: 0
; 0000 05F8 if (!key5) cal_fl =1;
;PCODE: $00000EB9 VOL: 0
;PCODE: $00000EBA VOL: 0
;PCODE: $00000EBB VOL: 0
;PCODE: $00000EBC VOL: 0
;PCODE: $00000EBD VOL: 0
;PCODE: $00000EBE VOL: 0
; 0000 05F9 
; 0000 05FA while (1)
;PCODE: $00000EBF VOL: 0
;PCODE: $00000EC0 VOL: 0
; 0000 05FB       {
; 0000 05FC       // Place your code here
; 0000 05FD       display_check();
;PCODE: $00000EC1 VOL: 0
; 0000 05FE       display_out(display_count);
;PCODE: $00000EC2 VOL: 0
;PCODE: $00000EC3 VOL: 0
; 0000 05FF       display_count++;
;PCODE: $00000EC4 VOL: 0
;PCODE: $00000EC5 VOL: 0
;PCODE: $00000EC6 VOL: 0
; 0000 0600       led_check();
;PCODE: $00000EC7 VOL: 0
; 0000 0601       relay_logic();
;PCODE: $00000EC8 VOL: 0
; 0000 0602              key_check();
;PCODE: $00000EC9 VOL: 0
; 0000 0603 
; 0000 0604       if(display_count >=10)
;PCODE: $00000ECA VOL: 0
;PCODE: $00000ECB VOL: 0
;PCODE: $00000ECC VOL: 0
; 0000 0605       {
; 0000 0606        display_count =0;
;PCODE: $00000ECD VOL: 0
; 0000 0607        if (hsec_fl)
;PCODE: $00000ECE VOL: 0
;PCODE: $00000ECF VOL: 0
;PCODE: $00000ED0 VOL: 0
; 0000 0608         {
; 0000 0609         hsec_fl =0;
;PCODE: $00000ED1 VOL: 0
;PCODE: $00000ED2 VOL: 0
;PCODE: $00000ED3 VOL: 0
; 0000 060A         pv_update();
;PCODE: $00000ED4 VOL: 0
; 0000 060B         check_set();
;PCODE: $00000ED5 VOL: 0
; 0000 060C         }
; 0000 060D        if (ser_fl)
;PCODE: $00000ED6 VOL: 0
;PCODE: $00000ED7 VOL: 0
;PCODE: $00000ED8 VOL: 0
;PCODE: $00000ED9 VOL: 0
; 0000 060E         {
; 0000 060F         ser_fl =0;
;PCODE: $00000EDA VOL: 0
;PCODE: $00000EDB VOL: 0
;PCODE: $00000EDC VOL: 0
; 0000 0610         printf("%5u %5u %5u %5u %5u %5u %5u %5u\n",process_value[0],process_value[1],process_value[2],process_value[3],p ...
;PCODE: $00000EDD VOL: 0
;PCODE: $00000EDE VOL: 0
;PCODE: $00000EDF VOL: 0
;PCODE: $00000EE0 VOL: 0
;PCODE: $00000EE1 VOL: 0
;PCODE: $00000EE2 VOL: 0
;PCODE: $00000EE3 VOL: 0
;PCODE: $00000EE4 VOL: 0
;PCODE: $00000EE5 VOL: 0
;PCODE: $00000EE6 VOL: 0
;PCODE: $00000EE7 VOL: 0
;PCODE: $00000EE8 VOL: 0
;PCODE: $00000EE9 VOL: 0
;PCODE: $00000EEA VOL: 0
;PCODE: $00000EEB VOL: 0
;PCODE: $00000EEC VOL: 0
;PCODE: $00000EED VOL: 0
;PCODE: $00000EEE VOL: 0
;PCODE: $00000EEF VOL: 0
;PCODE: $00000EF0 VOL: 0
;PCODE: $00000EF1 VOL: 0
;PCODE: $00000EF2 VOL: 0
;PCODE: $00000EF3 VOL: 0
;PCODE: $00000EF4 VOL: 0
;PCODE: $00000EF5 VOL: 0
;PCODE: $00000EF6 VOL: 0
;PCODE: $00000EF7 VOL: 0
;PCODE: $00000EF8 VOL: 0
;PCODE: $00000EF9 VOL: 0
;PCODE: $00000EFA VOL: 0
;PCODE: $00000EFB VOL: 0
;PCODE: $00000EFC VOL: 0
;PCODE: $00000EFD VOL: 0
;PCODE: $00000EFE VOL: 0
;PCODE: $00000EFF VOL: 0
;PCODE: $00000F00 VOL: 0
;PCODE: $00000F01 VOL: 0
;PCODE: $00000F02 VOL: 0
; 0000 0611         }
; 0000 0612       }
;PCODE: $00000F03 VOL: 0
; 0000 0613 //      process_value[0] =1234;
; 0000 0614 //      process_value[1] = 5678;
; 0000 0615       }
;PCODE: $00000F04 VOL: 0
;PCODE: $00000F05 VOL: 0
;PCODE: $00000F06 VOL: 0
; 0000 0616 }
;PCODE: $00000F07 VOL: 0
;PCODE: $00000F08 VOL: 0
;PCODE: $00000F09 VOL: 0
