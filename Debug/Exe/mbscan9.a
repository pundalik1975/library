;
;/*******************************************************
;date: 16-11-2019
;derived from mbscan8.c
;todo:
;* add other functions to modbus protocol
;    04  ---read input register
;    16  ---preset multiple register
;
;* limit the no. of registers read to 16 bytes. if more, than return only 16
;* add tick timer to timeout error request.. timeout is 1 second and poll timeout is 20ms
;* add scan time logic
;* add scan/hold logic
;*add open sensor status
;* add predefined code to channels for open/underrange/skip status in modbus transmission
;        underrange ---- 0xbbbb hex
;        overrange ------0xcccc hex
;        skipped   ------0xdddd hex
;
;
;
;date 11-11-2019
;derived from mbscan7.c
;reason: to add modbus
;
;
;
;
;date: 06-11-2019
;derived from mbscan6.c
;todo:
;*add 4~20ma linearisation
;*add voltage linearisation
;add offset
;add skip status to relay and led logic
;skip channel 8 if thermocouple selected on any channel and collect ch8 data for ambient calculation
;ambient calibration temp value in rhi-8
;add ambient compensation to thermocouples
;
;
;
;derived from mbscan4.c
;to do:
;*add led logic
;*add decimal point for pt100 0.1
;*add relay logic and link to led status
;*add common relay logic
;*add range limits for thermocouple and pt100
;*add skip status
;*eeprom store and retrieve dp status.
;*add serial speed
;
;
;derived from mbscan3.c
;date: 01-11-2019
;reason:
;to add voltage and 4~20mA tables
;to correct blinking issue
;to add decimal point
;
;date 04-10-2019
;reason: to add menu routines
;main menu: Scan time st,offset OSx8, skip/unskip x 8,alarm low x 8,alarm high x8,input x 8, modbus id,baudrate
;
;
;derived from mbscan1.c
;date: 2-10-2019
;achieved:
;*display and led scan
;*adc 3421 operating with mux scanning
;
;
;todo
;* scan display with chno. on bottom and pv on top. fixed scan time of 2 seconds
;
;
;
;
;
;
;
;
;
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : mbscan
;Version : 1.0
;Date    : 10/1/2019
;Author  : pundalik
;Company : bhoomi controls
;Comments:
;this is compatible with mbscan1/2/3/4
;hardware
;
;
;Chip type               : ATmega32A
;Program type            : Application
;AVR Core Clock frequency: 11.059200 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// I2C Bus functions
;#include <i2c.h>
;
;// Declare your global variables here
;
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;
;
;
;#define digit1() PORTC.0 = 1
;#define digit2() PORTC.7 = 1
;#define digit3() PORTC.6 = 1
;#define digit4() PORTC.5 = 1
;#define digit5() PORTC.1 = 1
;#define digit6() PORTC.2 = 1
;#define digit7() PORTC.3 = 1
;#define digit8() PORTC.4 = 1
;#define digit9() PORTB.6 = 1        //led red common
;#define digit10() PORTB.7 = 1       //led green common
;
;
;#define relay1 PORTD.6
;#define relay2 PORTD.7
;
;#define key1 PINB.2
;#define key2 PINB.3
;#define key3 PINB.4
;#define key4 PINB.5
;#define key5 PINB.2
;
;#define mux9 PORTD.3
;#define mux10 PORTD.4
;#define mux11 PORTD.5
;
;void clear_display(void)
; 0000 0095 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0096 PORTA =0xff;    //segment off
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0097 PORTC = 0x00;  //digit drive off
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0098 PORTB.6 = 0;   //led common off
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0099 PORTB.7 =0;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 009A 
; 0000 009B 
; 0000 009C }
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;
;unsigned short int led_status,led_status1;
;unsigned short int display_buffer[10];
;short int dummy[1] = {0};
;short int dummy2[1] = {0};
;int process_value[8];
;short int display_count;
;short int display_scan_cnt;
;bit modbus_fl;      // recieved modbus flag
;
;#define all_led_off() led_status = 0xff;             //red led status
;#define rled3_on() led_status &= 0xfe
;#define rled2_on() led_status &= 0xfd
;#define rled1_on() led_status &= 0xfb
;#define rled4_on() led_status &= 0xf7
;#define rled5_on() led_status &= 0xef
;#define rled6_on() led_status &= 0xdf
;#define rled7_on() led_status &= 0xbf
;#define rled8_on() led_status &= 0x7f
;#define rled3_off() led_status |= 0x01
;#define rled2_off() led_status |= 0x02
;#define rled1_off() led_status |= 0x04
;#define rled4_off() led_status |= 0x08
;#define rled5_off() led_status |= 0x10
;#define rled6_off() led_status |= 0x20
;#define rled7_off() led_status |= 0x40
;#define rled8_off() led_status |= 0x80
;
;#define all_led_off1() led_status1 = 0xff;             //red led status
;#define gled3_on() led_status1 &= 0xfe
;#define gled2_on() led_status1 &= 0xfd
;#define gled1_on() led_status1 &= 0xfb
;#define gled4_on() led_status1 &= 0xf7
;#define gled5_on() led_status1 &= 0xef
;#define gled6_on() led_status1 &= 0xdf
;#define gled7_on() led_status1 &= 0xbf
;#define gled8_on() led_status1 &= 0x7f
;#define gled3_off() led_status1 |= 0x01
;#define gled2_off() led_status1 |= 0x02
;#define gled1_off() led_status1 |= 0x04
;#define gled4_off() led_status1 |= 0x08
;#define gled5_off() led_status1 |= 0x10
;#define gled6_off() led_status1 |= 0x20
;#define gled7_off() led_status1 |= 0x40
;#define gled8_off() led_status1 |= 0x80
;
;#define mb_dir  PORTD.2
;
;
;
;//memory map
;int gen[8];
;eeprom int ee_gen[8]={1,1,0,0,0,0,0,0};
;int os[8];
;eeprom int ee_os[8]={0,0,0,0,0,0,0,0};
;int skip[8];
;eeprom int ee_skip[8]={0,0,0,0,0,0,0,0};
;int rlow[8];
;eeprom int ee_rlow[8]={0,0,0,0,0,0,0,0};
;int rhigh[8];
;eeprom int ee_rhigh[8]={100,100,100,100,100,100,100,100};
;int alow[8];
;eeprom int ee_alow[8]={0,0,0,0,0,0,0,0};
;int ahigh[8];
;eeprom int ee_ahigh[8]={100,100,100,100,100,100,100,100};
;int input[8];
;eeprom int ee_input[8]={0,0,0,0,0,0,0,0};
;int dp[8];
;eeprom int ee_dp[8]={0,0,0,0,0,0,0,0};
;
;int cal_zero[8];
;eeprom int ee_cal_zero[8]={10300,10300,10300,10300,10300,10300,10300,10300};
;int cal_span[8];
;eeprom int ee_cal_span[8]={21300,21300,21300,21300,21300,21300,21300,21300};
;int ambient_val;
;bit tc_fl;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 20
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index=0,rx_rd_index=0;
;#else
;unsigned int rx_wr_index=0,rx_rd_index=0;
;#endif
;
;#if RX_BUFFER_SIZE < 256
;unsigned char rx_counter=0;
;#else
;unsigned int rx_counter=0;
;#endif
;char mbreceived_data[10];
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0115 {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0116 char status,data,i;
; 0000 0117 status=UCSRA;
;PCODE: $0000001B VOL: 0
;	status -> R17
;	data -> R16
;	i -> R19
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0118 data=UDR;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0119 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 011A    {
; 0000 011B    rx_buffer[rx_wr_index++]=data;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 011C #if RX_BUFFER_SIZE == 256
; 0000 011D    // special case for receiver buffer size=256
; 0000 011E    if (++rx_counter == 0) rx_buffer_overflow=1;
; 0000 011F #else
; 0000 0120    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0121    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0122       {
; 0000 0123       rx_counter=0;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0124       rx_buffer_overflow=1;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0125       }
; 0000 0126 #endif
; 0000 0127 ///////////////////////////////////
; 0000 0128 //added to form modbus frame
; 0000 0129 if (rx_counter==1)
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 012A     {
; 0000 012B     if (rx_buffer[0] != (char)(gen[1]))
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 012C         rx_counter = rx_wr_index =0;    //reset frame till first byte matchs slave address
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 012D     }
;PCODE: $00000046 VOL: 0
; 0000 012E else
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 012F     {
; 0000 0130     // valid slave address.allot frame size according to function code.
; 0000 0131     if (rx_counter >=8)
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0132       {
; 0000 0133     //modbus frame complete. transfer data to mbreceived_data[]
; 0000 0134         for (i=0;i<8;i++)
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0135         {
; 0000 0136         mbreceived_data[i] = rx_buffer[i];
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0137         }
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0138         rx_counter = rx_wr_index =0;        //reset counter to start for next frame
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0139         modbus_fl =1;                       // set flag to indicate frame recieved in main routine.
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 013A //        mb_dir =1;      //ready for transmit
; 0000 013B       }
; 0000 013C     }
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 013D 
; 0000 013E 
; 0000 013F //////////////////////////////////
; 0000 0140 
; 0000 0141    }
; 0000 0142 }
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0149 {
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 014A char data;
; 0000 014B while (rx_counter==0);
;PCODE: $00000072 VOL: 0
;	data -> R17
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 014C data=rx_buffer[rx_rd_index++];
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 014D #if RX_BUFFER_SIZE != 256
; 0000 014E if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 014F #endif
; 0000 0150 #asm("cli")
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
	cli
;PCODE: $00000087 VOL: 0
; 0000 0151 --rx_counter;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0152 #asm("sei")
;PCODE: $0000008B VOL: 0
	sei
;PCODE: $0000008C VOL: 0
; 0000 0153 return data;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0154 }
;PCODE: $00000090 VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 48
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE <= 256
;unsigned char tx_wr_index=0,tx_rd_index=0;
;#else
;unsigned int tx_wr_index=0,tx_rd_index=0;
;#endif
;
;#if TX_BUFFER_SIZE < 256
;unsigned char tx_counter=0;
;#else
;unsigned int tx_counter=0;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 016A {
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 016B if (tx_counter)
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 016C    {
; 0000 016D    --tx_counter;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 016E    UDR=tx_buffer[tx_rd_index++];
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 016F #if TX_BUFFER_SIZE != 256
; 0000 0170    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0171 #endif
; 0000 0172    }
;PCODE: $000000A6 VOL: 0
; 0000 0173 }
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 017A {
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 017B while (tx_counter == TX_BUFFER_SIZE);
;PCODE: $000000AD VOL: 0
;	c -> Y+0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 017C //#asm("cli")
; 0000 017D if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 017E    {
; 0000 017F    tx_buffer[tx_wr_index++]=c;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0180 #if TX_BUFFER_SIZE != 256
; 0000 0181    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0182 #endif
; 0000 0183    ++tx_counter;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0184    }
; 0000 0185 else
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0186    UDR=c;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 0187  //#asm("sei")
; 0000 0188 }
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;#include <delay.h>
;
;
;//                              0     1     2   3    4    5    6    7     8    9   10    11   12   13   14   15   16   1 ...
;//                              0     1     2   3    4    5    6    7     8    9    a    b    c    d    e    f    g    h ...
;unsigned char segment_table[]= {0x84,0xf5,0xc2,0xc1,0xb1,0x89,0x88,0xe5,0x80,0x81,0xa0,0x98,0x8e,0xd0,0x8a,0xaa,0x8c,0xb ...

	.DSEG
;bit blink_flag,blinking,qsecfl,tsec_fl,hsec_fl;
;short int blink_digit;
;short int mux_scan,tsec_cnt;
;
;//key routine map
;
;short int key_count;
;bit key1_old,key2_old,key3_old,key4_old;
;bit menu_fl;
;short int menu_count,item1,item2;
;short int level;    //level  = 0,1,2 sub level
;short int item1,item2;  // item 1 has common parameters st/id/baudrate
;//menu text
;short int ms_menu[]={21,14,22,27};
;//menu message
;//gen,os,skip,r-lo,r-hi,a-lo,a-hi,inp
;short int message_menu[] = {33,16,14,22,33,33,23,05,05,19,01,24,25,30,20,23,25,30,17,01,10,30,20,23,10,30,17,01,33,01,22 ...
;//st,id,baud
;short int message_gen[]={33,33,5,26,33,33,1,13,11,10,27,13};
;//os-1,os-2.....os-8
;short int message_os[]={23,5,30,1,23,5,30,2,23,5,30,3,23,5,30,4,23,5,30,5,23,5,30,6,23,5,30,7,23,5,30,8};
;//sk-1,sk-2.....sk-8
;short int message_skip[]={05,19,30,01,05,19,30,02,05,19,30,03,05,19,30,04,05,19,30,05,05,19,30,06,05,19,30,07,05,19,30,8 ...
;//rl-1,rl-2....rl-8
;short int message_rlow[]={25,20,30,01,25,20,30,02,25,20,30,03,25,20,30,04,25,20,30,05,25,20,30,06,25,20,30,07,25,20,30,8 ...
;//rh-1...rh-8
;short int message_rhigh[]={25,17,30,01,25,17,30,02,25,17,30,03,25,17,30,04,25,17,30,05,25,17,30,06,25,17,30,07,25,17,30, ...
;//al-1.....al-8
;short int message_alow[]={10,20,30,01,10,20,30,02,10,20,30,03,10,20,30,04,10,20,30,05,10,20,30,06,10,20,30,07,25,20,30,8 ...
;//ah-1...ah-8
;short int message_ahigh[]={10,17,30,01,10,17,30,02,10,17,30,03,10,17,30,04,10,17,30,05,10,17,30,06,10,17,30,07,10,17,30, ...
;//in-1....in-8
;short int message_in[]={01,22,30,01,01,22,30,02,01,22,30,03,01,22,30,04,01,22,30,05,01,22,30,06,01,22,30,07,01,22,30,8};
;//dp-1....dp-8
;short int message_dp[]={13,24,30,1,13,24,30,2,13,24,30,3,13,24,30,4,13,24,30,5,13,24,30,6,13,24,30,7,13,24,30,8};
;
;//process error byte: 0: normal,1: underrange,2: overrange,3: skip
;short int process_error[8];
;
;
;//sub menu messages for skip/unskip,input
;//unsk/skip
;short int message_skuk[]={27,22,05,19,05,19,01,24};
;//pt1,pt2,j,k,r,s,t,volt,4~20
;short int message_inp[]={33,24,26,01,33,24,26,02,33,33,33,18,33,33,33,19,33,33,33,25,33,33,33,05,33,33,33,26,27,23,20,26 ...
;short int message_baud[]={33,32,6,19,1,32,2,19,03,31,04,19,01,01,36,02};  // 9.6k,19.2k,38.4k,115.2
;short int message_cal[]={12,20,30,01,12,20,30,02,12,20,30,03,12,20,30,04,12,20,30,05,12,20,30,06,12,20,30,07,12,20,30,8} ...
;short int message_dp1[]={34,0,0,1,0,34,0,1,0,0,34,1,0,0,0,1}; //0.001,00.01,000.1,0001
;short int message_neg[]={30,30,30,30}; //----
;short int message_open[]={01,33,33,33}; //1
;
;bit cal_fl,ser_fl,hold_fl;     //calibration mode flag;
;
;
;// end of key routine parameters map/////
;
;int table_p[]={-8388,-6176,-4054,-2000,0,1955,3870,5730,7554,9335,11075,12775,14432,16052,17635,19171,20685,22158,24000} ...
;unsigned int table_j[]={0,258,527,801,1078,1356,1633,1909,2185,2461,2739,3022,3310,3607,3913};
;unsigned int table_k[]={0,202,410,614,814,1015,1221,1430,1640,1852,2064,2278,2491,2703,2913,3121,3328,3531,3733,3931,412 ...
;//unsigned int table_k[]={0,184,392,597,797,1000,1206,1415,1626,1839,2052,2266,2480,2693,2903,3112,3319,3524,3726,3925,4 ...
;//unsigned int table_j[]={0,239,509,784,1062,1339,1619,1895,2172,2449,2729,3012,3301,3600,3906};
;
;//unsigned int table_r[]={0,296,647,1041,1469,1923,2401,2896,3408,3933,4471,5021,5583,6157,6743,7340,7950,8571,9205,9850 ...
;//unsigned int table_s[]={0,299,646,1029,1441,1874,2323,2786,3259,3742,4233,4732,5239,5753,6275,6806,7345,7893,8449,9014 ...
;//unsigned int table_t[]={0,204,428,670,929,1201,1486,1782};
;unsigned int table_r[]={0,296,647,1041,1469,1923,2401,2896,3408,3933,4471,5021,5583,6157,6743,7340,7950,8571,9205,9850,1 ...
;unsigned int table_s[]={0,299,646,1029,1441,1874,2323,2786,3259,3742,4233,4732,5239,5753,6275,6806,7345,7893,8449,9014,9 ...
;unsigned int table_t[]={0,204,428,670,929,1201,1486,1782};
;
;
;///////////////////////MODBUS CODES /////////////////////////
;
;
;
;
;
;flash int wCRCTable[] = {
;0X0000, 0XC0C1, 0XC181, 0X0140, 0XC301, 0X03C0, 0X0280, 0XC241,
;0XC601, 0X06C0, 0X0780, 0XC741, 0X0500, 0XC5C1, 0XC481, 0X0440,
;0XCC01, 0X0CC0, 0X0D80, 0XCD41, 0X0F00, 0XCFC1, 0XCE81, 0X0E40,
;0X0A00, 0XCAC1, 0XCB81, 0X0B40, 0XC901, 0X09C0, 0X0880, 0XC841,
;0XD801, 0X18C0, 0X1980, 0XD941, 0X1B00, 0XDBC1, 0XDA81, 0X1A40,
;0X1E00, 0XDEC1, 0XDF81, 0X1F40, 0XDD01, 0X1DC0, 0X1C80, 0XDC41,
;0X1400, 0XD4C1, 0XD581, 0X1540, 0XD701, 0X17C0, 0X1680, 0XD641,
;0XD201, 0X12C0, 0X1380, 0XD341, 0X1100, 0XD1C1, 0XD081, 0X1040,
;0XF001, 0X30C0, 0X3180, 0XF141, 0X3300, 0XF3C1, 0XF281, 0X3240,
;0X3600, 0XF6C1, 0XF781, 0X3740, 0XF501, 0X35C0, 0X3480, 0XF441,
;0X3C00, 0XFCC1, 0XFD81, 0X3D40, 0XFF01, 0X3FC0, 0X3E80, 0XFE41,
;0XFA01, 0X3AC0, 0X3B80, 0XFB41, 0X3900, 0XF9C1, 0XF881, 0X3840,
;0X2800, 0XE8C1, 0XE981, 0X2940, 0XEB01, 0X2BC0, 0X2A80, 0XEA41,
;0XEE01, 0X2EC0, 0X2F80, 0XEF41, 0X2D00, 0XEDC1, 0XEC81, 0X2C40,
;0XE401, 0X24C0, 0X2580, 0XE541, 0X2700, 0XE7C1, 0XE681, 0X2640,
;0X2200, 0XE2C1, 0XE381, 0X2340, 0XE101, 0X21C0, 0X2080, 0XE041,
;0XA001, 0X60C0, 0X6180, 0XA141, 0X6300, 0XA3C1, 0XA281, 0X6240,
;0X6600, 0XA6C1, 0XA781, 0X6740, 0XA501, 0X65C0, 0X6480, 0XA441,
;0X6C00, 0XACC1, 0XAD81, 0X6D40, 0XAF01, 0X6FC0, 0X6E80, 0XAE41,
;0XAA01, 0X6AC0, 0X6B80, 0XAB41, 0X6900, 0XA9C1, 0XA881, 0X6840,
;0X7800, 0XB8C1, 0XB981, 0X7940, 0XBB01, 0X7BC0, 0X7A80, 0XBA41,
;0XBE01, 0X7EC0, 0X7F80, 0XBF41, 0X7D00, 0XBDC1, 0XBC81, 0X7C40,
;0XB401, 0X74C0, 0X7580, 0XB541, 0X7700, 0XB7C1, 0XB681, 0X7640,
;0X7200, 0XB2C1, 0XB381, 0X7340, 0XB101, 0X71C0, 0X7080, 0XB041,
;0X5000, 0X90C1, 0X9181, 0X5140, 0X9301, 0X53C0, 0X5280, 0X9241,
;0X9601, 0X56C0, 0X5780, 0X9741, 0X5500, 0X95C1, 0X9481, 0X5440,
;0X9C01, 0X5CC0, 0X5D80, 0X9D41, 0X5F00, 0X9FC1, 0X9E81, 0X5E40,
;0X5A00, 0X9AC1, 0X9B81, 0X5B40, 0X9901, 0X59C0, 0X5880, 0X9841,
;0X8801, 0X48C0, 0X4980, 0X8941, 0X4B00, 0X8BC1, 0X8A81, 0X4A40,
;0X4E00, 0X8EC1, 0X8F81, 0X4F40, 0X8D01, 0X4DC0, 0X4C80, 0X8C41,
;0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
;0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };
;
;unsigned int CRC16 (const char *nData, unsigned int wLength)
; 0000 0203 {

	.CSEG
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 0204 
; 0000 0205 
; 0000 0206 char nTemp;
; 0000 0207 unsigned int wCRCWord = 0xFFFF;
; 0000 0208 
; 0000 0209    while (wLength--)
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;	*nData -> Y+6
;	wLength -> Y+4
;	nTemp -> R17
;	wCRCWord -> R18,R19
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 020A    {
; 0000 020B       nTemp = *nData++ ^ wCRCWord;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 020C       wCRCWord >>= 8;
;PCODE: $000000E6 VOL: 0
; 0000 020D       wCRCWord ^= wCRCTable[nTemp];
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 020E    }
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 020F    return wCRCWord;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0210 
; 0000 0211 }
;PCODE: $000000F5 VOL: 0
;
;int mb_data[57];
;int mb_inputdata[21];
;//function  codes
;#define mbreadholdingregisters  3
;#define mbreadinputregisters    4
;#define mb presetmultipleregisters 16
;#define mbreportslaveid  17
;
;//error codes
;#define mbillegalfunction 1
;#define mbillegaldataaddress 2
;#define mbillegaldatavalue 3
;#define mbslavedevicefailure 4
;#define mbacknowledge 5
;#define mbslavedevicebusy 6
;#define mbnegativeacknowledge 7
;#define mbmemoryparityerror 8
;
;
;
;void mbreset()
; 0000 0228 {
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 0229 
; 0000 022A     rx_counter=0;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 022B     rx_rd_index=0;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 022C     rx_rd_index =0;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 022D     tx_counter =0;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 022E     tx_wr_index =0;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 022F     tx_rd_index =0;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0230 }
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;
;
;//map
;//40001 - 8    process_Value
;//40009-16   al-hi
;//40017-24   al-lo
;//40018-32    r-hi
;//40033-40   r-lo
;void mb_datatransfer()
; 0000 023A {
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 023B short int i,count =0;
; 0000 023C for (i =0;i<=8;i++)
;PCODE: $00000108 VOL: 0
;	i -> R16,R17
;	count -> R18,R19
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 023D     {
; 0000 023E     mb_data[count] = os[i];
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 023F     count++;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 0240     }
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 0241 for (i =0;i<=8;i++)
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 0242     {
; 0000 0243     mb_data[count] = skip[i];
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 0244     count++;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 0245     }
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 0246 for (i =0;i<8;i++)
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 0247     {
; 0000 0248     mb_data[count] = ahigh[i];
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 0249     count++;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 024A     }
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 024B for (i =0;i<8;i++)
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 024C     {
; 0000 024D     mb_data[count] = alow[i];
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 024E     count++;
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 024F     }
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 0250 for (i =0;i<8;i++)
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 0251     {
; 0000 0252     mb_data[count] = rhigh[i];
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 0253     count++;
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 0254     }
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 0255 for (i =0;i<8;i++)
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 0256     {
; 0000 0257     mb_data[count] = rlow[i];
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 0258     count++;
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 0259     }
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 025A for (i =0;i<8;i++)
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 025B     {
; 0000 025C     mb_data[count] = dp[i];
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 025D     count++;
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 025E     }
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 025F mb_data[count] = gen[0];        //scan time
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 0260 //end of holding register transfer
; 0000 0261 //start of input register(read only) data
; 0000 0262 count=0;
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 0263 for (i =0;i<8;i++)
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 0264     {
; 0000 0265     switch (process_error[i])
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 0266     {
; 0000 0267     case 0: mb_inputdata[count] = process_value[i];
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 0268             break;
;PCODE: $000001F3 VOL: 0
; 0000 0269     case 1: mb_inputdata[count] = 20000;       //overrange
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 026A             break;
;PCODE: $000001FD VOL: 0
; 0000 026B     case 2: mb_inputdata[count] = 22000;      //underrange
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 026C             break;
;PCODE: $00000207 VOL: 0
; 0000 026D     default:mb_inputdata[count] = process_value[i];
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0000 026E             break;
;PCODE: $00000215 VOL: 0
; 0000 026F     }
;PCODE: $00000216 VOL: 0
; 0000 0270     if (skip[i] ==1) mb_inputdata[count] =24000;
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 0271     count++;
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 0272     }
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 0273 for (i =0;i<8;i++)
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0000 0274     {
; 0000 0275     mb_inputdata[count] = input[i];
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0000 0276     count++;
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0000 0277     }
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 0278 mb_inputdata[count] = gen[1];       //slave ID
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 0279 count++;
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0000 027A mb_inputdata[count] = gen[2];       //baud rate
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0000 027B count++;
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 027C mb_inputdata[count] = led_status;       //bitwise status of alarm high of individual channels
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0000 027D count++;
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
; 0000 027E mb_inputdata[count] = led_status1;       //bitwise status of alarm high of individual channels
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
; 0000 027F count++;
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 0280 }
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;
;
;void check_mbreceived()
; 0000 0284 {
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 0285 unsigned int mbaddress,mbamount;
; 0000 0286 unsigned char mbtransmit_data[40];        //transmit buffer max. 32 nytes or 16 registers
; 0000 0287 short int error_code =0;
; 0000 0288 unsigned int i,j;
; 0000 0289 //mb_dir =0;  //set 485 to transmit data
; 0000 028A //check function code
; 0000 028B //printf(" test sending");
; 0000 028C switch (mbreceived_data[1])
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;	mbaddress -> R16,R17
;	mbamount -> R18,R19
;	mbtransmit_data -> Y+10
;	error_code -> R20,R21
;	i -> Y+8
;	j -> Y+6
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
; 0000 028D             {
; 0000 028E             case 0x03:
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 028F  //                mbaddress = (mbreceived_data[2]*256) + mbreceived_data[3];      //start address;
; 0000 0290                  mbaddress = mbreceived_data[3];      //start address;
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
; 0000 0291                  if (mbaddress+1 >=40)
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
; 0000 0292                     {
; 0000 0293                     error_code = mbillegaldataaddress;
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
; 0000 0294                     break;
;PCODE: $00000281 VOL: 0
; 0000 0295                     }
; 0000 0296 //                 mbamount = (mbreceived_data[4] *256) +mbreceived_data[5];      //requested amount
; 0000 0297                  mbamount = mbreceived_data[5];      //requested amount
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0000 0298                  if (mbaddress+(mbamount) > 57 || mbamount >16)
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0000 0299                     {
; 0000 029A                     error_code = mbillegaldatavalue;         //requested data overflow
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 029B                     break;
;PCODE: $00000292 VOL: 0
; 0000 029C                     }
; 0000 029D                     i = CRC16(rx_buffer,6);
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
; 0000 029E 
; 0000 029F                     if((rx_buffer[6] != i%256) || (rx_buffer[7] != i/256)  )
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0000 02A0                     {
; 0000 02A1                     error_code = mbillegaldatavalue;      //CRC not matching
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0000 02A2                     break;
;PCODE: $000002AC VOL: 0
; 0000 02A3                     }
; 0000 02A4                   //valid request so form mb frame accordingly
; 0000 02A5                   error_code =0;       //
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 02A6                     mb_dir =1;      //transmit
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0000 02A7 //                  mbamount =8;                  //test
; 0000 02A8                   mbtransmit_data[0] = mbreceived_data[0];      //slave id
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0000 02A9                   mbtransmit_data[1] = mbreceived_data[1];       //function code
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
; 0000 02AA                   mbtransmit_data[2] = (char)mbamount *2;             //SIZE OF DATA IN BYTES
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0000 02AB                     j=3;
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0000 02AC 
; 0000 02AD //                    mb_dir =0;  //set to transmit
; 0000 02AE                     delay_ms(2);
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
; 0000 02AF                     for (i=0;i<mbamount;i++)               //transfer data
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0000 02B0                         {
; 0000 02B1 //                        mbtransmit_data[j] = (char)(mb_data[mbaddress+i]/256);
; 0000 02B2                          mbtransmit_data[j] = (short int)((mb_data[mbaddress+i]>>8)& 0X00ff);
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
; 0000 02B3 
; 0000 02B4                         j++;
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0000 02B5 //                        mbtransmit_data[j] = (char)(mb_data[mbaddress+i]%256);
; 0000 02B6                          mbtransmit_data[j] = (short int)(mb_data[mbaddress+i]& 0X00ff);
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
; 0000 02B7 
; 0000 02B8                         j++;
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0000 02B9                         }
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
; 0000 02BA                     i= CRC16(mbtransmit_data,(mbamount*2)+3);
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
; 0000 02BB                     mbtransmit_data[j] = i%256;
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
; 0000 02BC                     mbtransmit_data[j+1]=i/256;
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
; 0000 02BD                     #asm("cli")
;PCODE: $00000304 VOL: 0
	cli
;PCODE: $00000305 VOL: 0
; 0000 02BE 
; 0000 02BF //                    mb_dir =0;//set to transmit data
; 0000 02C0                     for (i=0;i<mbtransmit_data[2]+4+1;i++)
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
; 0000 02C1                         {
; 0000 02C2                         putchar(mbtransmit_data[i]);
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
; 0000 02C3                         }
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
; 0000 02C4 
; 0000 02C5 //                     mbreset();
; 0000 02C6                     #asm("sei")
;PCODE: $0000031E VOL: 0
	sei
;PCODE: $0000031F VOL: 0
; 0000 02C7                     delay_ms(50);      //wait till all data transmitted need time to transmit max 36 bytes @9600
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
; 0000 02C8                     mb_dir =0;   //recieve
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
; 0000 02C9                     mbreset();
;PCODE: $00000325 VOL: 0
; 0000 02CA                     break;
;PCODE: $00000326 VOL: 0
; 0000 02CB             case 0x04:     //read input registers (30xxx)
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
; 0000 02CC                      //                mbaddress = (mbreceived_data[2]*256) + mbreceived_data[3];      //start address;
; 0000 02CD                  mbaddress = mbreceived_data[3];      //start address; 30001
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
; 0000 02CE                  if (mbaddress+1 >=20)
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
; 0000 02CF                     {
; 0000 02D0                     error_code = mbillegaldataaddress;
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
; 0000 02D1                     break;
;PCODE: $00000334 VOL: 0
; 0000 02D2                     }
; 0000 02D3 //                 mbamount = (mbreceived_data[4] *256) +mbreceived_data[5];      //requested amount
; 0000 02D4                  mbamount = mbreceived_data[5];      //requested amount
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
; 0000 02D5                  if (mbaddress+(mbamount) >= 20 || mbamount >16)
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
; 0000 02D6                     {
; 0000 02D7                     error_code = mbillegaldatavalue;         //requested data overflow
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
; 0000 02D8                     break;
;PCODE: $00000345 VOL: 0
; 0000 02D9                     }
; 0000 02DA                     i = CRC16(rx_buffer,6);
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
; 0000 02DB 
; 0000 02DC                     if((rx_buffer[6] != i%256) || (rx_buffer[7] != i/256)  )
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
; 0000 02DD                     {
; 0000 02DE                     error_code = mbillegaldatavalue;      //CRC not matching
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
; 0000 02DF                     break;
;PCODE: $0000035F VOL: 0
; 0000 02E0                     }
; 0000 02E1 
; 0000 02E2                   //valid request so form mb frame accordingly
; 0000 02E3                   error_code =0;       //
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
; 0000 02E4                     mb_dir =1;      //transmit
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
; 0000 02E5 //                  mbamount =8;                  //test
; 0000 02E6                   mbtransmit_data[0] = mbreceived_data[0];      //slave id
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
; 0000 02E7                   mbtransmit_data[1] = mbreceived_data[1];       //function code
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
; 0000 02E8                   mbtransmit_data[2] = (char)mbamount *2;             //SIZE OF DATA IN BYTES
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
; 0000 02E9                     j=3;
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
; 0000 02EA 
; 0000 02EB //                    mb_dir =0;  //set to transmit
; 0000 02EC                     delay_ms(2);
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
; 0000 02ED                     for (i=0;i<mbamount;i++)               //transfer data
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
; 0000 02EE                         {
; 0000 02EF //                        mbtransmit_data[j] = (char)(mb_inputdata[mbaddress+i]/256);
; 0000 02F0                          mbtransmit_data[j] = (short int)((mb_inputdata[mbaddress+i]>>8)& 0X00ff);
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
; 0000 02F1                         j++;
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
; 0000 02F2 //                        mbtransmit_data[j] = (char)(mb_inputdata[mbaddress+i]%256);
; 0000 02F3                          mbtransmit_data[j] = (short int)(mb_inputdata[mbaddress+i]& 0X00ff);
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
; 0000 02F4                         j++;
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
; 0000 02F5                         }
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
; 0000 02F6                     i= CRC16(mbtransmit_data,(mbamount*2)+3);
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
; 0000 02F7                     mbtransmit_data[j] = i%256;
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
; 0000 02F8                     mbtransmit_data[j+1]=i/256;
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
; 0000 02F9                     #asm("cli")
;PCODE: $000003B7 VOL: 0
	cli
;PCODE: $000003B8 VOL: 0
; 0000 02FA 
; 0000 02FB //                    mb_dir =0;//set to transmit data
; 0000 02FC                     for (i=0;i<mbtransmit_data[2]+4+1;i++)
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
; 0000 02FD                         {
; 0000 02FE                         putchar(mbtransmit_data[i]);
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
; 0000 02FF                         }
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
; 0000 0300 
; 0000 0301 //                     mbreset();
; 0000 0302                     #asm("sei")
;PCODE: $000003D1 VOL: 0
	sei
;PCODE: $000003D2 VOL: 0
; 0000 0303                     delay_ms(50);      //wait till all data transmitted need time to transmit max 36 bytes @9600
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
; 0000 0304                     mb_dir =0;   //recieve
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
; 0000 0305                     mbreset();
;PCODE: $000003D8 VOL: 0
; 0000 0306 
; 0000 0307 
; 0000 0308 
; 0000 0309                     break;
;PCODE: $000003D9 VOL: 0
; 0000 030A             default: error_code = mbillegalfunction;
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
; 0000 030B //                    mbreset();
; 0000 030C                     break;
;PCODE: $000003DD VOL: 0
; 0000 030D 
; 0000 030E             }
;PCODE: $000003DE VOL: 0
; 0000 030F //        error handling;
; 0000 0310         if (error_code !=0)
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
; 0000 0311             {
; 0000 0312             //todo : error handling code here
; 0000 0313                 mb_dir =1;
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
; 0000 0314                 mbtransmit_data[1] = mbtransmit_data[1] | 0x80;     //set highest bit to indicate exception
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
; 0000 0315                 mbtransmit_data[2] = error_code;        //error code
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
; 0000 0316                     i= CRC16(mbtransmit_data,3);    // CRC
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
; 0000 0317                     mbtransmit_data[j] = i%256;
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
; 0000 0318                     mbtransmit_data[j+1]=i/256;
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
; 0000 0319                     #asm("cli")
;PCODE: $000003FA VOL: 0
	cli
;PCODE: $000003FB VOL: 0
; 0000 031A 
; 0000 031B //                    mb_dir =0;//set to transmit data
; 0000 031C                     for (i=0;i<5;i++)
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
; 0000 031D                         {
; 0000 031E                         putchar(mbtransmit_data[i]);
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
; 0000 031F                         }
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
; 0000 0320 
; 0000 0321 //                     mbreset();
; 0000 0322                     #asm("sei")
;PCODE: $00000411 VOL: 0
	sei
;PCODE: $00000412 VOL: 0
; 0000 0323                     delay_ms(50);      //wait till all data transmitted need time to transmit max 36 bytes @9600
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
; 0000 0324                     mb_dir =0;   //recieve
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
; 0000 0325                     mbreset();
;PCODE: $00000418 VOL: 0
; 0000 0326 
; 0000 0327 
; 0000 0328             }
; 0000 0329 
; 0000 032A 
; 0000 032B 
; 0000 032C }
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;
;
;
;
;
;
;
;
;
;
;
;
;////////////////////////////////////////////////////////////
;
;
;
;
;
;
;
;
;
;
; void adc3421_init(void)
; 0000 0345 {
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
; 0000 0346 i2c_start();
;PCODE: $00000420 VOL: 0
; 0000 0347 i2c_write(0xd2);
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
; 0000 0348 delay_ms(1);
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
; 0000 0349 //i2c_write(0x9f);   //18 bit mode 8v/v
; 0000 034A i2c_write(0x98);        //16 bit 1v/v
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
; 0000 034B i2c_stop();
;PCODE: $00000428 VOL: 0
; 0000 034C }
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;
;/*
;long int adc3421_read18(void)
;{
; unsigned int buffer1;
; unsigned int buffer2,buffer3;
; long int buffer4;
; i2c_start();
; buffer1 = i2c_write(0xd3);
; buffer1 = i2c_read(1);
; buffer2 = i2c_read(1);
; buffer3 = i2c_read(0);
; i2c_stop();
; buffer1 = buffer1 & 0x01;
; buffer4 = (long) (buffer1) * 65536 ;
; buffer4 = buffer4 + ((long)(buffer2) * 256);
; buffer4 = buffer4 + (long)(buffer3);
; return(buffer4);
;}
;*/
;
;int adc3421_read(void)
; 0000 0363 {
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
; 0000 0364  unsigned int buffer1;
; 0000 0365  unsigned int buffer2;
; 0000 0366 signed int buffer4;
; 0000 0367  i2c_start();
;PCODE: $0000042D VOL: 0
;	buffer1 -> R16,R17
;	buffer2 -> R18,R19
;	buffer4 -> R20,R21
;PCODE: $0000042E VOL: 0
; 0000 0368  buffer1 = i2c_write(0xd3);
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
; 0000 0369  buffer1 = i2c_read(1);
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
; 0000 036A  buffer2 = i2c_read(0);
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
; 0000 036B  i2c_stop();
;PCODE: $0000043B VOL: 0
; 0000 036C  //buffer1 = buffer1 & 0x7f;      //ignore sign bit
; 0000 036D  //buffer4 = (long)(buffer1) * 256);
; 0000 036E  //buffer4 = buffer4 + (long)(buffer2);
; 0000 036F  buffer4 = (buffer1 *256) + buffer2;
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
; 0000 0370 //if (buffer4<0) buffer4 = -buffer4;
; 0000 0371  return(buffer4);
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
; 0000 0372 }
;PCODE: $00000444 VOL: 0
;
;
;int linearise_p(float a,float zero_tc,float span_tc)
; 0000 0376 {
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
; 0000 0377 int number =0;
; 0000 0378 int count;
; 0000 0379 int b=0;
; 0000 037A long int temp=0;
; 0000 037B float temp1=0;
; 0000 037C int true_value = 0;
; 0000 037D 
; 0000 037E 
; 0000 037F 
; 0000 0380 temp1 = ((a - zero_tc) /(span_tc - zero_tc)) * 11075;    //adc value of 300 deg. is 11075 in table_p
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
;	a -> Y+24
;	zero_tc -> Y+20
;	span_tc -> Y+16
;	number -> R16,R17
;	count -> R18,R19
;	b -> R20,R21
;	temp -> Y+12
;	temp1 -> Y+8
;	true_value -> Y+6
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
; 0000 0381 b = (int)temp1;
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
; 0000 0382 //if (b<0)
; 0000 0383 //{
; 0000 0384 //b = -b;
; 0000 0385 //nfl =1;
; 0000 0386 //}
; 0000 0387 //else
; 0000 0388 //{
; 0000 0389 //nfl =0;
; 0000 038A //}
; 0000 038B for (count=0;count <= 17; count++)
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
; 0000 038C     {
; 0000 038D     if (b>table_p[count] && b <= table_p[count+1])
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
; 0000 038E         {
; 0000 038F         number = count;
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
; 0000 0390         break;
;PCODE: $0000047E VOL: 0
; 0000 0391         }
; 0000 0392     }
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
; 0000 0393 
; 0000 0394 temp = ((500*(temp1-(float)table_p[number]))/((float)table_p[number+1] - (float)table_p[number]))+ ((long)(number-4) * 5 ...
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
; 0000 0395 true_value = (int) temp;
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
; 0000 0396 //if (nfl) true_value = -true_value;
; 0000 0397 return (true_value);
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
; 0000 0398 }
;PCODE: $000004B5 VOL: 0
;
;
;int linearise_tc(float a,float zero_tc,float span_tc,int iter,unsigned int* tabletc,long int factor)
; 0000 039C {
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
; 0000 039D int number =0;
; 0000 039E int count;
; 0000 039F int b=0;
; 0000 03A0 long int temp=0;
; 0000 03A1 float temp1=0;
; 0000 03A2 int true_value = 0;
; 0000 03A3 bit nfl;
; 0000 03A4 
; 0000 03A5 temp1 = ((a - zero_tc)*factor /(span_tc - zero_tc));    //adc value of 300 deg. is 11075 in table_p
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;	a -> Y+32
;	zero_tc -> Y+28
;	span_tc -> Y+24
;	iter -> Y+22
;	*tabletc -> Y+20
;	factor -> Y+16
;	number -> R16,R17
;	count -> R18,R19
;	b -> R20,R21
;	temp -> Y+12
;	temp1 -> Y+8
;	true_value -> Y+6
;	nfl -> R15.0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
; 0000 03A6 //added to add ambient value in table value
; 0000 03A7 temp1 = temp1 + (*(tabletc+1) * (long)ambient_val /50);
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
; 0000 03A8 
; 0000 03A9 
; 0000 03AA 
; 0000 03AB b = (unsigned int)temp1;
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
; 0000 03AC 
; 0000 03AD if (b<0)
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
; 0000 03AE {
; 0000 03AF b = -b;
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
; 0000 03B0 nfl =1;
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
; 0000 03B1 }
; 0000 03B2 else
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
; 0000 03B3 {
; 0000 03B4 nfl =0;
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
; 0000 03B5 }
;PCODE: $000004EE VOL: 0
; 0000 03B6 for (count=0;count <= iter; count++)
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
; 0000 03B7     {
; 0000 03B8     if (b> *(tabletc+count) && b <= *(tabletc+count+1))
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 0
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
; 0000 03B9         {
; 0000 03BA         number = count;
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0
; 0000 03BB         break;
;PCODE: $0000050D VOL: 0
; 0000 03BC         }
; 0000 03BD     }
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
; 0000 03BE 
; 0000 03BF temp = (50 * (temp1 - *(tabletc+number))/( *(tabletc+number+1) - *(tabletc+number))) + ((long)number*50) ;
;PCODE: $00000514 VOL: 0
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
;PCODE: $00000531 VOL: 0
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
;PCODE: $00000536 VOL: 0
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
; 0000 03C0 
; 0000 03C1 
; 0000 03C2 //temp = ((500*(temp1-(float)table_p[number]))/((float)table_p[number+1] - (float)table_p[number]))+ ((long)(number-4) * ...
; 0000 03C3 true_value = (int) temp;
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
; 0000 03C4 if (nfl) true_value = -true_value;
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
; 0000 03C5 
; 0000 03C6 return (true_value);
;PCODE: $00000544 VOL: 0
;PCODE: $00000545 VOL: 0
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
; 0000 03C7 }
;PCODE: $00000549 VOL: 0
;
;int linearise_volt(float a,float zero_tc, float span_tc,float rangehigh,float rangelow)
; 0000 03CA {
;PCODE: $0000054A VOL: 0
;PCODE: $0000054B VOL: 0
; 0000 03CB float b,c,result;
; 0000 03CC 
; 0000 03CD b= (a - zero_tc)*20000/(span_tc-zero_tc);     //scale to 0~20000
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
;	a -> Y+28
;	zero_tc -> Y+24
;	span_tc -> Y+20
;	rangehigh -> Y+16
;	rangelow -> Y+12
;	b -> Y+8
;	c -> Y+4
;	result -> Y+0
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
;PCODE: $00000556 VOL: 0
;PCODE: $00000557 VOL: 0
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
; 0000 03CE c= rangehigh - rangelow;
;PCODE: $0000055A VOL: 0
;PCODE: $0000055B VOL: 0
;PCODE: $0000055C VOL: 0
;PCODE: $0000055D VOL: 0
; 0000 03CF result = (b * c /20000)+rangelow;
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
; 0000 03D0 return (result);
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
; 0000 03D1 }
;PCODE: $0000056B VOL: 0
;
;int linearise_420(float a,float zero_tc, float span_tc,float rangehigh,float rangelow)
; 0000 03D4 {
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
; 0000 03D5 float b,c,result;
; 0000 03D6 c = ((span_tc - zero_tc)/5) +zero_tc;   //scale offset to offset + 4ma adc
;PCODE: $0000056E VOL: 0
;PCODE: $0000056F VOL: 0
;	a -> Y+28
;	zero_tc -> Y+24
;	span_tc -> Y+20
;	rangehigh -> Y+16
;	rangelow -> Y+12
;	b -> Y+8
;	c -> Y+4
;	result -> Y+0
;PCODE: $00000570 VOL: 0
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
;PCODE: $00000573 VOL: 0
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
; 0000 03D7 b= (a - c)*20000/(span_tc-c);     //scale to 0~20000
;PCODE: $00000579 VOL: 0
;PCODE: $0000057A VOL: 0
;PCODE: $0000057B VOL: 0
;PCODE: $0000057C VOL: 0
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
;PCODE: $00000584 VOL: 0
; 0000 03D8 c= rangehigh - rangelow;
;PCODE: $00000585 VOL: 0
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
;PCODE: $00000588 VOL: 0
; 0000 03D9 result = (b * c /20000)+rangelow;
;PCODE: $00000589 VOL: 0
;PCODE: $0000058A VOL: 0
;PCODE: $0000058B VOL: 0
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
;PCODE: $0000058E VOL: 0
;PCODE: $0000058F VOL: 0
;PCODE: $00000590 VOL: 0
;PCODE: $00000591 VOL: 0
; 0000 03DA return (result);
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
; 0000 03DB }
;PCODE: $00000596 VOL: 0
;
;
;void increment_value(int* value,int low_limit,int high_limit,short int power)
; 0000 03DF {
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
; 0000 03E0 int a;
; 0000 03E1 int b=1;
; 0000 03E2 for (a=0;a<power;a++) b = b*10;
;PCODE: $00000599 VOL: 0
;PCODE: $0000059A VOL: 0
;	*value -> Y+10
;	low_limit -> Y+8
;	high_limit -> Y+6
;	power -> Y+4
;	a -> R16,R17
;	b -> R18,R19
;PCODE: $0000059B VOL: 0
;PCODE: $0000059C VOL: 0
;PCODE: $0000059D VOL: 0
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
;PCODE: $000005A0 VOL: 0
;PCODE: $000005A1 VOL: 0
;PCODE: $000005A2 VOL: 0
;PCODE: $000005A3 VOL: 0
;PCODE: $000005A4 VOL: 0
;PCODE: $000005A5 VOL: 0
;PCODE: $000005A6 VOL: 0
;PCODE: $000005A7 VOL: 0
;PCODE: $000005A8 VOL: 0
;PCODE: $000005A9 VOL: 0
;PCODE: $000005AA VOL: 0
;PCODE: $000005AB VOL: 0
;PCODE: $000005AC VOL: 0
;PCODE: $000005AD VOL: 0
;PCODE: $000005AE VOL: 0
; 0000 03E3 *value = *value + b;
;PCODE: $000005AF VOL: 0
;PCODE: $000005B0 VOL: 0
;PCODE: $000005B1 VOL: 0
;PCODE: $000005B2 VOL: 0
;PCODE: $000005B3 VOL: 0
; 0000 03E4 if (*value < low_limit) *value = low_limit;
;PCODE: $000005B4 VOL: 0
;PCODE: $000005B5 VOL: 0
;PCODE: $000005B6 VOL: 0
;PCODE: $000005B7 VOL: 0
;PCODE: $000005B8 VOL: 0
;PCODE: $000005B9 VOL: 0
;PCODE: $000005BA VOL: 0
;PCODE: $000005BB VOL: 0
;PCODE: $000005BC VOL: 0
; 0000 03E5 if (*value >= high_limit) *value = high_limit;
;PCODE: $000005BD VOL: 0
;PCODE: $000005BE VOL: 0
;PCODE: $000005BF VOL: 0
;PCODE: $000005C0 VOL: 0
;PCODE: $000005C1 VOL: 0
;PCODE: $000005C2 VOL: 0
;PCODE: $000005C3 VOL: 0
;PCODE: $000005C4 VOL: 0
;PCODE: $000005C5 VOL: 0
;PCODE: $000005C6 VOL: 0
; 0000 03E6 }
;PCODE: $000005C7 VOL: 0
;PCODE: $000005C8 VOL: 0
;PCODE: $000005C9 VOL: 0
;PCODE: $000005CA VOL: 0
;PCODE: $000005CB VOL: 0
;
;void decrement_value(int* value,int low_limit,int high_limit,short int power)
; 0000 03E9 {
;PCODE: $000005CC VOL: 0
;PCODE: $000005CD VOL: 0
; 0000 03EA int a;
; 0000 03EB int b=1;
; 0000 03EC for (a=0;a<power;a++) b = b*10;
;PCODE: $000005CE VOL: 0
;PCODE: $000005CF VOL: 0
;	*value -> Y+10
;	low_limit -> Y+8
;	high_limit -> Y+6
;	power -> Y+4
;	a -> R16,R17
;	b -> R18,R19
;PCODE: $000005D0 VOL: 0
;PCODE: $000005D1 VOL: 0
;PCODE: $000005D2 VOL: 0
;PCODE: $000005D3 VOL: 0
;PCODE: $000005D4 VOL: 0
;PCODE: $000005D5 VOL: 0
;PCODE: $000005D6 VOL: 0
;PCODE: $000005D7 VOL: 0
;PCODE: $000005D8 VOL: 0
;PCODE: $000005D9 VOL: 0
;PCODE: $000005DA VOL: 0
;PCODE: $000005DB VOL: 0
;PCODE: $000005DC VOL: 0
;PCODE: $000005DD VOL: 0
;PCODE: $000005DE VOL: 0
;PCODE: $000005DF VOL: 0
;PCODE: $000005E0 VOL: 0
;PCODE: $000005E1 VOL: 0
;PCODE: $000005E2 VOL: 0
;PCODE: $000005E3 VOL: 0
; 0000 03ED *value = *value- b;
;PCODE: $000005E4 VOL: 0
;PCODE: $000005E5 VOL: 0
;PCODE: $000005E6 VOL: 0
;PCODE: $000005E7 VOL: 0
;PCODE: $000005E8 VOL: 0
; 0000 03EE if (*value < low_limit) *value = low_limit;
;PCODE: $000005E9 VOL: 0
;PCODE: $000005EA VOL: 0
;PCODE: $000005EB VOL: 0
;PCODE: $000005EC VOL: 0
;PCODE: $000005ED VOL: 0
;PCODE: $000005EE VOL: 0
;PCODE: $000005EF VOL: 0
;PCODE: $000005F0 VOL: 0
;PCODE: $000005F1 VOL: 0
; 0000 03EF if (*value >= high_limit) *value = high_limit;
;PCODE: $000005F2 VOL: 0
;PCODE: $000005F3 VOL: 0
;PCODE: $000005F4 VOL: 0
;PCODE: $000005F5 VOL: 0
;PCODE: $000005F6 VOL: 0
;PCODE: $000005F7 VOL: 0
;PCODE: $000005F8 VOL: 0
;PCODE: $000005F9 VOL: 0
;PCODE: $000005FA VOL: 0
;PCODE: $000005FB VOL: 0
; 0000 03F0 }
;PCODE: $000005FC VOL: 0
;PCODE: $000005FD VOL: 0
;PCODE: $000005FE VOL: 0
;PCODE: $000005FF VOL: 0
;PCODE: $00000600 VOL: 0
;
;
;void escape_menu(void)
; 0000 03F4 {
;PCODE: $00000601 VOL: 0
;PCODE: $00000602 VOL: 0
; 0000 03F5 menu_fl =0;
;PCODE: $00000603 VOL: 0
;PCODE: $00000604 VOL: 0
;PCODE: $00000605 VOL: 0
; 0000 03F6 level=0;
;PCODE: $00000606 VOL: 0
;PCODE: $00000607 VOL: 0
; 0000 03F7 item1=item2=0;
;PCODE: $00000608 VOL: 0
;PCODE: $00000609 VOL: 0
;PCODE: $0000060A VOL: 0
; 0000 03F8 blinking=0;
;PCODE: $0000060B VOL: 0
;PCODE: $0000060C VOL: 0
;PCODE: $0000060D VOL: 0
; 0000 03F9 blink_digit=0;
;PCODE: $0000060E VOL: 0
;PCODE: $0000060F VOL: 0
; 0000 03FA blink_flag =0;
;PCODE: $00000610 VOL: 0
;PCODE: $00000611 VOL: 0
;PCODE: $00000612 VOL: 0
; 0000 03FB 
; 0000 03FC }
;PCODE: $00000613 VOL: 0
;PCODE: $00000614 VOL: 0
;
;
;void display_put(int up_display, int low_display,int status,short int* message1,short int* message2)
; 0000 0400 {
;PCODE: $00000615 VOL: 0
;PCODE: $00000616 VOL: 0
; 0000 0401 if (status ==0)
;PCODE: $00000617 VOL: 0
;	up_display -> Y+8
;	low_display -> Y+6
;	status -> Y+4
;	*message1 -> Y+2
;	*message2 -> Y+0
;PCODE: $00000618 VOL: 0
;PCODE: $00000619 VOL: 0
;PCODE: $0000061A VOL: 0
; 0000 0402         {
; 0000 0403         if (up_display <0 && up_display > -1000)
;PCODE: $0000061B VOL: 0
;PCODE: $0000061C VOL: 0
;PCODE: $0000061D VOL: 0
;PCODE: $0000061E VOL: 0
;PCODE: $0000061F VOL: 0
;PCODE: $00000620 VOL: 0
;PCODE: $00000621 VOL: 0
;PCODE: $00000622 VOL: 0
;PCODE: $00000623 VOL: 0
;PCODE: $00000624 VOL: 0
;PCODE: $00000625 VOL: 0
; 0000 0404         {
; 0000 0405         up_display = -up_display;
;PCODE: $00000626 VOL: 0
;PCODE: $00000627 VOL: 0
;PCODE: $00000628 VOL: 0
; 0000 0406         up_display%=1000;
;PCODE: $00000629 VOL: 0
;PCODE: $0000062A VOL: 0
;PCODE: $0000062B VOL: 0
;PCODE: $0000062C VOL: 0
; 0000 0407         display_buffer[0]= 30;
;PCODE: $0000062D VOL: 0
;PCODE: $0000062E VOL: 0
; 0000 0408         }
; 0000 0409         else if (up_display <=-1000)
;PCODE: $0000062F VOL: 0
;PCODE: $00000630 VOL: 0
;PCODE: $00000631 VOL: 0
;PCODE: $00000632 VOL: 0
;PCODE: $00000633 VOL: 0
;PCODE: $00000634 VOL: 0
; 0000 040A         {
; 0000 040B         up_display = -up_display;
;PCODE: $00000635 VOL: 0
;PCODE: $00000636 VOL: 0
;PCODE: $00000637 VOL: 0
; 0000 040C         up_display%=1000;
;PCODE: $00000638 VOL: 0
;PCODE: $00000639 VOL: 0
;PCODE: $0000063A VOL: 0
;PCODE: $0000063B VOL: 0
; 0000 040D         display_buffer[0]= 35;
;PCODE: $0000063C VOL: 0
;PCODE: $0000063D VOL: 0
; 0000 040E 
; 0000 040F         }
; 0000 0410         else
;PCODE: $0000063E VOL: 0
;PCODE: $0000063F VOL: 0
; 0000 0411         {
; 0000 0412         display_buffer[0]=up_display/1000;
;PCODE: $00000640 VOL: 0
;PCODE: $00000641 VOL: 0
;PCODE: $00000642 VOL: 0
;PCODE: $00000643 VOL: 0
; 0000 0413         up_display%=1000;
;PCODE: $00000644 VOL: 0
;PCODE: $00000645 VOL: 0
;PCODE: $00000646 VOL: 0
;PCODE: $00000647 VOL: 0
; 0000 0414         }
;PCODE: $00000648 VOL: 0
;PCODE: $00000649 VOL: 0
; 0000 0415         display_buffer[1]=up_display/100;
;PCODE: $0000064A VOL: 0
;PCODE: $0000064B VOL: 0
;PCODE: $0000064C VOL: 0
;PCODE: $0000064D VOL: 0
;PCODE: $0000064E VOL: 0
; 0000 0416         up_display%=100;
;PCODE: $0000064F VOL: 0
;PCODE: $00000650 VOL: 0
;PCODE: $00000651 VOL: 0
;PCODE: $00000652 VOL: 0
; 0000 0417         display_buffer[2]=up_display/10;
;PCODE: $00000653 VOL: 0
;PCODE: $00000654 VOL: 0
;PCODE: $00000655 VOL: 0
;PCODE: $00000656 VOL: 0
;PCODE: $00000657 VOL: 0
; 0000 0418         up_display%=10;
;PCODE: $00000658 VOL: 0
;PCODE: $00000659 VOL: 0
;PCODE: $0000065A VOL: 0
;PCODE: $0000065B VOL: 0
; 0000 0419         display_buffer[3]=up_display;
;PCODE: $0000065C VOL: 0
;PCODE: $0000065D VOL: 0
;PCODE: $0000065E VOL: 0
; 0000 041A 
; 0000 041B         if (low_display <0 && low_display > -1000)
;PCODE: $0000065F VOL: 0
;PCODE: $00000660 VOL: 0
;PCODE: $00000661 VOL: 0
;PCODE: $00000662 VOL: 0
;PCODE: $00000663 VOL: 0
;PCODE: $00000664 VOL: 0
;PCODE: $00000665 VOL: 0
;PCODE: $00000666 VOL: 0
;PCODE: $00000667 VOL: 0
;PCODE: $00000668 VOL: 0
;PCODE: $00000669 VOL: 0
; 0000 041C         {
; 0000 041D         low_display = -low_display;
;PCODE: $0000066A VOL: 0
;PCODE: $0000066B VOL: 0
;PCODE: $0000066C VOL: 0
; 0000 041E         low_display%=1000;
;PCODE: $0000066D VOL: 0
;PCODE: $0000066E VOL: 0
;PCODE: $0000066F VOL: 0
;PCODE: $00000670 VOL: 0
; 0000 041F         display_buffer[4]= 30;
;PCODE: $00000671 VOL: 0
;PCODE: $00000672 VOL: 0
;PCODE: $00000673 VOL: 0
;PCODE: $00000674 VOL: 0
; 0000 0420         }
; 0000 0421         else if (low_display <=-1000)
;PCODE: $00000675 VOL: 0
;PCODE: $00000676 VOL: 0
;PCODE: $00000677 VOL: 0
;PCODE: $00000678 VOL: 0
;PCODE: $00000679 VOL: 0
;PCODE: $0000067A VOL: 0
; 0000 0422         {
; 0000 0423         low_display = -low_display;
;PCODE: $0000067B VOL: 0
;PCODE: $0000067C VOL: 0
;PCODE: $0000067D VOL: 0
; 0000 0424         low_display%=1000;
;PCODE: $0000067E VOL: 0
;PCODE: $0000067F VOL: 0
;PCODE: $00000680 VOL: 0
;PCODE: $00000681 VOL: 0
; 0000 0425         display_buffer[0]= 35;
;PCODE: $00000682 VOL: 0
;PCODE: $00000683 VOL: 0
; 0000 0426 
; 0000 0427         }
; 0000 0428         else
;PCODE: $00000684 VOL: 0
;PCODE: $00000685 VOL: 0
; 0000 0429         {
; 0000 042A         display_buffer[4]=low_display/1000;
;PCODE: $00000686 VOL: 0
;PCODE: $00000687 VOL: 0
;PCODE: $00000688 VOL: 0
;PCODE: $00000689 VOL: 0
;PCODE: $0000068A VOL: 0
; 0000 042B         low_display%=1000;
;PCODE: $0000068B VOL: 0
;PCODE: $0000068C VOL: 0
;PCODE: $0000068D VOL: 0
;PCODE: $0000068E VOL: 0
; 0000 042C         }
;PCODE: $0000068F VOL: 0
;PCODE: $00000690 VOL: 0
; 0000 042D         display_buffer[5]=low_display/100;
;PCODE: $00000691 VOL: 0
;PCODE: $00000692 VOL: 0
;PCODE: $00000693 VOL: 0
;PCODE: $00000694 VOL: 0
;PCODE: $00000695 VOL: 0
; 0000 042E         low_display%=100;
;PCODE: $00000696 VOL: 0
;PCODE: $00000697 VOL: 0
;PCODE: $00000698 VOL: 0
;PCODE: $00000699 VOL: 0
; 0000 042F         display_buffer[6]=low_display/10;
;PCODE: $0000069A VOL: 0
;PCODE: $0000069B VOL: 0
;PCODE: $0000069C VOL: 0
;PCODE: $0000069D VOL: 0
;PCODE: $0000069E VOL: 0
; 0000 0430         low_display%=10;
;PCODE: $0000069F VOL: 0
;PCODE: $000006A0 VOL: 0
;PCODE: $000006A1 VOL: 0
;PCODE: $000006A2 VOL: 0
; 0000 0431         display_buffer[7]=low_display;
;PCODE: $000006A3 VOL: 0
;PCODE: $000006A4 VOL: 0
;PCODE: $000006A5 VOL: 0
; 0000 0432         }
; 0000 0433 else if (status ==1)
;PCODE: $000006A6 VOL: 0
;PCODE: $000006A7 VOL: 0
;PCODE: $000006A8 VOL: 0
;PCODE: $000006A9 VOL: 0
;PCODE: $000006AA VOL: 0
; 0000 0434         {
; 0000 0435         message1 = message1 + (up_display *4);
;PCODE: $000006AB VOL: 0
;PCODE: $000006AC VOL: 0
;PCODE: $000006AD VOL: 0
;PCODE: $000006AE VOL: 0
;PCODE: $000006AF VOL: 0
;PCODE: $000006B0 VOL: 0
; 0000 0436         display_buffer[0]=*message1;
;PCODE: $000006B1 VOL: 0
;PCODE: $000006B2 VOL: 0
;PCODE: $000006B3 VOL: 0
; 0000 0437         message1++;
;PCODE: $000006B4 VOL: 0
;PCODE: $000006B5 VOL: 0
;PCODE: $000006B6 VOL: 0
; 0000 0438         display_buffer[1]=*message1;
;PCODE: $000006B7 VOL: 0
;PCODE: $000006B8 VOL: 0
;PCODE: $000006B9 VOL: 0
;PCODE: $000006BA VOL: 0
; 0000 0439         message1++;
;PCODE: $000006BB VOL: 0
;PCODE: $000006BC VOL: 0
;PCODE: $000006BD VOL: 0
; 0000 043A         display_buffer[2]=*message1;
;PCODE: $000006BE VOL: 0
;PCODE: $000006BF VOL: 0
;PCODE: $000006C0 VOL: 0
;PCODE: $000006C1 VOL: 0
; 0000 043B         message1++;
;PCODE: $000006C2 VOL: 0
;PCODE: $000006C3 VOL: 0
;PCODE: $000006C4 VOL: 0
; 0000 043C         display_buffer[3]=*message1;
;PCODE: $000006C5 VOL: 0
;PCODE: $000006C6 VOL: 0
;PCODE: $000006C7 VOL: 0
;PCODE: $000006C8 VOL: 0
; 0000 043D         if (low_display <0)
;PCODE: $000006C9 VOL: 0
;PCODE: $000006CA VOL: 0
;PCODE: $000006CB VOL: 0
; 0000 043E         {
; 0000 043F         low_display = -low_display;
;PCODE: $000006CC VOL: 0
;PCODE: $000006CD VOL: 0
;PCODE: $000006CE VOL: 0
; 0000 0440         low_display%=1000;
;PCODE: $000006CF VOL: 0
;PCODE: $000006D0 VOL: 0
;PCODE: $000006D1 VOL: 0
;PCODE: $000006D2 VOL: 0
; 0000 0441         display_buffer[4]= 30;
;PCODE: $000006D3 VOL: 0
;PCODE: $000006D4 VOL: 0
;PCODE: $000006D5 VOL: 0
;PCODE: $000006D6 VOL: 0
; 0000 0442         }
; 0000 0443         else
;PCODE: $000006D7 VOL: 0
;PCODE: $000006D8 VOL: 0
; 0000 0444         {
; 0000 0445         display_buffer[4]=low_display/1000;
;PCODE: $000006D9 VOL: 0
;PCODE: $000006DA VOL: 0
;PCODE: $000006DB VOL: 0
;PCODE: $000006DC VOL: 0
;PCODE: $000006DD VOL: 0
; 0000 0446         low_display%=1000;
;PCODE: $000006DE VOL: 0
;PCODE: $000006DF VOL: 0
;PCODE: $000006E0 VOL: 0
;PCODE: $000006E1 VOL: 0
; 0000 0447         }        display_buffer[5]=low_display/100;
;PCODE: $000006E2 VOL: 0
;PCODE: $000006E3 VOL: 0
;PCODE: $000006E4 VOL: 0
;PCODE: $000006E5 VOL: 0
;PCODE: $000006E6 VOL: 0
;PCODE: $000006E7 VOL: 0
; 0000 0448         low_display%=100;
;PCODE: $000006E8 VOL: 0
;PCODE: $000006E9 VOL: 0
;PCODE: $000006EA VOL: 0
;PCODE: $000006EB VOL: 0
; 0000 0449         display_buffer[6]=low_display/10;
;PCODE: $000006EC VOL: 0
;PCODE: $000006ED VOL: 0
;PCODE: $000006EE VOL: 0
;PCODE: $000006EF VOL: 0
;PCODE: $000006F0 VOL: 0
; 0000 044A         low_display%=10;
;PCODE: $000006F1 VOL: 0
;PCODE: $000006F2 VOL: 0
;PCODE: $000006F3 VOL: 0
;PCODE: $000006F4 VOL: 0
; 0000 044B         display_buffer[7]=low_display;
;PCODE: $000006F5 VOL: 0
;PCODE: $000006F6 VOL: 0
;PCODE: $000006F7 VOL: 0
; 0000 044C         }
; 0000 044D else if (status ==2)
;PCODE: $000006F8 VOL: 0
;PCODE: $000006F9 VOL: 0
;PCODE: $000006FA VOL: 0
;PCODE: $000006FB VOL: 0
;PCODE: $000006FC VOL: 0
; 0000 044E         {
; 0000 044F         message1 = message1 + (up_display *4);
;PCODE: $000006FD VOL: 0
;PCODE: $000006FE VOL: 0
;PCODE: $000006FF VOL: 0
;PCODE: $00000700 VOL: 0
;PCODE: $00000701 VOL: 0
;PCODE: $00000702 VOL: 0
; 0000 0450         display_buffer[0]=*message1;
;PCODE: $00000703 VOL: 0
;PCODE: $00000704 VOL: 0
;PCODE: $00000705 VOL: 0
; 0000 0451         message1++;
;PCODE: $00000706 VOL: 0
;PCODE: $00000707 VOL: 0
;PCODE: $00000708 VOL: 0
; 0000 0452         display_buffer[1]=*message1;
;PCODE: $00000709 VOL: 0
;PCODE: $0000070A VOL: 0
;PCODE: $0000070B VOL: 0
;PCODE: $0000070C VOL: 0
; 0000 0453         message1++;
;PCODE: $0000070D VOL: 0
;PCODE: $0000070E VOL: 0
;PCODE: $0000070F VOL: 0
; 0000 0454         display_buffer[2]=*message1;
;PCODE: $00000710 VOL: 0
;PCODE: $00000711 VOL: 0
;PCODE: $00000712 VOL: 0
;PCODE: $00000713 VOL: 0
; 0000 0455         message1++;
;PCODE: $00000714 VOL: 0
;PCODE: $00000715 VOL: 0
;PCODE: $00000716 VOL: 0
; 0000 0456         display_buffer[3]=*message1;
;PCODE: $00000717 VOL: 0
;PCODE: $00000718 VOL: 0
;PCODE: $00000719 VOL: 0
;PCODE: $0000071A VOL: 0
; 0000 0457         message2 = message2 + (low_display * 4);
;PCODE: $0000071B VOL: 0
;PCODE: $0000071C VOL: 0
;PCODE: $0000071D VOL: 0
;PCODE: $0000071E VOL: 0
;PCODE: $0000071F VOL: 0
;PCODE: $00000720 VOL: 0
; 0000 0458         display_buffer[4]=*message2;
;PCODE: $00000721 VOL: 0
;PCODE: $00000722 VOL: 0
;PCODE: $00000723 VOL: 0
;PCODE: $00000724 VOL: 0
; 0000 0459         message2++;
;PCODE: $00000725 VOL: 0
;PCODE: $00000726 VOL: 0
;PCODE: $00000727 VOL: 0
; 0000 045A         display_buffer[5]=*message2;
;PCODE: $00000728 VOL: 0
;PCODE: $00000729 VOL: 0
;PCODE: $0000072A VOL: 0
;PCODE: $0000072B VOL: 0
; 0000 045B         message2++;
;PCODE: $0000072C VOL: 0
;PCODE: $0000072D VOL: 0
;PCODE: $0000072E VOL: 0
; 0000 045C         display_buffer[6]=*message2;
;PCODE: $0000072F VOL: 0
;PCODE: $00000730 VOL: 0
;PCODE: $00000731 VOL: 0
;PCODE: $00000732 VOL: 0
; 0000 045D         message2++;
;PCODE: $00000733 VOL: 0
;PCODE: $00000734 VOL: 0
;PCODE: $00000735 VOL: 0
; 0000 045E         display_buffer[7]=*message2;
;PCODE: $00000736 VOL: 0
;PCODE: $00000737 VOL: 0
;PCODE: $00000738 VOL: 0
;PCODE: $00000739 VOL: 0
; 0000 045F         }
; 0000 0460 /*
; 0000 0461 if (mode ==9 && open_sensor)
; 0000 0462         {
; 0000 0463         display_buffer[0] = 1;
; 0000 0464         display_buffer[1] = 33;
; 0000 0465         display_buffer[2] = 33;
; 0000 0466         display_buffer[3] = 33;
; 0000 0467         }
; 0000 0468 if (mode ==9 && neg_fl)
; 0000 0469         {
; 0000 046A         display_buffer[0] = 32;
; 0000 046B         display_buffer[1] = 32;
; 0000 046C         display_buffer[2] = 32;
; 0000 046D         display_buffer[3] = 32;
; 0000 046E         }
; 0000 046F */
; 0000 0470 }
;PCODE: $0000073A VOL: 0
;PCODE: $0000073B VOL: 0
;PCODE: $0000073C VOL: 0
;PCODE: $0000073D VOL: 0
;PCODE: $0000073E VOL: 0
;PCODE: $0000073F VOL: 0
;
;void check_set(void)
; 0000 0473 {
;PCODE: $00000740 VOL: 0
;PCODE: $00000741 VOL: 0
; 0000 0474 if (!key5)
;PCODE: $00000742 VOL: 0
;PCODE: $00000743 VOL: 0
;PCODE: $00000744 VOL: 0
; 0000 0475     {
; 0000 0476     menu_count++;
;PCODE: $00000745 VOL: 0
;PCODE: $00000746 VOL: 0
;PCODE: $00000747 VOL: 0
;PCODE: $00000748 VOL: 0
; 0000 0477     if (menu_count >=4)
;PCODE: $00000749 VOL: 0
;PCODE: $0000074A VOL: 0
;PCODE: $0000074B VOL: 0
; 0000 0478         {
; 0000 0479         menu_count =0;
;PCODE: $0000074C VOL: 0
;PCODE: $0000074D VOL: 0
; 0000 047A         if(!menu_fl)
;PCODE: $0000074E VOL: 0
;PCODE: $0000074F VOL: 0
;PCODE: $00000750 VOL: 0
; 0000 047B             {
; 0000 047C             menu_fl =1;
;PCODE: $00000751 VOL: 0
;PCODE: $00000752 VOL: 0
;PCODE: $00000753 VOL: 0
; 0000 047D             level =1;
;PCODE: $00000754 VOL: 0
;PCODE: $00000755 VOL: 0
; 0000 047E             item1=item2=0;
;PCODE: $00000756 VOL: 0
;PCODE: $00000757 VOL: 0
;PCODE: $00000758 VOL: 0
; 0000 047F             blink_digit =0;
;PCODE: $00000759 VOL: 0
;PCODE: $0000075A VOL: 0
; 0000 0480             blink_flag=1;
;PCODE: $0000075B VOL: 0
;PCODE: $0000075C VOL: 0
;PCODE: $0000075D VOL: 0
; 0000 0481             }
; 0000 0482         else if (menu_fl)
;PCODE: $0000075E VOL: 0
;PCODE: $0000075F VOL: 0
;PCODE: $00000760 VOL: 0
;PCODE: $00000761 VOL: 0
;PCODE: $00000762 VOL: 0
; 0000 0483             {
; 0000 0484             escape_menu();
;PCODE: $00000763 VOL: 0
; 0000 0485             }
; 0000 0486         }
;PCODE: $00000764 VOL: 0
;PCODE: $00000765 VOL: 0
; 0000 0487     }
;PCODE: $00000766 VOL: 0
; 0000 0488 else
;PCODE: $00000767 VOL: 0
;PCODE: $00000768 VOL: 0
; 0000 0489     menu_count =0;
;PCODE: $00000769 VOL: 0
;PCODE: $0000076A VOL: 0
; 0000 048A }
;PCODE: $0000076B VOL: 0
;PCODE: $0000076C VOL: 0
;PCODE: $0000076D VOL: 0
;
;
;void ent_key(void)
; 0000 048E {
;PCODE: $0000076E VOL: 0
;PCODE: $0000076F VOL: 0
; 0000 048F if (menu_fl && !cal_fl)
;PCODE: $00000770 VOL: 0
;PCODE: $00000771 VOL: 0
;PCODE: $00000772 VOL: 0
;PCODE: $00000773 VOL: 0
;PCODE: $00000774 VOL: 0
;PCODE: $00000775 VOL: 0
;PCODE: $00000776 VOL: 0
;PCODE: $00000777 VOL: 0
;PCODE: $00000778 VOL: 0
;PCODE: $00000779 VOL: 0
; 0000 0490     {
; 0000 0491     blink_digit =0;
;PCODE: $0000077A VOL: 0
;PCODE: $0000077B VOL: 0
; 0000 0492 
; 0000 0493     if (level ==1)
;PCODE: $0000077C VOL: 0
;PCODE: $0000077D VOL: 0
;PCODE: $0000077E VOL: 0
; 0000 0494         {
; 0000 0495         level =2;
;PCODE: $0000077F VOL: 0
;PCODE: $00000780 VOL: 0
; 0000 0496         item2 =0;
;PCODE: $00000781 VOL: 0
;PCODE: $00000782 VOL: 0
; 0000 0497         }
; 0000 0498     else if (level==2)
;PCODE: $00000783 VOL: 0
;PCODE: $00000784 VOL: 0
;PCODE: $00000785 VOL: 0
;PCODE: $00000786 VOL: 0
;PCODE: $00000787 VOL: 0
; 0000 0499         {
; 0000 049A         item2++;
;PCODE: $00000788 VOL: 0
;PCODE: $00000789 VOL: 0
;PCODE: $0000078A VOL: 0
;PCODE: $0000078B VOL: 0
; 0000 049B         switch (item1)
;PCODE: $0000078C VOL: 0
; 0000 049C             {
; 0000 049D             case 0: ee_gen[item2-1] = gen[item2-1]; //store in eeprom
;PCODE: $0000078D VOL: 0
;PCODE: $0000078E VOL: 0
;PCODE: $0000078F VOL: 0
;PCODE: $00000790 VOL: 0
;PCODE: $00000791 VOL: 0
;PCODE: $00000792 VOL: 0
;PCODE: $00000793 VOL: 0
;PCODE: $00000794 VOL: 0
;PCODE: $00000795 VOL: 0
;PCODE: $00000796 VOL: 0
;PCODE: $00000797 VOL: 0
;PCODE: $00000798 VOL: 0
;PCODE: $00000799 VOL: 0
;PCODE: $0000079A VOL: 0
;PCODE: $0000079B VOL: 0
;PCODE: $0000079C VOL: 0
; 0000 049E 
; 0000 049F                     if (item2 >= 3)
;PCODE: $0000079D VOL: 0
;PCODE: $0000079E VOL: 0
;PCODE: $0000079F VOL: 0
; 0000 04A0                     {
; 0000 04A1                     item2 =0;       //general parameters st/mb id ,baud
;PCODE: $000007A0 VOL: 0
;PCODE: $000007A1 VOL: 0
; 0000 04A2                     level =1;       // return to level 1
;PCODE: $000007A2 VOL: 0
;PCODE: $000007A3 VOL: 0
; 0000 04A3                     }
; 0000 04A4                     break;
;PCODE: $000007A4 VOL: 0
;PCODE: $000007A5 VOL: 0
; 0000 04A5             case 1: ee_os[item2-1] = os[item2-1]; //store in eeprom
;PCODE: $000007A6 VOL: 0
;PCODE: $000007A7 VOL: 0
;PCODE: $000007A8 VOL: 0
;PCODE: $000007A9 VOL: 0
;PCODE: $000007AA VOL: 0
;PCODE: $000007AB VOL: 0
;PCODE: $000007AC VOL: 0
;PCODE: $000007AD VOL: 0
;PCODE: $000007AE VOL: 0
;PCODE: $000007AF VOL: 0
;PCODE: $000007B0 VOL: 0
;PCODE: $000007B1 VOL: 0
;PCODE: $000007B2 VOL: 0
;PCODE: $000007B3 VOL: 0
;PCODE: $000007B4 VOL: 0
;PCODE: $000007B5 VOL: 0
;PCODE: $000007B6 VOL: 0
; 0000 04A6 
; 0000 04A7                     if (item2 >= 8)
;PCODE: $000007B7 VOL: 0
;PCODE: $000007B8 VOL: 0
;PCODE: $000007B9 VOL: 0
; 0000 04A8                     {
; 0000 04A9                     item2 =0;       //offset
;PCODE: $000007BA VOL: 0
;PCODE: $000007BB VOL: 0
; 0000 04AA                     level =1;
;PCODE: $000007BC VOL: 0
;PCODE: $000007BD VOL: 0
; 0000 04AB                     }
; 0000 04AC                     break;
;PCODE: $000007BE VOL: 0
;PCODE: $000007BF VOL: 0
; 0000 04AD             case 2: ee_skip[item2-1] = skip[item2-1]; //store in eeprom
;PCODE: $000007C0 VOL: 0
;PCODE: $000007C1 VOL: 0
;PCODE: $000007C2 VOL: 0
;PCODE: $000007C3 VOL: 0
;PCODE: $000007C4 VOL: 0
;PCODE: $000007C5 VOL: 0
;PCODE: $000007C6 VOL: 0
;PCODE: $000007C7 VOL: 0
;PCODE: $000007C8 VOL: 0
;PCODE: $000007C9 VOL: 0
;PCODE: $000007CA VOL: 0
;PCODE: $000007CB VOL: 0
;PCODE: $000007CC VOL: 0
;PCODE: $000007CD VOL: 0
;PCODE: $000007CE VOL: 0
;PCODE: $000007CF VOL: 0
;PCODE: $000007D0 VOL: 0
; 0000 04AE                     if (item2 >= 8)
;PCODE: $000007D1 VOL: 0
;PCODE: $000007D2 VOL: 0
;PCODE: $000007D3 VOL: 0
; 0000 04AF                     {
; 0000 04B0                     item2 =0;       //skip
;PCODE: $000007D4 VOL: 0
;PCODE: $000007D5 VOL: 0
; 0000 04B1                     level =1;       // return to level 1
;PCODE: $000007D6 VOL: 0
;PCODE: $000007D7 VOL: 0
; 0000 04B2 
; 0000 04B3                     }
; 0000 04B4                     break;
;PCODE: $000007D8 VOL: 0
;PCODE: $000007D9 VOL: 0
; 0000 04B5             case 3: ee_rlow[item2-1] = rlow[item2-1]; //store in eeprom
;PCODE: $000007DA VOL: 0
;PCODE: $000007DB VOL: 0
;PCODE: $000007DC VOL: 0
;PCODE: $000007DD VOL: 0
;PCODE: $000007DE VOL: 0
;PCODE: $000007DF VOL: 0
;PCODE: $000007E0 VOL: 0
;PCODE: $000007E1 VOL: 0
;PCODE: $000007E2 VOL: 0
;PCODE: $000007E3 VOL: 0
;PCODE: $000007E4 VOL: 0
;PCODE: $000007E5 VOL: 0
;PCODE: $000007E6 VOL: 0
;PCODE: $000007E7 VOL: 0
;PCODE: $000007E8 VOL: 0
;PCODE: $000007E9 VOL: 0
;PCODE: $000007EA VOL: 0
; 0000 04B6                     if (item2 >= 8)
;PCODE: $000007EB VOL: 0
;PCODE: $000007EC VOL: 0
;PCODE: $000007ED VOL: 0
; 0000 04B7                     {
; 0000 04B8                     item2 =0;       //rlow
;PCODE: $000007EE VOL: 0
;PCODE: $000007EF VOL: 0
; 0000 04B9                     level =1;       // return to level 1
;PCODE: $000007F0 VOL: 0
;PCODE: $000007F1 VOL: 0
; 0000 04BA 
; 0000 04BB                     }
; 0000 04BC                     break;
;PCODE: $000007F2 VOL: 0
;PCODE: $000007F3 VOL: 0
; 0000 04BD             case 4: ee_rhigh[item2-1] = rhigh[item2-1]; //store in eeprom
;PCODE: $000007F4 VOL: 0
;PCODE: $000007F5 VOL: 0
;PCODE: $000007F6 VOL: 0
;PCODE: $000007F7 VOL: 0
;PCODE: $000007F8 VOL: 0
;PCODE: $000007F9 VOL: 0
;PCODE: $000007FA VOL: 0
;PCODE: $000007FB VOL: 0
;PCODE: $000007FC VOL: 0
;PCODE: $000007FD VOL: 0
;PCODE: $000007FE VOL: 0
;PCODE: $000007FF VOL: 0
;PCODE: $00000800 VOL: 0
;PCODE: $00000801 VOL: 0
;PCODE: $00000802 VOL: 0
;PCODE: $00000803 VOL: 0
;PCODE: $00000804 VOL: 0
; 0000 04BE                     if (item2 >= 8)
;PCODE: $00000805 VOL: 0
;PCODE: $00000806 VOL: 0
;PCODE: $00000807 VOL: 0
; 0000 04BF                     {
; 0000 04C0                     item2 =0;       //rhigh
;PCODE: $00000808 VOL: 0
;PCODE: $00000809 VOL: 0
; 0000 04C1                     level =1;       // return to level 1
;PCODE: $0000080A VOL: 0
;PCODE: $0000080B VOL: 0
; 0000 04C2 
; 0000 04C3 
; 0000 04C4                     }
; 0000 04C5                     break;
;PCODE: $0000080C VOL: 0
;PCODE: $0000080D VOL: 0
; 0000 04C6             case 5: ee_alow[item2-1] = alow[item2-1]; //store in eeprom
;PCODE: $0000080E VOL: 0
;PCODE: $0000080F VOL: 0
;PCODE: $00000810 VOL: 0
;PCODE: $00000811 VOL: 0
;PCODE: $00000812 VOL: 0
;PCODE: $00000813 VOL: 0
;PCODE: $00000814 VOL: 0
;PCODE: $00000815 VOL: 0
;PCODE: $00000816 VOL: 0
;PCODE: $00000817 VOL: 0
;PCODE: $00000818 VOL: 0
;PCODE: $00000819 VOL: 0
;PCODE: $0000081A VOL: 0
;PCODE: $0000081B VOL: 0
;PCODE: $0000081C VOL: 0
;PCODE: $0000081D VOL: 0
;PCODE: $0000081E VOL: 0
; 0000 04C7                     if (item2 >= 8)
;PCODE: $0000081F VOL: 0
;PCODE: $00000820 VOL: 0
;PCODE: $00000821 VOL: 0
; 0000 04C8                     {
; 0000 04C9                     item2 =0;       //alow
;PCODE: $00000822 VOL: 0
;PCODE: $00000823 VOL: 0
; 0000 04CA                     level =1;       // return to level 1
;PCODE: $00000824 VOL: 0
;PCODE: $00000825 VOL: 0
; 0000 04CB                     }
; 0000 04CC                     break;
;PCODE: $00000826 VOL: 0
;PCODE: $00000827 VOL: 0
; 0000 04CD             case 6: ee_ahigh[item2-1] = ahigh[item2-1]; //store in eeprom
;PCODE: $00000828 VOL: 0
;PCODE: $00000829 VOL: 0
;PCODE: $0000082A VOL: 0
;PCODE: $0000082B VOL: 0
;PCODE: $0000082C VOL: 0
;PCODE: $0000082D VOL: 0
;PCODE: $0000082E VOL: 0
;PCODE: $0000082F VOL: 0
;PCODE: $00000830 VOL: 0
;PCODE: $00000831 VOL: 0
;PCODE: $00000832 VOL: 0
;PCODE: $00000833 VOL: 0
;PCODE: $00000834 VOL: 0
;PCODE: $00000835 VOL: 0
;PCODE: $00000836 VOL: 0
;PCODE: $00000837 VOL: 0
;PCODE: $00000838 VOL: 0
; 0000 04CE                     if (item2 >= 8)
;PCODE: $00000839 VOL: 0
;PCODE: $0000083A VOL: 0
;PCODE: $0000083B VOL: 0
; 0000 04CF                     {
; 0000 04D0                     item2 =0;       //ahigh
;PCODE: $0000083C VOL: 0
;PCODE: $0000083D VOL: 0
; 0000 04D1                     level =1;       // return to level 1
;PCODE: $0000083E VOL: 0
;PCODE: $0000083F VOL: 0
; 0000 04D2 
; 0000 04D3                     }
; 0000 04D4                     break;
;PCODE: $00000840 VOL: 0
;PCODE: $00000841 VOL: 0
; 0000 04D5             case 7: ee_input[item2-1] = input[item2-1]; //store in eeprom
;PCODE: $00000842 VOL: 0
;PCODE: $00000843 VOL: 0
;PCODE: $00000844 VOL: 0
;PCODE: $00000845 VOL: 0
;PCODE: $00000846 VOL: 0
;PCODE: $00000847 VOL: 0
;PCODE: $00000848 VOL: 0
;PCODE: $00000849 VOL: 0
;PCODE: $0000084A VOL: 0
;PCODE: $0000084B VOL: 0
;PCODE: $0000084C VOL: 0
;PCODE: $0000084D VOL: 0
;PCODE: $0000084E VOL: 0
;PCODE: $0000084F VOL: 0
;PCODE: $00000850 VOL: 0
;PCODE: $00000851 VOL: 0
;PCODE: $00000852 VOL: 0
; 0000 04D6                     switch (input[item2-1])
;PCODE: $00000853 VOL: 0
;PCODE: $00000854 VOL: 0
;PCODE: $00000855 VOL: 0
;PCODE: $00000856 VOL: 0
;PCODE: $00000857 VOL: 0
;PCODE: $00000858 VOL: 0
; 0000 04D7                         {
; 0000 04D8                         case 0:dp[item2-1]=2;
;PCODE: $00000859 VOL: 0
;PCODE: $0000085A VOL: 0
;PCODE: $0000085B VOL: 0
;PCODE: $0000085C VOL: 0
;PCODE: $0000085D VOL: 0
;PCODE: $0000085E VOL: 0
;PCODE: $0000085F VOL: 0
;PCODE: $00000860 VOL: 0
;PCODE: $00000861 VOL: 0
; 0000 04D9                              break;
;PCODE: $00000862 VOL: 0
; 0000 04DA                         case 1: dp[item2-1] =3;
;PCODE: $00000863 VOL: 0
;PCODE: $00000864 VOL: 0
;PCODE: $00000865 VOL: 0
;PCODE: $00000866 VOL: 0
;PCODE: $00000867 VOL: 0
;PCODE: $00000868 VOL: 0
;PCODE: $00000869 VOL: 0
;PCODE: $0000086A VOL: 0
;PCODE: $0000086B VOL: 0
;PCODE: $0000086C VOL: 0
; 0000 04DB                                 break;
;PCODE: $0000086D VOL: 0
; 0000 04DC                         case 2: dp[item2-1] =3;
;PCODE: $0000086E VOL: 0
;PCODE: $0000086F VOL: 0
;PCODE: $00000870 VOL: 0
;PCODE: $00000871 VOL: 0
;PCODE: $00000872 VOL: 0
;PCODE: $00000873 VOL: 0
;PCODE: $00000874 VOL: 0
;PCODE: $00000875 VOL: 0
;PCODE: $00000876 VOL: 0
;PCODE: $00000877 VOL: 0
; 0000 04DD                                 break;
;PCODE: $00000878 VOL: 0
; 0000 04DE                         case 3: dp[item2-1] =3;
;PCODE: $00000879 VOL: 0
;PCODE: $0000087A VOL: 0
;PCODE: $0000087B VOL: 0
;PCODE: $0000087C VOL: 0
;PCODE: $0000087D VOL: 0
;PCODE: $0000087E VOL: 0
;PCODE: $0000087F VOL: 0
;PCODE: $00000880 VOL: 0
;PCODE: $00000881 VOL: 0
;PCODE: $00000882 VOL: 0
; 0000 04DF                                 break;
;PCODE: $00000883 VOL: 0
; 0000 04E0                         case 4: dp[item2-1] =3;
;PCODE: $00000884 VOL: 0
;PCODE: $00000885 VOL: 0
;PCODE: $00000886 VOL: 0
;PCODE: $00000887 VOL: 0
;PCODE: $00000888 VOL: 0
;PCODE: $00000889 VOL: 0
;PCODE: $0000088A VOL: 0
;PCODE: $0000088B VOL: 0
;PCODE: $0000088C VOL: 0
;PCODE: $0000088D VOL: 0
; 0000 04E1                                 break;
;PCODE: $0000088E VOL: 0
; 0000 04E2                         case 5: dp[item2-1] =3;
;PCODE: $0000088F VOL: 0
;PCODE: $00000890 VOL: 0
;PCODE: $00000891 VOL: 0
;PCODE: $00000892 VOL: 0
;PCODE: $00000893 VOL: 0
;PCODE: $00000894 VOL: 0
;PCODE: $00000895 VOL: 0
;PCODE: $00000896 VOL: 0
;PCODE: $00000897 VOL: 0
;PCODE: $00000898 VOL: 0
; 0000 04E3                                 break;
;PCODE: $00000899 VOL: 0
; 0000 04E4                         case 6: dp[item2-1] =3;
;PCODE: $0000089A VOL: 0
;PCODE: $0000089B VOL: 0
;PCODE: $0000089C VOL: 0
;PCODE: $0000089D VOL: 0
;PCODE: $0000089E VOL: 0
;PCODE: $0000089F VOL: 0
;PCODE: $000008A0 VOL: 0
;PCODE: $000008A1 VOL: 0
;PCODE: $000008A2 VOL: 0
;PCODE: $000008A3 VOL: 0
; 0000 04E5                                 break;
;PCODE: $000008A4 VOL: 0
; 0000 04E6                         }
;PCODE: $000008A5 VOL: 0
; 0000 04E7                     if (item2 >= 8)
;PCODE: $000008A6 VOL: 0
;PCODE: $000008A7 VOL: 0
;PCODE: $000008A8 VOL: 0
; 0000 04E8                     {
; 0000 04E9                     item2 =0;       //input
;PCODE: $000008A9 VOL: 0
;PCODE: $000008AA VOL: 0
; 0000 04EA                     level =1;       // return to level 1
;PCODE: $000008AB VOL: 0
;PCODE: $000008AC VOL: 0
; 0000 04EB 
; 0000 04EC                     }
; 0000 04ED                     break;
;PCODE: $000008AD VOL: 0
;PCODE: $000008AE VOL: 0
; 0000 04EE             case 8: ee_dp[item2-1] = dp[item2-1]; //store in eeprom
;PCODE: $000008AF VOL: 0
;PCODE: $000008B0 VOL: 0
;PCODE: $000008B1 VOL: 0
;PCODE: $000008B2 VOL: 0
;PCODE: $000008B3 VOL: 0
;PCODE: $000008B4 VOL: 0
;PCODE: $000008B5 VOL: 0
;PCODE: $000008B6 VOL: 0
;PCODE: $000008B7 VOL: 0
;PCODE: $000008B8 VOL: 0
;PCODE: $000008B9 VOL: 0
;PCODE: $000008BA VOL: 0
;PCODE: $000008BB VOL: 0
;PCODE: $000008BC VOL: 0
;PCODE: $000008BD VOL: 0
;PCODE: $000008BE VOL: 0
;PCODE: $000008BF VOL: 0
; 0000 04EF                     if (item2 >= 8)
;PCODE: $000008C0 VOL: 0
;PCODE: $000008C1 VOL: 0
;PCODE: $000008C2 VOL: 0
; 0000 04F0                     {
; 0000 04F1                     item2 =0;       //input
;PCODE: $000008C3 VOL: 0
;PCODE: $000008C4 VOL: 0
; 0000 04F2                     level =1;       // return to level 1
;PCODE: $000008C5 VOL: 0
;PCODE: $000008C6 VOL: 0
; 0000 04F3 
; 0000 04F4                     }
; 0000 04F5                     break;
;PCODE: $000008C7 VOL: 0
;PCODE: $000008C8 VOL: 0
; 0000 04F6 
; 0000 04F7 
; 0000 04F8             }
;PCODE: $000008C9 VOL: 0
; 0000 04F9         }
; 0000 04FA 
; 0000 04FB     else
;PCODE: $000008CA VOL: 0
;PCODE: $000008CB VOL: 0
; 0000 04FC         {
; 0000 04FD         escape_menu();
;PCODE: $000008CC VOL: 0
; 0000 04FE         }
;PCODE: $000008CD VOL: 0
;PCODE: $000008CE VOL: 0
; 0000 04FF     }
; 0000 0500     else if (cal_fl)
;PCODE: $000008CF VOL: 0
;PCODE: $000008D0 VOL: 0
;PCODE: $000008D1 VOL: 0
;PCODE: $000008D2 VOL: 0
;PCODE: $000008D3 VOL: 0
; 0000 0501         {
; 0000 0502         mux_scan++;
;PCODE: $000008D4 VOL: 0
;PCODE: $000008D5 VOL: 0
;PCODE: $000008D6 VOL: 0
;PCODE: $000008D7 VOL: 0
; 0000 0503         if (mux_scan>=8) mux_scan=0;
;PCODE: $000008D8 VOL: 0
;PCODE: $000008D9 VOL: 0
;PCODE: $000008DA VOL: 0
;PCODE: $000008DB VOL: 0
;PCODE: $000008DC VOL: 0
; 0000 0504         switch(mux_scan)
;PCODE: $000008DD VOL: 0
;PCODE: $000008DE VOL: 0
; 0000 0505                 {
; 0000 0506                 case 0: mux9 =0;
;PCODE: $000008DF VOL: 0
;PCODE: $000008E0 VOL: 0
;PCODE: $000008E1 VOL: 0
;PCODE: $000008E2 VOL: 0
; 0000 0507                         mux10 =0;
;PCODE: $000008E3 VOL: 0
;PCODE: $000008E4 VOL: 0
; 0000 0508                         mux11 =0;
;PCODE: $000008E5 VOL: 0
;PCODE: $000008E6 VOL: 0
; 0000 0509                        break;
;PCODE: $000008E7 VOL: 0
; 0000 050A                 case 1: mux9 =1;
;PCODE: $000008E8 VOL: 0
;PCODE: $000008E9 VOL: 0
;PCODE: $000008EA VOL: 0
;PCODE: $000008EB VOL: 0
;PCODE: $000008EC VOL: 0
; 0000 050B                       mux10 =0;
;PCODE: $000008ED VOL: 0
;PCODE: $000008EE VOL: 0
; 0000 050C                         mux11 =0;
;PCODE: $000008EF VOL: 0
;PCODE: $000008F0 VOL: 0
; 0000 050D                         break;
;PCODE: $000008F1 VOL: 0
; 0000 050E                 case 2: mux9 =0;
;PCODE: $000008F2 VOL: 0
;PCODE: $000008F3 VOL: 0
;PCODE: $000008F4 VOL: 0
;PCODE: $000008F5 VOL: 0
;PCODE: $000008F6 VOL: 0
; 0000 050F                         mux10 =1;
;PCODE: $000008F7 VOL: 0
;PCODE: $000008F8 VOL: 0
; 0000 0510                         mux11 =0;
;PCODE: $000008F9 VOL: 0
;PCODE: $000008FA VOL: 0
; 0000 0511                       break;
;PCODE: $000008FB VOL: 0
; 0000 0512                 case 3: mux9 =1;
;PCODE: $000008FC VOL: 0
;PCODE: $000008FD VOL: 0
;PCODE: $000008FE VOL: 0
;PCODE: $000008FF VOL: 0
;PCODE: $00000900 VOL: 0
; 0000 0513                         mux10 =1;
;PCODE: $00000901 VOL: 0
;PCODE: $00000902 VOL: 0
; 0000 0514                         mux11 =0;
;PCODE: $00000903 VOL: 0
;PCODE: $00000904 VOL: 0
; 0000 0515                         break;
;PCODE: $00000905 VOL: 0
; 0000 0516                 case 4: mux9 =0;
;PCODE: $00000906 VOL: 0
;PCODE: $00000907 VOL: 0
;PCODE: $00000908 VOL: 0
;PCODE: $00000909 VOL: 0
;PCODE: $0000090A VOL: 0
; 0000 0517                         mux10 =0;
;PCODE: $0000090B VOL: 0
;PCODE: $0000090C VOL: 0
; 0000 0518                         mux11 =1;
;PCODE: $0000090D VOL: 0
;PCODE: $0000090E VOL: 0
; 0000 0519                         break;
;PCODE: $0000090F VOL: 0
; 0000 051A                 case 5: mux9 =1;
;PCODE: $00000910 VOL: 0
;PCODE: $00000911 VOL: 0
;PCODE: $00000912 VOL: 0
;PCODE: $00000913 VOL: 0
;PCODE: $00000914 VOL: 0
; 0000 051B                         mux10 =0;
;PCODE: $00000915 VOL: 0
;PCODE: $00000916 VOL: 0
; 0000 051C                         mux11 =1;
;PCODE: $00000917 VOL: 0
;PCODE: $00000918 VOL: 0
; 0000 051D                         break;
;PCODE: $00000919 VOL: 0
; 0000 051E                 case 6: mux9 =0;
;PCODE: $0000091A VOL: 0
;PCODE: $0000091B VOL: 0
;PCODE: $0000091C VOL: 0
;PCODE: $0000091D VOL: 0
;PCODE: $0000091E VOL: 0
; 0000 051F                         mux10 =1;
;PCODE: $0000091F VOL: 0
;PCODE: $00000920 VOL: 0
; 0000 0520                         mux11 =1;
;PCODE: $00000921 VOL: 0
;PCODE: $00000922 VOL: 0
; 0000 0521                         break;
;PCODE: $00000923 VOL: 0
; 0000 0522                 case 7: mux9 =1;
;PCODE: $00000924 VOL: 0
;PCODE: $00000925 VOL: 0
;PCODE: $00000926 VOL: 0
;PCODE: $00000927 VOL: 0
;PCODE: $00000928 VOL: 0
; 0000 0523                         mux10 =1;
;PCODE: $00000929 VOL: 0
;PCODE: $0000092A VOL: 0
; 0000 0524                         mux11 =1;
;PCODE: $0000092B VOL: 0
;PCODE: $0000092C VOL: 0
; 0000 0525                         break;
;PCODE: $0000092D VOL: 0
; 0000 0526                 default:mux_scan =0;
;PCODE: $0000092E VOL: 0
;PCODE: $0000092F VOL: 0
;PCODE: $00000930 VOL: 0
; 0000 0527                         mux9 =0;
;PCODE: $00000931 VOL: 0
;PCODE: $00000932 VOL: 0
; 0000 0528                         mux10 =0;
;PCODE: $00000933 VOL: 0
;PCODE: $00000934 VOL: 0
; 0000 0529                         mux11 =0;
;PCODE: $00000935 VOL: 0
;PCODE: $00000936 VOL: 0
; 0000 052A                         break;
;PCODE: $00000937 VOL: 0
; 0000 052B                 }
;PCODE: $00000938 VOL: 0
; 0000 052C         }
; 0000 052D }
;PCODE: $00000939 VOL: 0
;PCODE: $0000093A VOL: 0
;PCODE: $0000093B VOL: 0
;PCODE: $0000093C VOL: 0
;
;void inc_key(void)
; 0000 0530 {
;PCODE: $0000093D VOL: 0
;PCODE: $0000093E VOL: 0
; 0000 0531 int max_value,min_value;        // to determine maximum and minimum values for different inputs
; 0000 0532 switch (input[item2])
;PCODE: $0000093F VOL: 0
;	max_value -> R16,R17
;	min_value -> R18,R19
;PCODE: $00000940 VOL: 0
;PCODE: $00000941 VOL: 0
;PCODE: $00000942 VOL: 0
;PCODE: $00000943 VOL: 0
;PCODE: $00000944 VOL: 0
; 0000 0533     {
; 0000 0534     case 0: min_value = -1000;
;PCODE: $00000945 VOL: 0
;PCODE: $00000946 VOL: 0
;PCODE: $00000947 VOL: 0
;PCODE: $00000948 VOL: 0
; 0000 0535             max_value = 6500;
;PCODE: $00000949 VOL: 0
;PCODE: $0000094A VOL: 0
; 0000 0536             break;
;PCODE: $0000094B VOL: 0
; 0000 0537     case 1: min_value = -100;
;PCODE: $0000094C VOL: 0
;PCODE: $0000094D VOL: 0
;PCODE: $0000094E VOL: 0
;PCODE: $0000094F VOL: 0
;PCODE: $00000950 VOL: 0
; 0000 0538             max_value = 650;
;PCODE: $00000951 VOL: 0
;PCODE: $00000952 VOL: 0
; 0000 0539             break;
;PCODE: $00000953 VOL: 0
; 0000 053A     case 2: min_value = 0;
;PCODE: $00000954 VOL: 0
;PCODE: $00000955 VOL: 0
;PCODE: $00000956 VOL: 0
;PCODE: $00000957 VOL: 0
;PCODE: $00000958 VOL: 0
; 0000 053B             max_value = 650;
;PCODE: $00000959 VOL: 0
;PCODE: $0000095A VOL: 0
; 0000 053C             break;
;PCODE: $0000095B VOL: 0
; 0000 053D     case 3: min_value = 0;
;PCODE: $0000095C VOL: 0
;PCODE: $0000095D VOL: 0
;PCODE: $0000095E VOL: 0
;PCODE: $0000095F VOL: 0
;PCODE: $00000960 VOL: 0
; 0000 053E             max_value = 1300;
;PCODE: $00000961 VOL: 0
;PCODE: $00000962 VOL: 0
; 0000 053F             break;
;PCODE: $00000963 VOL: 0
; 0000 0540     case 4: min_value = 0;
;PCODE: $00000964 VOL: 0
;PCODE: $00000965 VOL: 0
;PCODE: $00000966 VOL: 0
;PCODE: $00000967 VOL: 0
;PCODE: $00000968 VOL: 0
; 0000 0541             max_value = 1700;
;PCODE: $00000969 VOL: 0
;PCODE: $0000096A VOL: 0
; 0000 0542             break;
;PCODE: $0000096B VOL: 0
; 0000 0543     case 5: min_value = 0;
;PCODE: $0000096C VOL: 0
;PCODE: $0000096D VOL: 0
;PCODE: $0000096E VOL: 0
;PCODE: $0000096F VOL: 0
;PCODE: $00000970 VOL: 0
; 0000 0544             max_value = 1700;
;PCODE: $00000971 VOL: 0
;PCODE: $00000972 VOL: 0
; 0000 0545             break;
;PCODE: $00000973 VOL: 0
; 0000 0546     case 6: min_value = -100;
;PCODE: $00000974 VOL: 0
;PCODE: $00000975 VOL: 0
;PCODE: $00000976 VOL: 0
;PCODE: $00000977 VOL: 0
;PCODE: $00000978 VOL: 0
; 0000 0547             max_value = 250;
;PCODE: $00000979 VOL: 0
;PCODE: $0000097A VOL: 0
; 0000 0548             break;
;PCODE: $0000097B VOL: 0
; 0000 0549     case 7: min_value = -1999;
;PCODE: $0000097C VOL: 0
;PCODE: $0000097D VOL: 0
;PCODE: $0000097E VOL: 0
;PCODE: $0000097F VOL: 0
;PCODE: $00000980 VOL: 0
; 0000 054A             max_value = 9999;
;PCODE: $00000981 VOL: 0
;PCODE: $00000982 VOL: 0
; 0000 054B             break;
;PCODE: $00000983 VOL: 0
; 0000 054C     case 8: min_value = -1999;
;PCODE: $00000984 VOL: 0
;PCODE: $00000985 VOL: 0
;PCODE: $00000986 VOL: 0
;PCODE: $00000987 VOL: 0
;PCODE: $00000988 VOL: 0
; 0000 054D             max_value = 9999;
;PCODE: $00000989 VOL: 0
;PCODE: $0000098A VOL: 0
; 0000 054E             break;
;PCODE: $0000098B VOL: 0
; 0000 054F     }
;PCODE: $0000098C VOL: 0
; 0000 0550 if (menu_fl && !cal_fl)
;PCODE: $0000098D VOL: 0
;PCODE: $0000098E VOL: 0
;PCODE: $0000098F VOL: 0
;PCODE: $00000990 VOL: 0
;PCODE: $00000991 VOL: 0
;PCODE: $00000992 VOL: 0
;PCODE: $00000993 VOL: 0
;PCODE: $00000994 VOL: 0
;PCODE: $00000995 VOL: 0
;PCODE: $00000996 VOL: 0
; 0000 0551     {
; 0000 0552     if (level ==1)
;PCODE: $00000997 VOL: 0
;PCODE: $00000998 VOL: 0
;PCODE: $00000999 VOL: 0
; 0000 0553         {
; 0000 0554         item1 ++;
;PCODE: $0000099A VOL: 0
;PCODE: $0000099B VOL: 0
;PCODE: $0000099C VOL: 0
;PCODE: $0000099D VOL: 0
; 0000 0555         if (item1>=9) item1 =0;
;PCODE: $0000099E VOL: 0
;PCODE: $0000099F VOL: 0
;PCODE: $000009A0 VOL: 0
;PCODE: $000009A1 VOL: 0
;PCODE: $000009A2 VOL: 0
; 0000 0556         }
;PCODE: $000009A3 VOL: 0
; 0000 0557     else if (level ==2)
;PCODE: $000009A4 VOL: 0
;PCODE: $000009A5 VOL: 0
;PCODE: $000009A6 VOL: 0
;PCODE: $000009A7 VOL: 0
;PCODE: $000009A8 VOL: 0
; 0000 0558         {
; 0000 0559         switch (item1)
;PCODE: $000009A9 VOL: 0
; 0000 055A             {
; 0000 055B             case 0: if (item2==0) increment_value(&gen[0],0,99,0);  //scan time
;PCODE: $000009AA VOL: 0
;PCODE: $000009AB VOL: 0
;PCODE: $000009AC VOL: 0
;PCODE: $000009AD VOL: 0
;PCODE: $000009AE VOL: 0
;PCODE: $000009AF VOL: 0
;PCODE: $000009B0 VOL: 0
;PCODE: $000009B1 VOL: 0
;PCODE: $000009B2 VOL: 0
;PCODE: $000009B3 VOL: 0
;PCODE: $000009B4 VOL: 0
;PCODE: $000009B5 VOL: 0
;PCODE: $000009B6 VOL: 0
;PCODE: $000009B7 VOL: 0
; 0000 055C                     if(item2 ==1) increment_value(&gen[1],1,242,blink_digit);//modbus id
;PCODE: $000009B8 VOL: 0
;PCODE: $000009B9 VOL: 0
;PCODE: $000009BA VOL: 0
;PCODE: $000009BB VOL: 0
;PCODE: $000009BC VOL: 0
;PCODE: $000009BD VOL: 0
;PCODE: $000009BE VOL: 0
;PCODE: $000009BF VOL: 0
;PCODE: $000009C0 VOL: 0
;PCODE: $000009C1 VOL: 0
;PCODE: $000009C2 VOL: 0
;PCODE: $000009C3 VOL: 0
;PCODE: $000009C4 VOL: 0
; 0000 055D                     if (item2==2) increment_value(&gen[2],0,3,0);   //baud rates 9600/19200/38400/115200
;PCODE: $000009C5 VOL: 0
;PCODE: $000009C6 VOL: 0
;PCODE: $000009C7 VOL: 0
;PCODE: $000009C8 VOL: 0
;PCODE: $000009C9 VOL: 0
;PCODE: $000009CA VOL: 0
;PCODE: $000009CB VOL: 0
;PCODE: $000009CC VOL: 0
;PCODE: $000009CD VOL: 0
;PCODE: $000009CE VOL: 0
;PCODE: $000009CF VOL: 0
;PCODE: $000009D0 VOL: 0
;PCODE: $000009D1 VOL: 0
;PCODE: $000009D2 VOL: 0
; 0000 055E                     break;
;PCODE: $000009D3 VOL: 0
;PCODE: $000009D4 VOL: 0
; 0000 055F             case 1: increment_value(&os[item2],-999,1999,blink_digit);   //offset
;PCODE: $000009D5 VOL: 0
;PCODE: $000009D6 VOL: 0
;PCODE: $000009D7 VOL: 0
;PCODE: $000009D8 VOL: 0
;PCODE: $000009D9 VOL: 0
;PCODE: $000009DA VOL: 0
;PCODE: $000009DB VOL: 0
;PCODE: $000009DC VOL: 0
;PCODE: $000009DD VOL: 0
;PCODE: $000009DE VOL: 0
;PCODE: $000009DF VOL: 0
;PCODE: $000009E0 VOL: 0
;PCODE: $000009E1 VOL: 0
;PCODE: $000009E2 VOL: 0
; 0000 0560                     break;
;PCODE: $000009E3 VOL: 0
; 0000 0561             case 2: increment_value(&skip[item2],0,1,0);    //skip
;PCODE: $000009E4 VOL: 0
;PCODE: $000009E5 VOL: 0
;PCODE: $000009E6 VOL: 0
;PCODE: $000009E7 VOL: 0
;PCODE: $000009E8 VOL: 0
;PCODE: $000009E9 VOL: 0
;PCODE: $000009EA VOL: 0
;PCODE: $000009EB VOL: 0
;PCODE: $000009EC VOL: 0
;PCODE: $000009ED VOL: 0
;PCODE: $000009EE VOL: 0
;PCODE: $000009EF VOL: 0
;PCODE: $000009F0 VOL: 0
;PCODE: $000009F1 VOL: 0
;PCODE: $000009F2 VOL: 0
; 0000 0562                     break;
;PCODE: $000009F3 VOL: 0
; 0000 0563             case 3: increment_value(&rlow[item2],min_value,max_value,blink_digit);    //rlow
;PCODE: $000009F4 VOL: 0
;PCODE: $000009F5 VOL: 0
;PCODE: $000009F6 VOL: 0
;PCODE: $000009F7 VOL: 0
;PCODE: $000009F8 VOL: 0
;PCODE: $000009F9 VOL: 0
;PCODE: $000009FA VOL: 0
;PCODE: $000009FB VOL: 0
;PCODE: $000009FC VOL: 0
;PCODE: $000009FD VOL: 0
;PCODE: $000009FE VOL: 0
;PCODE: $000009FF VOL: 0
; 0000 0564                     break;
;PCODE: $00000A00 VOL: 0
; 0000 0565             case 4: increment_value(&rhigh[item2],min_value,max_value,blink_digit);   //rhigh
;PCODE: $00000A01 VOL: 0
;PCODE: $00000A02 VOL: 0
;PCODE: $00000A03 VOL: 0
;PCODE: $00000A04 VOL: 0
;PCODE: $00000A05 VOL: 0
;PCODE: $00000A06 VOL: 0
;PCODE: $00000A07 VOL: 0
;PCODE: $00000A08 VOL: 0
;PCODE: $00000A09 VOL: 0
;PCODE: $00000A0A VOL: 0
;PCODE: $00000A0B VOL: 0
;PCODE: $00000A0C VOL: 0
; 0000 0566                     break;
;PCODE: $00000A0D VOL: 0
; 0000 0567             case 5: increment_value(&alow[item2],min_value,ahigh[item2],blink_digit);    //alow
;PCODE: $00000A0E VOL: 0
;PCODE: $00000A0F VOL: 0
;PCODE: $00000A10 VOL: 0
;PCODE: $00000A11 VOL: 0
;PCODE: $00000A12 VOL: 0
;PCODE: $00000A13 VOL: 0
;PCODE: $00000A14 VOL: 0
;PCODE: $00000A15 VOL: 0
;PCODE: $00000A16 VOL: 0
;PCODE: $00000A17 VOL: 0
;PCODE: $00000A18 VOL: 0
;PCODE: $00000A19 VOL: 0
;PCODE: $00000A1A VOL: 0
;PCODE: $00000A1B VOL: 0
;PCODE: $00000A1C VOL: 0
;PCODE: $00000A1D VOL: 0
;PCODE: $00000A1E VOL: 0
; 0000 0568                     break;
;PCODE: $00000A1F VOL: 0
; 0000 0569             case 6: increment_value(&ahigh[item2],alow[item2],max_value,blink_digit);   //ahigh
;PCODE: $00000A20 VOL: 0
;PCODE: $00000A21 VOL: 0
;PCODE: $00000A22 VOL: 0
;PCODE: $00000A23 VOL: 0
;PCODE: $00000A24 VOL: 0
;PCODE: $00000A25 VOL: 0
;PCODE: $00000A26 VOL: 0
;PCODE: $00000A27 VOL: 0
;PCODE: $00000A28 VOL: 0
;PCODE: $00000A29 VOL: 0
;PCODE: $00000A2A VOL: 0
;PCODE: $00000A2B VOL: 0
;PCODE: $00000A2C VOL: 0
;PCODE: $00000A2D VOL: 0
;PCODE: $00000A2E VOL: 0
;PCODE: $00000A2F VOL: 0
;PCODE: $00000A30 VOL: 0
; 0000 056A                     break;
;PCODE: $00000A31 VOL: 0
; 0000 056B             case 7: increment_value(&input[item2],0,8,0);     //input selection
;PCODE: $00000A32 VOL: 0
;PCODE: $00000A33 VOL: 0
;PCODE: $00000A34 VOL: 0
;PCODE: $00000A35 VOL: 0
;PCODE: $00000A36 VOL: 0
;PCODE: $00000A37 VOL: 0
;PCODE: $00000A38 VOL: 0
;PCODE: $00000A39 VOL: 0
;PCODE: $00000A3A VOL: 0
;PCODE: $00000A3B VOL: 0
;PCODE: $00000A3C VOL: 0
;PCODE: $00000A3D VOL: 0
;PCODE: $00000A3E VOL: 0
;PCODE: $00000A3F VOL: 0
;PCODE: $00000A40 VOL: 0
; 0000 056C                      break;
;PCODE: $00000A41 VOL: 0
; 0000 056D             case 8: if (input[item2]<7)
;PCODE: $00000A42 VOL: 0
;PCODE: $00000A43 VOL: 0
;PCODE: $00000A44 VOL: 0
;PCODE: $00000A45 VOL: 0
;PCODE: $00000A46 VOL: 0
;PCODE: $00000A47 VOL: 0
;PCODE: $00000A48 VOL: 0
;PCODE: $00000A49 VOL: 0
;PCODE: $00000A4A VOL: 0
;PCODE: $00000A4B VOL: 0
; 0000 056E                         increment_value(&dp[item2],3,3,0);       //decimal point selection for temperature
;PCODE: $00000A4C VOL: 0
;PCODE: $00000A4D VOL: 0
;PCODE: $00000A4E VOL: 0
;PCODE: $00000A4F VOL: 0
;PCODE: $00000A50 VOL: 0
;PCODE: $00000A51 VOL: 0
;PCODE: $00000A52 VOL: 0
;PCODE: $00000A53 VOL: 0
;PCODE: $00000A54 VOL: 0
;PCODE: $00000A55 VOL: 0
;PCODE: $00000A56 VOL: 0
;PCODE: $00000A57 VOL: 0
; 0000 056F                     else
;PCODE: $00000A58 VOL: 0
;PCODE: $00000A59 VOL: 0
; 0000 0570                         increment_value(&dp[item2],0,3,0);       //decimal point selection for voltage and current
;PCODE: $00000A5A VOL: 0
;PCODE: $00000A5B VOL: 0
;PCODE: $00000A5C VOL: 0
;PCODE: $00000A5D VOL: 0
;PCODE: $00000A5E VOL: 0
;PCODE: $00000A5F VOL: 0
;PCODE: $00000A60 VOL: 0
;PCODE: $00000A61 VOL: 0
;PCODE: $00000A62 VOL: 0
;PCODE: $00000A63 VOL: 0
;PCODE: $00000A64 VOL: 0
;PCODE: $00000A65 VOL: 0
; 0000 0571                     break;
;PCODE: $00000A66 VOL: 0
;PCODE: $00000A67 VOL: 0
; 0000 0572             default:escape_menu();
;PCODE: $00000A68 VOL: 0
;PCODE: $00000A69 VOL: 0
; 0000 0573                     break;
;PCODE: $00000A6A VOL: 0
; 0000 0574             }
;PCODE: $00000A6B VOL: 0
; 0000 0575         }
; 0000 0576 
; 0000 0577 
; 0000 0578 
; 0000 0579     }
;PCODE: $00000A6C VOL: 0
;PCODE: $00000A6D VOL: 0
; 0000 057A else if (cal_fl)         //zero setting for all 8 channels
;PCODE: $00000A6E VOL: 0
;PCODE: $00000A6F VOL: 0
;PCODE: $00000A70 VOL: 0
;PCODE: $00000A71 VOL: 0
;PCODE: $00000A72 VOL: 0
; 0000 057B     {
; 0000 057C     cal_zero[mux_scan]=adc3421_read();
;PCODE: $00000A73 VOL: 0
;PCODE: $00000A74 VOL: 0
;PCODE: $00000A75 VOL: 0
;PCODE: $00000A76 VOL: 0
;PCODE: $00000A77 VOL: 0
;PCODE: $00000A78 VOL: 0
;PCODE: $00000A79 VOL: 0
;PCODE: $00000A7A VOL: 0
; 0000 057D     ee_cal_zero[mux_scan]= cal_zero[mux_scan];
;PCODE: $00000A7B VOL: 0
;PCODE: $00000A7C VOL: 0
;PCODE: $00000A7D VOL: 0
;PCODE: $00000A7E VOL: 0
;PCODE: $00000A7F VOL: 0
;PCODE: $00000A80 VOL: 0
;PCODE: $00000A81 VOL: 0
;PCODE: $00000A82 VOL: 0
;PCODE: $00000A83 VOL: 0
;PCODE: $00000A84 VOL: 0
;PCODE: $00000A85 VOL: 0
;PCODE: $00000A86 VOL: 0
; 0000 057E     }
; 0000 057F else if (!menu_fl && !cal_fl && hold_fl)
;PCODE: $00000A87 VOL: 0
;PCODE: $00000A88 VOL: 0
;PCODE: $00000A89 VOL: 0
;PCODE: $00000A8A VOL: 0
;PCODE: $00000A8B VOL: 0
;PCODE: $00000A8C VOL: 0
;PCODE: $00000A8D VOL: 0
;PCODE: $00000A8E VOL: 0
;PCODE: $00000A8F VOL: 0
;PCODE: $00000A90 VOL: 0
;PCODE: $00000A91 VOL: 0
;PCODE: $00000A92 VOL: 0
;PCODE: $00000A93 VOL: 0
;PCODE: $00000A94 VOL: 0
;PCODE: $00000A95 VOL: 0
; 0000 0580             {
; 0000 0581         display_scan_cnt++;
;PCODE: $00000A96 VOL: 0
;PCODE: $00000A97 VOL: 0
;PCODE: $00000A98 VOL: 0
; 0000 0582         if (skip[display_scan_cnt]!=0 && display_scan_cnt <=8)
;PCODE: $00000A99 VOL: 0
;PCODE: $00000A9A VOL: 0
;PCODE: $00000A9B VOL: 0
;PCODE: $00000A9C VOL: 0
;PCODE: $00000A9D VOL: 0
;PCODE: $00000A9E VOL: 0
;PCODE: $00000A9F VOL: 0
;PCODE: $00000AA0 VOL: 0
;PCODE: $00000AA1 VOL: 0
;PCODE: $00000AA2 VOL: 0
;PCODE: $00000AA3 VOL: 0
;PCODE: $00000AA4 VOL: 0
;PCODE: $00000AA5 VOL: 0
;PCODE: $00000AA6 VOL: 0
; 0000 0583         goto bypass1;
;PCODE: $00000AA7 VOL: 0
; 0000 0584         if (display_scan_cnt >=8) display_scan_cnt =0;
;PCODE: $00000AA8 VOL: 0
;PCODE: $00000AA9 VOL: 0
;PCODE: $00000AAA VOL: 0
;PCODE: $00000AAB VOL: 0
;PCODE: $00000AAC VOL: 0
; 0000 0585         display_put(process_value[display_scan_cnt],display_scan_cnt+1,0,dummy,dummy2);
;PCODE: $00000AAD VOL: 0
;PCODE: $00000AAE VOL: 0
;PCODE: $00000AAF VOL: 0
;PCODE: $00000AB0 VOL: 0
;PCODE: $00000AB1 VOL: 0
;PCODE: $00000AB2 VOL: 0
;PCODE: $00000AB3 VOL: 0
;PCODE: $00000AB4 VOL: 0
;PCODE: $00000AB5 VOL: 0
;PCODE: $00000AB6 VOL: 0
;PCODE: $00000AB7 VOL: 0
;PCODE: $00000AB8 VOL: 0
;PCODE: $00000AB9 VOL: 0
;PCODE: $00000ABA VOL: 0
;PCODE: $00000ABB VOL: 0
;PCODE: $00000ABC VOL: 0
; 0000 0586         bypass1:
;PCODE: $00000ABD VOL: 0
; 0000 0587         }
; 0000 0588 }
;PCODE: $00000ABE VOL: 0
;PCODE: $00000ABF VOL: 0
;PCODE: $00000AC0 VOL: 0
;PCODE: $00000AC1 VOL: 0
;PCODE: $00000AC2 VOL: 0
;PCODE: $00000AC3 VOL: 0
;PCODE: $00000AC4 VOL: 0
;
;void dec_key(void)
; 0000 058B {
;PCODE: $00000AC5 VOL: 0
;PCODE: $00000AC6 VOL: 0
; 0000 058C int max_value,min_value;        // to determine maximum and minimum values for different inputs
; 0000 058D switch (input[item2])
;PCODE: $00000AC7 VOL: 0
;	max_value -> R16,R17
;	min_value -> R18,R19
;PCODE: $00000AC8 VOL: 0
;PCODE: $00000AC9 VOL: 0
;PCODE: $00000ACA VOL: 0
;PCODE: $00000ACB VOL: 0
;PCODE: $00000ACC VOL: 0
; 0000 058E     {
; 0000 058F     case 0: min_value = -1000;
;PCODE: $00000ACD VOL: 0
;PCODE: $00000ACE VOL: 0
;PCODE: $00000ACF VOL: 0
;PCODE: $00000AD0 VOL: 0
; 0000 0590             max_value = 6500;
;PCODE: $00000AD1 VOL: 0
;PCODE: $00000AD2 VOL: 0
; 0000 0591             break;
;PCODE: $00000AD3 VOL: 0
; 0000 0592     case 1: min_value = -100;
;PCODE: $00000AD4 VOL: 0
;PCODE: $00000AD5 VOL: 0
;PCODE: $00000AD6 VOL: 0
;PCODE: $00000AD7 VOL: 0
;PCODE: $00000AD8 VOL: 0
; 0000 0593             max_value = 650;
;PCODE: $00000AD9 VOL: 0
;PCODE: $00000ADA VOL: 0
; 0000 0594             break;
;PCODE: $00000ADB VOL: 0
; 0000 0595     case 2: min_value = 0;
;PCODE: $00000ADC VOL: 0
;PCODE: $00000ADD VOL: 0
;PCODE: $00000ADE VOL: 0
;PCODE: $00000ADF VOL: 0
;PCODE: $00000AE0 VOL: 0
; 0000 0596             max_value = 650;
;PCODE: $00000AE1 VOL: 0
;PCODE: $00000AE2 VOL: 0
; 0000 0597             break;
;PCODE: $00000AE3 VOL: 0
; 0000 0598     case 3: min_value = 0;
;PCODE: $00000AE4 VOL: 0
;PCODE: $00000AE5 VOL: 0
;PCODE: $00000AE6 VOL: 0
;PCODE: $00000AE7 VOL: 0
;PCODE: $00000AE8 VOL: 0
; 0000 0599             max_value = 1300;
;PCODE: $00000AE9 VOL: 0
;PCODE: $00000AEA VOL: 0
; 0000 059A             break;
;PCODE: $00000AEB VOL: 0
; 0000 059B     case 4: min_value = 0;
;PCODE: $00000AEC VOL: 0
;PCODE: $00000AED VOL: 0
;PCODE: $00000AEE VOL: 0
;PCODE: $00000AEF VOL: 0
;PCODE: $00000AF0 VOL: 0
; 0000 059C             max_value = 1700;
;PCODE: $00000AF1 VOL: 0
;PCODE: $00000AF2 VOL: 0
; 0000 059D             break;
;PCODE: $00000AF3 VOL: 0
; 0000 059E     case 5: min_value = 0;
;PCODE: $00000AF4 VOL: 0
;PCODE: $00000AF5 VOL: 0
;PCODE: $00000AF6 VOL: 0
;PCODE: $00000AF7 VOL: 0
;PCODE: $00000AF8 VOL: 0
; 0000 059F             max_value = 1700;
;PCODE: $00000AF9 VOL: 0
;PCODE: $00000AFA VOL: 0
; 0000 05A0             break;
;PCODE: $00000AFB VOL: 0
; 0000 05A1     case 6: min_value = -100;
;PCODE: $00000AFC VOL: 0
;PCODE: $00000AFD VOL: 0
;PCODE: $00000AFE VOL: 0
;PCODE: $00000AFF VOL: 0
;PCODE: $00000B00 VOL: 0
; 0000 05A2             max_value = 250;
;PCODE: $00000B01 VOL: 0
;PCODE: $00000B02 VOL: 0
; 0000 05A3             break;
;PCODE: $00000B03 VOL: 0
; 0000 05A4     case 7: min_value = -1999;
;PCODE: $00000B04 VOL: 0
;PCODE: $00000B05 VOL: 0
;PCODE: $00000B06 VOL: 0
;PCODE: $00000B07 VOL: 0
;PCODE: $00000B08 VOL: 0
; 0000 05A5             max_value = 9999;
;PCODE: $00000B09 VOL: 0
;PCODE: $00000B0A VOL: 0
; 0000 05A6             break;
;PCODE: $00000B0B VOL: 0
; 0000 05A7     case 8: min_value = -1999;
;PCODE: $00000B0C VOL: 0
;PCODE: $00000B0D VOL: 0
;PCODE: $00000B0E VOL: 0
;PCODE: $00000B0F VOL: 0
;PCODE: $00000B10 VOL: 0
; 0000 05A8             max_value = 9999;
;PCODE: $00000B11 VOL: 0
;PCODE: $00000B12 VOL: 0
; 0000 05A9             break;
;PCODE: $00000B13 VOL: 0
; 0000 05AA     }
;PCODE: $00000B14 VOL: 0
; 0000 05AB if (menu_fl &&!cal_fl)
;PCODE: $00000B15 VOL: 0
;PCODE: $00000B16 VOL: 0
;PCODE: $00000B17 VOL: 0
;PCODE: $00000B18 VOL: 0
;PCODE: $00000B19 VOL: 0
;PCODE: $00000B1A VOL: 0
;PCODE: $00000B1B VOL: 0
;PCODE: $00000B1C VOL: 0
;PCODE: $00000B1D VOL: 0
;PCODE: $00000B1E VOL: 0
; 0000 05AC     {
; 0000 05AD     if (level ==1)
;PCODE: $00000B1F VOL: 0
;PCODE: $00000B20 VOL: 0
;PCODE: $00000B21 VOL: 0
; 0000 05AE         {
; 0000 05AF         item1 --;
;PCODE: $00000B22 VOL: 0
;PCODE: $00000B23 VOL: 0
;PCODE: $00000B24 VOL: 0
;PCODE: $00000B25 VOL: 0
; 0000 05B0         if (item1<0) item1 =8;
;PCODE: $00000B26 VOL: 0
;PCODE: $00000B27 VOL: 0
;PCODE: $00000B28 VOL: 0
;PCODE: $00000B29 VOL: 0
;PCODE: $00000B2A VOL: 0
; 0000 05B1         }
;PCODE: $00000B2B VOL: 0
; 0000 05B2     else if (level ==2)
;PCODE: $00000B2C VOL: 0
;PCODE: $00000B2D VOL: 0
;PCODE: $00000B2E VOL: 0
;PCODE: $00000B2F VOL: 0
;PCODE: $00000B30 VOL: 0
; 0000 05B3         {
; 0000 05B4         switch (item1)
;PCODE: $00000B31 VOL: 0
; 0000 05B5             {
; 0000 05B6             case 0: if (item2==0) decrement_value(&gen[0],0,99,0);  //scan time
;PCODE: $00000B32 VOL: 0
;PCODE: $00000B33 VOL: 0
;PCODE: $00000B34 VOL: 0
;PCODE: $00000B35 VOL: 0
;PCODE: $00000B36 VOL: 0
;PCODE: $00000B37 VOL: 0
;PCODE: $00000B38 VOL: 0
;PCODE: $00000B39 VOL: 0
;PCODE: $00000B3A VOL: 0
;PCODE: $00000B3B VOL: 0
;PCODE: $00000B3C VOL: 0
;PCODE: $00000B3D VOL: 0
;PCODE: $00000B3E VOL: 0
;PCODE: $00000B3F VOL: 0
; 0000 05B7                     if(item2 ==1) decrement_value(&gen[1],1,242,blink_digit);//modbus id
;PCODE: $00000B40 VOL: 0
;PCODE: $00000B41 VOL: 0
;PCODE: $00000B42 VOL: 0
;PCODE: $00000B43 VOL: 0
;PCODE: $00000B44 VOL: 0
;PCODE: $00000B45 VOL: 0
;PCODE: $00000B46 VOL: 0
;PCODE: $00000B47 VOL: 0
;PCODE: $00000B48 VOL: 0
;PCODE: $00000B49 VOL: 0
;PCODE: $00000B4A VOL: 0
;PCODE: $00000B4B VOL: 0
;PCODE: $00000B4C VOL: 0
; 0000 05B8                     if (item2==2) decrement_value(&gen[2],0,3,0);   //baud rates 9600/19200/38400/115200
;PCODE: $00000B4D VOL: 0
;PCODE: $00000B4E VOL: 0
;PCODE: $00000B4F VOL: 0
;PCODE: $00000B50 VOL: 0
;PCODE: $00000B51 VOL: 0
;PCODE: $00000B52 VOL: 0
;PCODE: $00000B53 VOL: 0
;PCODE: $00000B54 VOL: 0
;PCODE: $00000B55 VOL: 0
;PCODE: $00000B56 VOL: 0
;PCODE: $00000B57 VOL: 0
;PCODE: $00000B58 VOL: 0
;PCODE: $00000B59 VOL: 0
;PCODE: $00000B5A VOL: 0
; 0000 05B9                     break;
;PCODE: $00000B5B VOL: 0
;PCODE: $00000B5C VOL: 0
; 0000 05BA             case 1: decrement_value(&os[item2],-999,999,blink_digit);   //offset
;PCODE: $00000B5D VOL: 0
;PCODE: $00000B5E VOL: 0
;PCODE: $00000B5F VOL: 0
;PCODE: $00000B60 VOL: 0
;PCODE: $00000B61 VOL: 0
;PCODE: $00000B62 VOL: 0
;PCODE: $00000B63 VOL: 0
;PCODE: $00000B64 VOL: 0
;PCODE: $00000B65 VOL: 0
;PCODE: $00000B66 VOL: 0
;PCODE: $00000B67 VOL: 0
;PCODE: $00000B68 VOL: 0
;PCODE: $00000B69 VOL: 0
;PCODE: $00000B6A VOL: 0
; 0000 05BB                     break;
;PCODE: $00000B6B VOL: 0
; 0000 05BC             case 2: decrement_value(&skip[item2],0,1,0);    //skip
;PCODE: $00000B6C VOL: 0
;PCODE: $00000B6D VOL: 0
;PCODE: $00000B6E VOL: 0
;PCODE: $00000B6F VOL: 0
;PCODE: $00000B70 VOL: 0
;PCODE: $00000B71 VOL: 0
;PCODE: $00000B72 VOL: 0
;PCODE: $00000B73 VOL: 0
;PCODE: $00000B74 VOL: 0
;PCODE: $00000B75 VOL: 0
;PCODE: $00000B76 VOL: 0
;PCODE: $00000B77 VOL: 0
;PCODE: $00000B78 VOL: 0
;PCODE: $00000B79 VOL: 0
;PCODE: $00000B7A VOL: 0
; 0000 05BD                     break;
;PCODE: $00000B7B VOL: 0
; 0000 05BE             case 3: decrement_value(&rlow[item2],min_value,max_value,blink_digit);    //rlow
;PCODE: $00000B7C VOL: 0
;PCODE: $00000B7D VOL: 0
;PCODE: $00000B7E VOL: 0
;PCODE: $00000B7F VOL: 0
;PCODE: $00000B80 VOL: 0
;PCODE: $00000B81 VOL: 0
;PCODE: $00000B82 VOL: 0
;PCODE: $00000B83 VOL: 0
;PCODE: $00000B84 VOL: 0
;PCODE: $00000B85 VOL: 0
;PCODE: $00000B86 VOL: 0
;PCODE: $00000B87 VOL: 0
; 0000 05BF                     break;
;PCODE: $00000B88 VOL: 0
; 0000 05C0             case 4: decrement_value(&rhigh[item2],min_value,max_value,blink_digit);   //rhigh
;PCODE: $00000B89 VOL: 0
;PCODE: $00000B8A VOL: 0
;PCODE: $00000B8B VOL: 0
;PCODE: $00000B8C VOL: 0
;PCODE: $00000B8D VOL: 0
;PCODE: $00000B8E VOL: 0
;PCODE: $00000B8F VOL: 0
;PCODE: $00000B90 VOL: 0
;PCODE: $00000B91 VOL: 0
;PCODE: $00000B92 VOL: 0
;PCODE: $00000B93 VOL: 0
;PCODE: $00000B94 VOL: 0
; 0000 05C1                     break;
;PCODE: $00000B95 VOL: 0
; 0000 05C2             case 5: decrement_value(&alow[item2],min_value,ahigh[item2],blink_digit);    //alow
;PCODE: $00000B96 VOL: 0
;PCODE: $00000B97 VOL: 0
;PCODE: $00000B98 VOL: 0
;PCODE: $00000B99 VOL: 0
;PCODE: $00000B9A VOL: 0
;PCODE: $00000B9B VOL: 0
;PCODE: $00000B9C VOL: 0
;PCODE: $00000B9D VOL: 0
;PCODE: $00000B9E VOL: 0
;PCODE: $00000B9F VOL: 0
;PCODE: $00000BA0 VOL: 0
;PCODE: $00000BA1 VOL: 0
;PCODE: $00000BA2 VOL: 0
;PCODE: $00000BA3 VOL: 0
;PCODE: $00000BA4 VOL: 0
;PCODE: $00000BA5 VOL: 0
;PCODE: $00000BA6 VOL: 0
; 0000 05C3                     break;
;PCODE: $00000BA7 VOL: 0
; 0000 05C4             case 6: decrement_value(&ahigh[item2],alow[item2],max_value,blink_digit);   //ahigh
;PCODE: $00000BA8 VOL: 0
;PCODE: $00000BA9 VOL: 0
;PCODE: $00000BAA VOL: 0
;PCODE: $00000BAB VOL: 0
;PCODE: $00000BAC VOL: 0
;PCODE: $00000BAD VOL: 0
;PCODE: $00000BAE VOL: 0
;PCODE: $00000BAF VOL: 0
;PCODE: $00000BB0 VOL: 0
;PCODE: $00000BB1 VOL: 0
;PCODE: $00000BB2 VOL: 0
;PCODE: $00000BB3 VOL: 0
;PCODE: $00000BB4 VOL: 0
;PCODE: $00000BB5 VOL: 0
;PCODE: $00000BB6 VOL: 0
;PCODE: $00000BB7 VOL: 0
;PCODE: $00000BB8 VOL: 0
; 0000 05C5                     break;
;PCODE: $00000BB9 VOL: 0
; 0000 05C6             case 7: decrement_value(&input[item2],0,8,0);     //input selection
;PCODE: $00000BBA VOL: 0
;PCODE: $00000BBB VOL: 0
;PCODE: $00000BBC VOL: 0
;PCODE: $00000BBD VOL: 0
;PCODE: $00000BBE VOL: 0
;PCODE: $00000BBF VOL: 0
;PCODE: $00000BC0 VOL: 0
;PCODE: $00000BC1 VOL: 0
;PCODE: $00000BC2 VOL: 0
;PCODE: $00000BC3 VOL: 0
;PCODE: $00000BC4 VOL: 0
;PCODE: $00000BC5 VOL: 0
;PCODE: $00000BC6 VOL: 0
;PCODE: $00000BC7 VOL: 0
;PCODE: $00000BC8 VOL: 0
; 0000 05C7                     break;
;PCODE: $00000BC9 VOL: 0
; 0000 05C8             case 8: if (input[item2]<7)
;PCODE: $00000BCA VOL: 0
;PCODE: $00000BCB VOL: 0
;PCODE: $00000BCC VOL: 0
;PCODE: $00000BCD VOL: 0
;PCODE: $00000BCE VOL: 0
;PCODE: $00000BCF VOL: 0
;PCODE: $00000BD0 VOL: 0
;PCODE: $00000BD1 VOL: 0
;PCODE: $00000BD2 VOL: 0
;PCODE: $00000BD3 VOL: 0
; 0000 05C9                         decrement_value(&dp[item2],3,3,0);       //decimal point selection for temperature
;PCODE: $00000BD4 VOL: 0
;PCODE: $00000BD5 VOL: 0
;PCODE: $00000BD6 VOL: 0
;PCODE: $00000BD7 VOL: 0
;PCODE: $00000BD8 VOL: 0
;PCODE: $00000BD9 VOL: 0
;PCODE: $00000BDA VOL: 0
;PCODE: $00000BDB VOL: 0
;PCODE: $00000BDC VOL: 0
;PCODE: $00000BDD VOL: 0
;PCODE: $00000BDE VOL: 0
;PCODE: $00000BDF VOL: 0
; 0000 05CA                     else
;PCODE: $00000BE0 VOL: 0
;PCODE: $00000BE1 VOL: 0
; 0000 05CB                         decrement_value(&dp[item2],0,3,0);       //decimal point selection for voltage and current
;PCODE: $00000BE2 VOL: 0
;PCODE: $00000BE3 VOL: 0
;PCODE: $00000BE4 VOL: 0
;PCODE: $00000BE5 VOL: 0
;PCODE: $00000BE6 VOL: 0
;PCODE: $00000BE7 VOL: 0
;PCODE: $00000BE8 VOL: 0
;PCODE: $00000BE9 VOL: 0
;PCODE: $00000BEA VOL: 0
;PCODE: $00000BEB VOL: 0
;PCODE: $00000BEC VOL: 0
;PCODE: $00000BED VOL: 0
; 0000 05CC                     break;
;PCODE: $00000BEE VOL: 0
;PCODE: $00000BEF VOL: 0
; 0000 05CD 
; 0000 05CE             default:escape_menu();
;PCODE: $00000BF0 VOL: 0
;PCODE: $00000BF1 VOL: 0
; 0000 05CF                     break;
;PCODE: $00000BF2 VOL: 0
; 0000 05D0             }
;PCODE: $00000BF3 VOL: 0
; 0000 05D1         }
; 0000 05D2 
; 0000 05D3 
; 0000 05D4 
; 0000 05D5     }
;PCODE: $00000BF4 VOL: 0
;PCODE: $00000BF5 VOL: 0
; 0000 05D6 else if (cal_fl)
;PCODE: $00000BF6 VOL: 0
;PCODE: $00000BF7 VOL: 0
;PCODE: $00000BF8 VOL: 0
;PCODE: $00000BF9 VOL: 0
;PCODE: $00000BFA VOL: 0
; 0000 05D7     {
; 0000 05D8     cal_span[mux_scan]=adc3421_read();
;PCODE: $00000BFB VOL: 0
;PCODE: $00000BFC VOL: 0
;PCODE: $00000BFD VOL: 0
;PCODE: $00000BFE VOL: 0
;PCODE: $00000BFF VOL: 0
;PCODE: $00000C00 VOL: 0
;PCODE: $00000C01 VOL: 0
;PCODE: $00000C02 VOL: 0
; 0000 05D9     ee_cal_span[mux_scan] = cal_span[mux_scan];
;PCODE: $00000C03 VOL: 0
;PCODE: $00000C04 VOL: 0
;PCODE: $00000C05 VOL: 0
;PCODE: $00000C06 VOL: 0
;PCODE: $00000C07 VOL: 0
;PCODE: $00000C08 VOL: 0
;PCODE: $00000C09 VOL: 0
;PCODE: $00000C0A VOL: 0
;PCODE: $00000C0B VOL: 0
;PCODE: $00000C0C VOL: 0
;PCODE: $00000C0D VOL: 0
;PCODE: $00000C0E VOL: 0
; 0000 05DA     }
; 0000 05DB }
;PCODE: $00000C0F VOL: 0
;PCODE: $00000C10 VOL: 0
;PCODE: $00000C11 VOL: 0
;PCODE: $00000C12 VOL: 0
;PCODE: $00000C13 VOL: 0
;PCODE: $00000C14 VOL: 0
;
;void shf_key(void)
; 0000 05DE {
;PCODE: $00000C15 VOL: 0
;PCODE: $00000C16 VOL: 0
; 0000 05DF     if (!menu_fl && !cal_fl) hold_fl = ~hold_fl; //toggle hold scan flag
;PCODE: $00000C17 VOL: 0
;PCODE: $00000C18 VOL: 0
;PCODE: $00000C19 VOL: 0
;PCODE: $00000C1A VOL: 0
;PCODE: $00000C1B VOL: 0
;PCODE: $00000C1C VOL: 0
;PCODE: $00000C1D VOL: 0
;PCODE: $00000C1E VOL: 0
;PCODE: $00000C1F VOL: 0
;PCODE: $00000C20 VOL: 0
;PCODE: $00000C21 VOL: 0
;PCODE: $00000C22 VOL: 0
;PCODE: $00000C23 VOL: 0
; 0000 05E0     if (blink_flag)
;PCODE: $00000C24 VOL: 0
;PCODE: $00000C25 VOL: 0
;PCODE: $00000C26 VOL: 0
;PCODE: $00000C27 VOL: 0
; 0000 05E1     blink_digit++;
;PCODE: $00000C28 VOL: 0
;PCODE: $00000C29 VOL: 0
;PCODE: $00000C2A VOL: 0
;PCODE: $00000C2B VOL: 0
; 0000 05E2     if (blink_digit > 3)
;PCODE: $00000C2C VOL: 0
;PCODE: $00000C2D VOL: 0
;PCODE: $00000C2E VOL: 0
;PCODE: $00000C2F VOL: 0
; 0000 05E3     blink_digit=0;
;PCODE: $00000C30 VOL: 0
;PCODE: $00000C31 VOL: 0
; 0000 05E4 }
;PCODE: $00000C32 VOL: 0
;PCODE: $00000C33 VOL: 0
;PCODE: $00000C34 VOL: 0
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 05E8 {
;PCODE: $00000C35 VOL: 0
;PCODE: $00000C36 VOL: 0
; 0000 05E9 // Reinitialize Timer1 value
; 0000 05EA TCNT1H=0xABA0 >> 8;
;PCODE: $00000C37 VOL: 0
;PCODE: $00000C38 VOL: 0
; 0000 05EB TCNT1L=0xABA0 & 0xff;
;PCODE: $00000C39 VOL: 0
;PCODE: $00000C3A VOL: 0
; 0000 05EC // Place your code here
; 0000 05ED qsecfl = ~qsecfl;
;PCODE: $00000C3B VOL: 0
;PCODE: $00000C3C VOL: 0
;PCODE: $00000C3D VOL: 0
; 0000 05EE hsec_fl =1;
;PCODE: $00000C3E VOL: 0
;PCODE: $00000C3F VOL: 0
;PCODE: $00000C40 VOL: 0
; 0000 05EF blinking = ~blinking;
;PCODE: $00000C41 VOL: 0
;PCODE: $00000C42 VOL: 0
;PCODE: $00000C43 VOL: 0
; 0000 05F0 tsec_cnt++;
;PCODE: $00000C44 VOL: 0
;PCODE: $00000C45 VOL: 0
;PCODE: $00000C46 VOL: 0
;PCODE: $00000C47 VOL: 0
; 0000 05F1 if (tsec_cnt >=(2*gen[0])) //scan time in seconds
;PCODE: $00000C48 VOL: 0
;PCODE: $00000C49 VOL: 0
;PCODE: $00000C4A VOL: 0
;PCODE: $00000C4B VOL: 0
;PCODE: $00000C4C VOL: 0
; 0000 05F2     {
; 0000 05F3     tsec_fl =1;
;PCODE: $00000C4D VOL: 0
;PCODE: $00000C4E VOL: 0
;PCODE: $00000C4F VOL: 0
; 0000 05F4     tsec_cnt =0;
;PCODE: $00000C50 VOL: 0
;PCODE: $00000C51 VOL: 0
; 0000 05F5     ser_fl =1;
;PCODE: $00000C52 VOL: 0
;PCODE: $00000C53 VOL: 0
;PCODE: $00000C54 VOL: 0
; 0000 05F6     }
; 0000 05F7 
; 0000 05F8 
; 0000 05F9 }
;PCODE: $00000C55 VOL: 0
;PCODE: $00000C56 VOL: 0
;PCODE: $00000C57 VOL: 0
;PCODE: $00000C58 VOL: 0
;
;
;
;
;void led_check(void)
; 0000 05FF {
;PCODE: $00000C59 VOL: 0
;PCODE: $00000C5A VOL: 0
; 0000 0600 all_led_off();
;PCODE: $00000C5B VOL: 0
;PCODE: $00000C5C VOL: 0
; 0000 0601 all_led_off1();
;PCODE: $00000C5D VOL: 0
;PCODE: $00000C5E VOL: 0
; 0000 0602 if (process_value[0] <= alow[0])
;PCODE: $00000C5F VOL: 0
;PCODE: $00000C60 VOL: 0
;PCODE: $00000C61 VOL: 0
;PCODE: $00000C62 VOL: 0
; 0000 0603 gled1_on();
;PCODE: $00000C63 VOL: 0
;PCODE: $00000C64 VOL: 0
;PCODE: $00000C65 VOL: 0
; 0000 0604 if (process_value[0] >= ahigh[0])
;PCODE: $00000C66 VOL: 0
;PCODE: $00000C67 VOL: 0
;PCODE: $00000C68 VOL: 0
;PCODE: $00000C69 VOL: 0
;PCODE: $00000C6A VOL: 0
; 0000 0605 rled1_on();
;PCODE: $00000C6B VOL: 0
;PCODE: $00000C6C VOL: 0
;PCODE: $00000C6D VOL: 0
; 0000 0606     if (process_error[0] ==1)
;PCODE: $00000C6E VOL: 0
;PCODE: $00000C6F VOL: 0
;PCODE: $00000C70 VOL: 0
;PCODE: $00000C71 VOL: 0
; 0000 0607         {
; 0000 0608         gled1_on();
;PCODE: $00000C72 VOL: 0
;PCODE: $00000C73 VOL: 0
;PCODE: $00000C74 VOL: 0
; 0000 0609         rled1_on();
;PCODE: $00000C75 VOL: 0
;PCODE: $00000C76 VOL: 0
;PCODE: $00000C77 VOL: 0
; 0000 060A         }
; 0000 060B 
; 0000 060C if (skip[1] ==0)
;PCODE: $00000C78 VOL: 0
;PCODE: $00000C79 VOL: 0
;PCODE: $00000C7A VOL: 0
;PCODE: $00000C7B VOL: 0
;PCODE: $00000C7C VOL: 0
; 0000 060D     {
; 0000 060E     if (process_value[1] <= alow[1])
;PCODE: $00000C7D VOL: 0
;PCODE: $00000C7E VOL: 0
;PCODE: $00000C7F VOL: 0
;PCODE: $00000C80 VOL: 0
;PCODE: $00000C81 VOL: 0
;PCODE: $00000C82 VOL: 0
; 0000 060F     gled2_on();
;PCODE: $00000C83 VOL: 0
;PCODE: $00000C84 VOL: 0
;PCODE: $00000C85 VOL: 0
; 0000 0610     if (process_value[1] >= ahigh[1])
;PCODE: $00000C86 VOL: 0
;PCODE: $00000C87 VOL: 0
;PCODE: $00000C88 VOL: 0
;PCODE: $00000C89 VOL: 0
;PCODE: $00000C8A VOL: 0
;PCODE: $00000C8B VOL: 0
;PCODE: $00000C8C VOL: 0
; 0000 0611     rled2_on();
;PCODE: $00000C8D VOL: 0
;PCODE: $00000C8E VOL: 0
;PCODE: $00000C8F VOL: 0
; 0000 0612     if (process_error[1] ==1)
;PCODE: $00000C90 VOL: 0
;PCODE: $00000C91 VOL: 0
;PCODE: $00000C92 VOL: 0
;PCODE: $00000C93 VOL: 0
;PCODE: $00000C94 VOL: 0
; 0000 0613         {
; 0000 0614         gled2_on();
;PCODE: $00000C95 VOL: 0
;PCODE: $00000C96 VOL: 0
;PCODE: $00000C97 VOL: 0
; 0000 0615         rled2_on();
;PCODE: $00000C98 VOL: 0
;PCODE: $00000C99 VOL: 0
;PCODE: $00000C9A VOL: 0
; 0000 0616         }
; 0000 0617     }
;PCODE: $00000C9B VOL: 0
; 0000 0618 if (skip[2] ==0)
;PCODE: $00000C9C VOL: 0
;PCODE: $00000C9D VOL: 0
;PCODE: $00000C9E VOL: 0
;PCODE: $00000C9F VOL: 0
;PCODE: $00000CA0 VOL: 0
; 0000 0619     {
; 0000 061A     if (process_value[2] <= alow[2])
;PCODE: $00000CA1 VOL: 0
;PCODE: $00000CA2 VOL: 0
;PCODE: $00000CA3 VOL: 0
;PCODE: $00000CA4 VOL: 0
;PCODE: $00000CA5 VOL: 0
;PCODE: $00000CA6 VOL: 0
; 0000 061B     gled3_on();
;PCODE: $00000CA7 VOL: 0
;PCODE: $00000CA8 VOL: 0
;PCODE: $00000CA9 VOL: 0
; 0000 061C     if (process_value[2] >= ahigh[2])
;PCODE: $00000CAA VOL: 0
;PCODE: $00000CAB VOL: 0
;PCODE: $00000CAC VOL: 0
;PCODE: $00000CAD VOL: 0
;PCODE: $00000CAE VOL: 0
;PCODE: $00000CAF VOL: 0
;PCODE: $00000CB0 VOL: 0
; 0000 061D     rled3_on();
;PCODE: $00000CB1 VOL: 0
;PCODE: $00000CB2 VOL: 0
;PCODE: $00000CB3 VOL: 0
; 0000 061E     if (process_error[2] ==1)
;PCODE: $00000CB4 VOL: 0
;PCODE: $00000CB5 VOL: 0
;PCODE: $00000CB6 VOL: 0
;PCODE: $00000CB7 VOL: 0
;PCODE: $00000CB8 VOL: 0
; 0000 061F         {
; 0000 0620         gled3_on();
;PCODE: $00000CB9 VOL: 0
;PCODE: $00000CBA VOL: 0
;PCODE: $00000CBB VOL: 0
; 0000 0621         rled3_on();
;PCODE: $00000CBC VOL: 0
;PCODE: $00000CBD VOL: 0
;PCODE: $00000CBE VOL: 0
; 0000 0622         }
; 0000 0623     }
;PCODE: $00000CBF VOL: 0
; 0000 0624 if (skip[3] ==0)
;PCODE: $00000CC0 VOL: 0
;PCODE: $00000CC1 VOL: 0
;PCODE: $00000CC2 VOL: 0
;PCODE: $00000CC3 VOL: 0
;PCODE: $00000CC4 VOL: 0
; 0000 0625     {
; 0000 0626     if (process_value[3] <= alow[3])
;PCODE: $00000CC5 VOL: 0
;PCODE: $00000CC6 VOL: 0
;PCODE: $00000CC7 VOL: 0
;PCODE: $00000CC8 VOL: 0
;PCODE: $00000CC9 VOL: 0
;PCODE: $00000CCA VOL: 0
; 0000 0627     gled4_on();
;PCODE: $00000CCB VOL: 0
;PCODE: $00000CCC VOL: 0
;PCODE: $00000CCD VOL: 0
; 0000 0628     if (process_value[3] >= ahigh[3])
;PCODE: $00000CCE VOL: 0
;PCODE: $00000CCF VOL: 0
;PCODE: $00000CD0 VOL: 0
;PCODE: $00000CD1 VOL: 0
;PCODE: $00000CD2 VOL: 0
;PCODE: $00000CD3 VOL: 0
;PCODE: $00000CD4 VOL: 0
; 0000 0629     rled4_on();
;PCODE: $00000CD5 VOL: 0
;PCODE: $00000CD6 VOL: 0
;PCODE: $00000CD7 VOL: 0
; 0000 062A     if (process_error[3] ==1)
;PCODE: $00000CD8 VOL: 0
;PCODE: $00000CD9 VOL: 0
;PCODE: $00000CDA VOL: 0
;PCODE: $00000CDB VOL: 0
;PCODE: $00000CDC VOL: 0
; 0000 062B         {
; 0000 062C         gled4_on();
;PCODE: $00000CDD VOL: 0
;PCODE: $00000CDE VOL: 0
;PCODE: $00000CDF VOL: 0
; 0000 062D         rled4_on();
;PCODE: $00000CE0 VOL: 0
;PCODE: $00000CE1 VOL: 0
;PCODE: $00000CE2 VOL: 0
; 0000 062E         }
; 0000 062F 
; 0000 0630     }
;PCODE: $00000CE3 VOL: 0
; 0000 0631 if (skip[4] ==0)
;PCODE: $00000CE4 VOL: 0
;PCODE: $00000CE5 VOL: 0
;PCODE: $00000CE6 VOL: 0
;PCODE: $00000CE7 VOL: 0
;PCODE: $00000CE8 VOL: 0
; 0000 0632     {
; 0000 0633     if (process_value[4] <= alow[4])
;PCODE: $00000CE9 VOL: 0
;PCODE: $00000CEA VOL: 0
;PCODE: $00000CEB VOL: 0
;PCODE: $00000CEC VOL: 0
;PCODE: $00000CED VOL: 0
;PCODE: $00000CEE VOL: 0
; 0000 0634     gled5_on();
;PCODE: $00000CEF VOL: 0
;PCODE: $00000CF0 VOL: 0
;PCODE: $00000CF1 VOL: 0
; 0000 0635     if (process_value[4] >= ahigh[4])
;PCODE: $00000CF2 VOL: 0
;PCODE: $00000CF3 VOL: 0
;PCODE: $00000CF4 VOL: 0
;PCODE: $00000CF5 VOL: 0
;PCODE: $00000CF6 VOL: 0
;PCODE: $00000CF7 VOL: 0
;PCODE: $00000CF8 VOL: 0
; 0000 0636     rled5_on();
;PCODE: $00000CF9 VOL: 0
;PCODE: $00000CFA VOL: 0
;PCODE: $00000CFB VOL: 0
; 0000 0637     if (process_error[4] ==1)
;PCODE: $00000CFC VOL: 0
;PCODE: $00000CFD VOL: 0
;PCODE: $00000CFE VOL: 0
;PCODE: $00000CFF VOL: 0
;PCODE: $00000D00 VOL: 0
; 0000 0638         {
; 0000 0639         gled5_on();
;PCODE: $00000D01 VOL: 0
;PCODE: $00000D02 VOL: 0
;PCODE: $00000D03 VOL: 0
; 0000 063A         rled5_on();
;PCODE: $00000D04 VOL: 0
;PCODE: $00000D05 VOL: 0
;PCODE: $00000D06 VOL: 0
; 0000 063B         }    }
;PCODE: $00000D07 VOL: 0
; 0000 063C if (skip[5] ==0)
;PCODE: $00000D08 VOL: 0
;PCODE: $00000D09 VOL: 0
;PCODE: $00000D0A VOL: 0
;PCODE: $00000D0B VOL: 0
;PCODE: $00000D0C VOL: 0
; 0000 063D     {
; 0000 063E     if (process_value[5] <= alow[5])
;PCODE: $00000D0D VOL: 0
;PCODE: $00000D0E VOL: 0
;PCODE: $00000D0F VOL: 0
;PCODE: $00000D10 VOL: 0
;PCODE: $00000D11 VOL: 0
;PCODE: $00000D12 VOL: 0
; 0000 063F     gled6_on();
;PCODE: $00000D13 VOL: 0
;PCODE: $00000D14 VOL: 0
;PCODE: $00000D15 VOL: 0
; 0000 0640     if (process_value[5] >= ahigh[5])
;PCODE: $00000D16 VOL: 0
;PCODE: $00000D17 VOL: 0
;PCODE: $00000D18 VOL: 0
;PCODE: $00000D19 VOL: 0
;PCODE: $00000D1A VOL: 0
;PCODE: $00000D1B VOL: 0
;PCODE: $00000D1C VOL: 0
; 0000 0641     rled6_on();
;PCODE: $00000D1D VOL: 0
;PCODE: $00000D1E VOL: 0
;PCODE: $00000D1F VOL: 0
; 0000 0642     if (process_error[5] ==1)
;PCODE: $00000D20 VOL: 0
;PCODE: $00000D21 VOL: 0
;PCODE: $00000D22 VOL: 0
;PCODE: $00000D23 VOL: 0
;PCODE: $00000D24 VOL: 0
; 0000 0643         {
; 0000 0644         gled6_on();
;PCODE: $00000D25 VOL: 0
;PCODE: $00000D26 VOL: 0
;PCODE: $00000D27 VOL: 0
; 0000 0645         rled6_on();
;PCODE: $00000D28 VOL: 0
;PCODE: $00000D29 VOL: 0
;PCODE: $00000D2A VOL: 0
; 0000 0646         }    }
;PCODE: $00000D2B VOL: 0
; 0000 0647 if (skip[6] ==0)
;PCODE: $00000D2C VOL: 0
;PCODE: $00000D2D VOL: 0
;PCODE: $00000D2E VOL: 0
;PCODE: $00000D2F VOL: 0
;PCODE: $00000D30 VOL: 0
; 0000 0648     {
; 0000 0649     if (process_value[6] <= alow[6])
;PCODE: $00000D31 VOL: 0
;PCODE: $00000D32 VOL: 0
;PCODE: $00000D33 VOL: 0
;PCODE: $00000D34 VOL: 0
;PCODE: $00000D35 VOL: 0
;PCODE: $00000D36 VOL: 0
; 0000 064A     gled7_on();
;PCODE: $00000D37 VOL: 0
;PCODE: $00000D38 VOL: 0
;PCODE: $00000D39 VOL: 0
; 0000 064B     if (process_value[6] >= ahigh[6])
;PCODE: $00000D3A VOL: 0
;PCODE: $00000D3B VOL: 0
;PCODE: $00000D3C VOL: 0
;PCODE: $00000D3D VOL: 0
;PCODE: $00000D3E VOL: 0
;PCODE: $00000D3F VOL: 0
;PCODE: $00000D40 VOL: 0
; 0000 064C     rled7_on();
;PCODE: $00000D41 VOL: 0
;PCODE: $00000D42 VOL: 0
;PCODE: $00000D43 VOL: 0
; 0000 064D     if (process_error[6] ==1)
;PCODE: $00000D44 VOL: 0
;PCODE: $00000D45 VOL: 0
;PCODE: $00000D46 VOL: 0
;PCODE: $00000D47 VOL: 0
;PCODE: $00000D48 VOL: 0
; 0000 064E         {
; 0000 064F         gled7_on();
;PCODE: $00000D49 VOL: 0
;PCODE: $00000D4A VOL: 0
;PCODE: $00000D4B VOL: 0
; 0000 0650         rled7_on();
;PCODE: $00000D4C VOL: 0
;PCODE: $00000D4D VOL: 0
;PCODE: $00000D4E VOL: 0
; 0000 0651         }    }
;PCODE: $00000D4F VOL: 0
; 0000 0652 if (skip[7] ==0)
;PCODE: $00000D50 VOL: 0
;PCODE: $00000D51 VOL: 0
;PCODE: $00000D52 VOL: 0
;PCODE: $00000D53 VOL: 0
;PCODE: $00000D54 VOL: 0
; 0000 0653     {
; 0000 0654     if (process_value[7] <= alow[7])
;PCODE: $00000D55 VOL: 0
;PCODE: $00000D56 VOL: 0
;PCODE: $00000D57 VOL: 0
;PCODE: $00000D58 VOL: 0
;PCODE: $00000D59 VOL: 0
;PCODE: $00000D5A VOL: 0
; 0000 0655     gled8_on();
;PCODE: $00000D5B VOL: 0
;PCODE: $00000D5C VOL: 0
;PCODE: $00000D5D VOL: 0
; 0000 0656     if (process_value[7] >= ahigh[7])
;PCODE: $00000D5E VOL: 0
;PCODE: $00000D5F VOL: 0
;PCODE: $00000D60 VOL: 0
;PCODE: $00000D61 VOL: 0
;PCODE: $00000D62 VOL: 0
;PCODE: $00000D63 VOL: 0
;PCODE: $00000D64 VOL: 0
; 0000 0657     rled8_on();
;PCODE: $00000D65 VOL: 0
;PCODE: $00000D66 VOL: 0
;PCODE: $00000D67 VOL: 0
; 0000 0658     if (process_error[7] ==1)
;PCODE: $00000D68 VOL: 0
;PCODE: $00000D69 VOL: 0
;PCODE: $00000D6A VOL: 0
;PCODE: $00000D6B VOL: 0
;PCODE: $00000D6C VOL: 0
; 0000 0659         {
; 0000 065A         gled8_on();
;PCODE: $00000D6D VOL: 0
;PCODE: $00000D6E VOL: 0
;PCODE: $00000D6F VOL: 0
; 0000 065B         rled8_on();
;PCODE: $00000D70 VOL: 0
;PCODE: $00000D71 VOL: 0
;PCODE: $00000D72 VOL: 0
; 0000 065C         }
; 0000 065D     }
;PCODE: $00000D73 VOL: 0
; 0000 065E }
;PCODE: $00000D74 VOL: 0
;PCODE: $00000D75 VOL: 0
;PCODE: $00000D76 VOL: 0
;
;void relay_logic()
; 0000 0661 {
;PCODE: $00000D77 VOL: 0
;PCODE: $00000D78 VOL: 0
; 0000 0662 if (led_status ==0xff)
;PCODE: $00000D79 VOL: 0
;PCODE: $00000D7A VOL: 0
;PCODE: $00000D7B VOL: 0
; 0000 0663 relay1 =1;
;PCODE: $00000D7C VOL: 0
;PCODE: $00000D7D VOL: 0
; 0000 0664 else
;PCODE: $00000D7E VOL: 0
;PCODE: $00000D7F VOL: 0
; 0000 0665 relay1 =0;
;PCODE: $00000D80 VOL: 0
;PCODE: $00000D81 VOL: 0
; 0000 0666 
; 0000 0667 if (led_status1 ==0xff)
;PCODE: $00000D82 VOL: 0
;PCODE: $00000D83 VOL: 0
;PCODE: $00000D84 VOL: 0
;PCODE: $00000D85 VOL: 0
; 0000 0668 relay2 =1;
;PCODE: $00000D86 VOL: 0
;PCODE: $00000D87 VOL: 0
; 0000 0669 else
;PCODE: $00000D88 VOL: 0
;PCODE: $00000D89 VOL: 0
; 0000 066A relay2 =0;
;PCODE: $00000D8A VOL: 0
;PCODE: $00000D8B VOL: 0
; 0000 066B }
;PCODE: $00000D8C VOL: 0
;PCODE: $00000D8D VOL: 0
;PCODE: $00000D8E VOL: 0
;
;void pv_update(void)
; 0000 066E {
;PCODE: $00000D8F VOL: 0
;PCODE: $00000D90 VOL: 0
; 0000 066F int adc_value,min_val,max_val;
; 0000 0670 if (!cal_fl)
;PCODE: $00000D91 VOL: 0
;	adc_value -> R16,R17
;	min_val -> R18,R19
;	max_val -> R20,R21
;PCODE: $00000D92 VOL: 0
;PCODE: $00000D93 VOL: 0
;PCODE: $00000D94 VOL: 0
; 0000 0671 {
; 0000 0672 adc_value=adc3421_read();
;PCODE: $00000D95 VOL: 0
;PCODE: $00000D96 VOL: 0
; 0000 0673 if (mux_scan ==7 && tc_fl)  //added to calculate ambient value
;PCODE: $00000D97 VOL: 0
;PCODE: $00000D98 VOL: 0
;PCODE: $00000D99 VOL: 0
;PCODE: $00000D9A VOL: 0
;PCODE: $00000D9B VOL: 0
;PCODE: $00000D9C VOL: 0
;PCODE: $00000D9D VOL: 0
;PCODE: $00000D9E VOL: 0
;PCODE: $00000D9F VOL: 0
;PCODE: $00000DA0 VOL: 0
; 0000 0674 {
; 0000 0675 if ( adc_value >= cal_zero[7])
;PCODE: $00000DA1 VOL: 0
;PCODE: $00000DA2 VOL: 0
;PCODE: $00000DA3 VOL: 0
;PCODE: $00000DA4 VOL: 0
; 0000 0676 {
; 0000 0677 ambient_val = rhigh[7] + (adc_value - cal_zero[7])/22;
;PCODE: $00000DA5 VOL: 0
;PCODE: $00000DA6 VOL: 0
;PCODE: $00000DA7 VOL: 0
;PCODE: $00000DA8 VOL: 0
;PCODE: $00000DA9 VOL: 0
;PCODE: $00000DAA VOL: 0
;PCODE: $00000DAB VOL: 0
;PCODE: $00000DAC VOL: 0
;PCODE: $00000DAD VOL: 0
;PCODE: $00000DAE VOL: 0
;PCODE: $00000DAF VOL: 0
; 0000 0678 }
; 0000 0679 else
;PCODE: $00000DB0 VOL: 0
;PCODE: $00000DB1 VOL: 0
; 0000 067A {
; 0000 067B ambient_val = rhigh[7] - (adc_value - cal_zero[7])/22;
;PCODE: $00000DB2 VOL: 0
;PCODE: $00000DB3 VOL: 0
;PCODE: $00000DB4 VOL: 0
;PCODE: $00000DB5 VOL: 0
;PCODE: $00000DB6 VOL: 0
;PCODE: $00000DB7 VOL: 0
;PCODE: $00000DB8 VOL: 0
;PCODE: $00000DB9 VOL: 0
;PCODE: $00000DBA VOL: 0
;PCODE: $00000DBB VOL: 0
;PCODE: $00000DBC VOL: 0
; 0000 067C }
;PCODE: $00000DBD VOL: 0
; 0000 067D 
; 0000 067E 
; 0000 067F }
; 0000 0680 else
;PCODE: $00000DBE VOL: 0
;PCODE: $00000DBF VOL: 0
; 0000 0681 {
; 0000 0682 //process_value[mux_scan] = ((long)adc_value -(long)cal_zero[mux_scan]) * 10000 / ((long)cal_span[mux_scan]- (long)cal_z ...
; 0000 0683 switch (input[mux_scan])
;PCODE: $00000DC0 VOL: 0
;PCODE: $00000DC1 VOL: 0
;PCODE: $00000DC2 VOL: 0
;PCODE: $00000DC3 VOL: 0
;PCODE: $00000DC4 VOL: 0
; 0000 0684     {
; 0000 0685     case 0: process_value[mux_scan] = linearise_p(adc_value,cal_zero[mux_scan],cal_span[mux_scan]);
;PCODE: $00000DC5 VOL: 0
;PCODE: $00000DC6 VOL: 0
;PCODE: $00000DC7 VOL: 0
;PCODE: $00000DC8 VOL: 0
;PCODE: $00000DC9 VOL: 0
;PCODE: $00000DCA VOL: 0
;PCODE: $00000DCB VOL: 0
;PCODE: $00000DCC VOL: 0
;PCODE: $00000DCD VOL: 0
;PCODE: $00000DCE VOL: 0
;PCODE: $00000DCF VOL: 0
;PCODE: $00000DD0 VOL: 0
;PCODE: $00000DD1 VOL: 0
;PCODE: $00000DD2 VOL: 0
;PCODE: $00000DD3 VOL: 0
;PCODE: $00000DD4 VOL: 0
;PCODE: $00000DD5 VOL: 0
;PCODE: $00000DD6 VOL: 0
;PCODE: $00000DD7 VOL: 0
;PCODE: $00000DD8 VOL: 0
;PCODE: $00000DD9 VOL: 0
;PCODE: $00000DDA VOL: 0
;PCODE: $00000DDB VOL: 0
;PCODE: $00000DDC VOL: 0
;PCODE: $00000DDD VOL: 0
;PCODE: $00000DDE VOL: 0
;PCODE: $00000DDF VOL: 0
; 0000 0686             min_val = -1999;
;PCODE: $00000DE0 VOL: 0
;PCODE: $00000DE1 VOL: 0
; 0000 0687             max_val = 6000;
;PCODE: $00000DE2 VOL: 0
;PCODE: $00000DE3 VOL: 0
; 0000 0688             break;
;PCODE: $00000DE4 VOL: 0
; 0000 0689     case 1: process_value[mux_scan] = linearise_p(adc_value,cal_zero[mux_scan],cal_span[mux_scan])/10;
;PCODE: $00000DE5 VOL: 0
;PCODE: $00000DE6 VOL: 0
;PCODE: $00000DE7 VOL: 0
;PCODE: $00000DE8 VOL: 0
;PCODE: $00000DE9 VOL: 0
;PCODE: $00000DEA VOL: 0
;PCODE: $00000DEB VOL: 0
;PCODE: $00000DEC VOL: 0
;PCODE: $00000DED VOL: 0
;PCODE: $00000DEE VOL: 0
;PCODE: $00000DEF VOL: 0
;PCODE: $00000DF0 VOL: 0
;PCODE: $00000DF1 VOL: 0
;PCODE: $00000DF2 VOL: 0
;PCODE: $00000DF3 VOL: 0
;PCODE: $00000DF4 VOL: 0
;PCODE: $00000DF5 VOL: 0
;PCODE: $00000DF6 VOL: 0
;PCODE: $00000DF7 VOL: 0
;PCODE: $00000DF8 VOL: 0
;PCODE: $00000DF9 VOL: 0
;PCODE: $00000DFA VOL: 0
;PCODE: $00000DFB VOL: 0
;PCODE: $00000DFC VOL: 0
;PCODE: $00000DFD VOL: 0
;PCODE: $00000DFE VOL: 0
;PCODE: $00000DFF VOL: 0
;PCODE: $00000E00 VOL: 0
;PCODE: $00000E01 VOL: 0
;PCODE: $00000E02 VOL: 0
;PCODE: $00000E03 VOL: 0
; 0000 068A             min_val = -199;
;PCODE: $00000E04 VOL: 0
;PCODE: $00000E05 VOL: 0
; 0000 068B             max_val = 600;
;PCODE: $00000E06 VOL: 0
;PCODE: $00000E07 VOL: 0
; 0000 068C             break;
;PCODE: $00000E08 VOL: 0
; 0000 068D     case 2: process_value[mux_scan] = linearise_tc(adc_value,cal_zero[mux_scan],cal_span[mux_scan],15,table_j,5000);
;PCODE: $00000E09 VOL: 0
;PCODE: $00000E0A VOL: 0
;PCODE: $00000E0B VOL: 0
;PCODE: $00000E0C VOL: 0
;PCODE: $00000E0D VOL: 0
;PCODE: $00000E0E VOL: 0
;PCODE: $00000E0F VOL: 0
;PCODE: $00000E10 VOL: 0
;PCODE: $00000E11 VOL: 0
;PCODE: $00000E12 VOL: 0
;PCODE: $00000E13 VOL: 0
;PCODE: $00000E14 VOL: 0
;PCODE: $00000E15 VOL: 0
;PCODE: $00000E16 VOL: 0
;PCODE: $00000E17 VOL: 0
;PCODE: $00000E18 VOL: 0
;PCODE: $00000E19 VOL: 0
;PCODE: $00000E1A VOL: 0
;PCODE: $00000E1B VOL: 0
;PCODE: $00000E1C VOL: 0
;PCODE: $00000E1D VOL: 0
;PCODE: $00000E1E VOL: 0
;PCODE: $00000E1F VOL: 0
;PCODE: $00000E20 VOL: 0
;PCODE: $00000E21 VOL: 0
;PCODE: $00000E22 VOL: 0
;PCODE: $00000E23 VOL: 0
;PCODE: $00000E24 VOL: 0
;PCODE: $00000E25 VOL: 0
;PCODE: $00000E26 VOL: 0
;PCODE: $00000E27 VOL: 0
;PCODE: $00000E28 VOL: 0
;PCODE: $00000E29 VOL: 0
; 0000 068E             min_val =0;
;PCODE: $00000E2A VOL: 0
;PCODE: $00000E2B VOL: 0
; 0000 068F             max_val = 700;
;PCODE: $00000E2C VOL: 0
;PCODE: $00000E2D VOL: 0
; 0000 0690             break;
;PCODE: $00000E2E VOL: 0
; 0000 0691     case 3: process_value[mux_scan] = linearise_tc(adc_value,cal_zero[mux_scan],cal_span[mux_scan],28,table_k,5000);
;PCODE: $00000E2F VOL: 0
;PCODE: $00000E30 VOL: 0
;PCODE: $00000E31 VOL: 0
;PCODE: $00000E32 VOL: 0
;PCODE: $00000E33 VOL: 0
;PCODE: $00000E34 VOL: 0
;PCODE: $00000E35 VOL: 0
;PCODE: $00000E36 VOL: 0
;PCODE: $00000E37 VOL: 0
;PCODE: $00000E38 VOL: 0
;PCODE: $00000E39 VOL: 0
;PCODE: $00000E3A VOL: 0
;PCODE: $00000E3B VOL: 0
;PCODE: $00000E3C VOL: 0
;PCODE: $00000E3D VOL: 0
;PCODE: $00000E3E VOL: 0
;PCODE: $00000E3F VOL: 0
;PCODE: $00000E40 VOL: 0
;PCODE: $00000E41 VOL: 0
;PCODE: $00000E42 VOL: 0
;PCODE: $00000E43 VOL: 0
;PCODE: $00000E44 VOL: 0
;PCODE: $00000E45 VOL: 0
;PCODE: $00000E46 VOL: 0
;PCODE: $00000E47 VOL: 0
;PCODE: $00000E48 VOL: 0
;PCODE: $00000E49 VOL: 0
;PCODE: $00000E4A VOL: 0
;PCODE: $00000E4B VOL: 0
;PCODE: $00000E4C VOL: 0
;PCODE: $00000E4D VOL: 0
;PCODE: $00000E4E VOL: 0
;PCODE: $00000E4F VOL: 0
; 0000 0692             min_val =0;
;PCODE: $00000E50 VOL: 0
;PCODE: $00000E51 VOL: 0
; 0000 0693             max_val = 1300;
;PCODE: $00000E52 VOL: 0
;PCODE: $00000E53 VOL: 0
; 0000 0694             break;
;PCODE: $00000E54 VOL: 0
; 0000 0695     case 4: process_value[mux_scan] = linearise_tc(adc_value,cal_zero[mux_scan],cal_span[mux_scan],36,table_r,50000);
;PCODE: $00000E55 VOL: 0
;PCODE: $00000E56 VOL: 0
;PCODE: $00000E57 VOL: 0
;PCODE: $00000E58 VOL: 0
;PCODE: $00000E59 VOL: 0
;PCODE: $00000E5A VOL: 0
;PCODE: $00000E5B VOL: 0
;PCODE: $00000E5C VOL: 0
;PCODE: $00000E5D VOL: 0
;PCODE: $00000E5E VOL: 0
;PCODE: $00000E5F VOL: 0
;PCODE: $00000E60 VOL: 0
;PCODE: $00000E61 VOL: 0
;PCODE: $00000E62 VOL: 0
;PCODE: $00000E63 VOL: 0
;PCODE: $00000E64 VOL: 0
;PCODE: $00000E65 VOL: 0
;PCODE: $00000E66 VOL: 0
;PCODE: $00000E67 VOL: 0
;PCODE: $00000E68 VOL: 0
;PCODE: $00000E69 VOL: 0
;PCODE: $00000E6A VOL: 0
;PCODE: $00000E6B VOL: 0
;PCODE: $00000E6C VOL: 0
;PCODE: $00000E6D VOL: 0
;PCODE: $00000E6E VOL: 0
;PCODE: $00000E6F VOL: 0
;PCODE: $00000E70 VOL: 0
;PCODE: $00000E71 VOL: 0
;PCODE: $00000E72 VOL: 0
;PCODE: $00000E73 VOL: 0
;PCODE: $00000E74 VOL: 0
;PCODE: $00000E75 VOL: 0
; 0000 0696             min_val =0;
;PCODE: $00000E76 VOL: 0
;PCODE: $00000E77 VOL: 0
; 0000 0697             max_val = 1700;
;PCODE: $00000E78 VOL: 0
;PCODE: $00000E79 VOL: 0
; 0000 0698             break;
;PCODE: $00000E7A VOL: 0
; 0000 0699     case 5: process_value[mux_scan] = linearise_tc(adc_value,cal_zero[mux_scan],cal_span[mux_scan],36,table_s,50000);
;PCODE: $00000E7B VOL: 0
;PCODE: $00000E7C VOL: 0
;PCODE: $00000E7D VOL: 0
;PCODE: $00000E7E VOL: 0
;PCODE: $00000E7F VOL: 0
;PCODE: $00000E80 VOL: 0
;PCODE: $00000E81 VOL: 0
;PCODE: $00000E82 VOL: 0
;PCODE: $00000E83 VOL: 0
;PCODE: $00000E84 VOL: 0
;PCODE: $00000E85 VOL: 0
;PCODE: $00000E86 VOL: 0
;PCODE: $00000E87 VOL: 0
;PCODE: $00000E88 VOL: 0
;PCODE: $00000E89 VOL: 0
;PCODE: $00000E8A VOL: 0
;PCODE: $00000E8B VOL: 0
;PCODE: $00000E8C VOL: 0
;PCODE: $00000E8D VOL: 0
;PCODE: $00000E8E VOL: 0
;PCODE: $00000E8F VOL: 0
;PCODE: $00000E90 VOL: 0
;PCODE: $00000E91 VOL: 0
;PCODE: $00000E92 VOL: 0
;PCODE: $00000E93 VOL: 0
;PCODE: $00000E94 VOL: 0
;PCODE: $00000E95 VOL: 0
;PCODE: $00000E96 VOL: 0
;PCODE: $00000E97 VOL: 0
;PCODE: $00000E98 VOL: 0
;PCODE: $00000E99 VOL: 0
;PCODE: $00000E9A VOL: 0
;PCODE: $00000E9B VOL: 0
; 0000 069A             min_val =0;
;PCODE: $00000E9C VOL: 0
;PCODE: $00000E9D VOL: 0
; 0000 069B             max_val = 1700;
;PCODE: $00000E9E VOL: 0
;PCODE: $00000E9F VOL: 0
; 0000 069C             break;
;PCODE: $00000EA0 VOL: 0
; 0000 069D     case 6: process_value[mux_scan] = linearise_tc(adc_value,cal_zero[mux_scan],cal_span[mux_scan],8,table_t,5000);
;PCODE: $00000EA1 VOL: 0
;PCODE: $00000EA2 VOL: 0
;PCODE: $00000EA3 VOL: 0
;PCODE: $00000EA4 VOL: 0
;PCODE: $00000EA5 VOL: 0
;PCODE: $00000EA6 VOL: 0
;PCODE: $00000EA7 VOL: 0
;PCODE: $00000EA8 VOL: 0
;PCODE: $00000EA9 VOL: 0
;PCODE: $00000EAA VOL: 0
;PCODE: $00000EAB VOL: 0
;PCODE: $00000EAC VOL: 0
;PCODE: $00000EAD VOL: 0
;PCODE: $00000EAE VOL: 0
;PCODE: $00000EAF VOL: 0
;PCODE: $00000EB0 VOL: 0
;PCODE: $00000EB1 VOL: 0
;PCODE: $00000EB2 VOL: 0
;PCODE: $00000EB3 VOL: 0
;PCODE: $00000EB4 VOL: 0
;PCODE: $00000EB5 VOL: 0
;PCODE: $00000EB6 VOL: 0
;PCODE: $00000EB7 VOL: 0
;PCODE: $00000EB8 VOL: 0
;PCODE: $00000EB9 VOL: 0
;PCODE: $00000EBA VOL: 0
;PCODE: $00000EBB VOL: 0
;PCODE: $00000EBC VOL: 0
;PCODE: $00000EBD VOL: 0
;PCODE: $00000EBE VOL: 0
;PCODE: $00000EBF VOL: 0
;PCODE: $00000EC0 VOL: 0
;PCODE: $00000EC1 VOL: 0
; 0000 069E             min_val =0;
;PCODE: $00000EC2 VOL: 0
;PCODE: $00000EC3 VOL: 0
; 0000 069F             max_val = 350;
;PCODE: $00000EC4 VOL: 0
;PCODE: $00000EC5 VOL: 0
; 0000 06A0             break;
;PCODE: $00000EC6 VOL: 0
; 0000 06A1     case 7: process_value[mux_scan] = linearise_volt(adc_value,cal_zero[mux_scan],cal_span[mux_scan],rhigh[mux_scan],rlo ...
;PCODE: $00000EC7 VOL: 0
;PCODE: $00000EC8 VOL: 0
;PCODE: $00000EC9 VOL: 0
;PCODE: $00000ECA VOL: 0
;PCODE: $00000ECB VOL: 0
;PCODE: $00000ECC VOL: 0
;PCODE: $00000ECD VOL: 0
;PCODE: $00000ECE VOL: 0
;PCODE: $00000ECF VOL: 0
;PCODE: $00000ED0 VOL: 0
;PCODE: $00000ED1 VOL: 0
;PCODE: $00000ED2 VOL: 0
;PCODE: $00000ED3 VOL: 0
;PCODE: $00000ED4 VOL: 0
;PCODE: $00000ED5 VOL: 0
;PCODE: $00000ED6 VOL: 0
;PCODE: $00000ED7 VOL: 0
;PCODE: $00000ED8 VOL: 0
;PCODE: $00000ED9 VOL: 0
;PCODE: $00000EDA VOL: 0
;PCODE: $00000EDB VOL: 0
;PCODE: $00000EDC VOL: 0
;PCODE: $00000EDD VOL: 0
;PCODE: $00000EDE VOL: 0
;PCODE: $00000EDF VOL: 0
;PCODE: $00000EE0 VOL: 0
;PCODE: $00000EE1 VOL: 0
;PCODE: $00000EE2 VOL: 0
;PCODE: $00000EE3 VOL: 0
;PCODE: $00000EE4 VOL: 0
;PCODE: $00000EE5 VOL: 0
;PCODE: $00000EE6 VOL: 0
;PCODE: $00000EE7 VOL: 0
;PCODE: $00000EE8 VOL: 0
;PCODE: $00000EE9 VOL: 0
;PCODE: $00000EEA VOL: 0
;PCODE: $00000EEB VOL: 0
;PCODE: $00000EEC VOL: 0
;PCODE: $00000EED VOL: 0
;PCODE: $00000EEE VOL: 0
;PCODE: $00000EEF VOL: 0
;PCODE: $00000EF0 VOL: 0
; 0000 06A2             min_val =rlow[mux_scan] - (rlow[mux_scan]*20/100);
;PCODE: $00000EF1 VOL: 0
;PCODE: $00000EF2 VOL: 0
;PCODE: $00000EF3 VOL: 0
;PCODE: $00000EF4 VOL: 0
;PCODE: $00000EF5 VOL: 0
;PCODE: $00000EF6 VOL: 0
;PCODE: $00000EF7 VOL: 0
;PCODE: $00000EF8 VOL: 0
;PCODE: $00000EF9 VOL: 0
;PCODE: $00000EFA VOL: 0
;PCODE: $00000EFB VOL: 0
;PCODE: $00000EFC VOL: 0
;PCODE: $00000EFD VOL: 0
;PCODE: $00000EFE VOL: 0
;PCODE: $00000EFF VOL: 0
;PCODE: $00000F00 VOL: 0
;PCODE: $00000F01 VOL: 0
;PCODE: $00000F02 VOL: 0
; 0000 06A3             max_val =rhigh[mux_scan]+ (rhigh[mux_scan]*20/100);
;PCODE: $00000F03 VOL: 0
;PCODE: $00000F04 VOL: 0
;PCODE: $00000F05 VOL: 0
;PCODE: $00000F06 VOL: 0
;PCODE: $00000F07 VOL: 0
;PCODE: $00000F08 VOL: 0
;PCODE: $00000F09 VOL: 0
;PCODE: $00000F0A VOL: 0
;PCODE: $00000F0B VOL: 0
;PCODE: $00000F0C VOL: 0
;PCODE: $00000F0D VOL: 0
;PCODE: $00000F0E VOL: 0
;PCODE: $00000F0F VOL: 0
;PCODE: $00000F10 VOL: 0
;PCODE: $00000F11 VOL: 0
;PCODE: $00000F12 VOL: 0
;PCODE: $00000F13 VOL: 0
; 0000 06A4             break;
;PCODE: $00000F14 VOL: 0
; 0000 06A5     case 8: process_value[mux_scan] = linearise_420(adc_value,cal_zero[mux_scan],cal_span[mux_scan],rhigh[mux_scan],rlow ...
;PCODE: $00000F15 VOL: 0
;PCODE: $00000F16 VOL: 0
;PCODE: $00000F17 VOL: 0
;PCODE: $00000F18 VOL: 0
;PCODE: $00000F19 VOL: 0
;PCODE: $00000F1A VOL: 0
;PCODE: $00000F1B VOL: 0
;PCODE: $00000F1C VOL: 0
;PCODE: $00000F1D VOL: 0
;PCODE: $00000F1E VOL: 0
;PCODE: $00000F1F VOL: 0
;PCODE: $00000F20 VOL: 0
;PCODE: $00000F21 VOL: 0
;PCODE: $00000F22 VOL: 0
;PCODE: $00000F23 VOL: 0
;PCODE: $00000F24 VOL: 0
;PCODE: $00000F25 VOL: 0
;PCODE: $00000F26 VOL: 0
;PCODE: $00000F27 VOL: 0
;PCODE: $00000F28 VOL: 0
;PCODE: $00000F29 VOL: 0
;PCODE: $00000F2A VOL: 0
;PCODE: $00000F2B VOL: 0
;PCODE: $00000F2C VOL: 0
;PCODE: $00000F2D VOL: 0
;PCODE: $00000F2E VOL: 0
;PCODE: $00000F2F VOL: 0
;PCODE: $00000F30 VOL: 0
;PCODE: $00000F31 VOL: 0
;PCODE: $00000F32 VOL: 0
;PCODE: $00000F33 VOL: 0
;PCODE: $00000F34 VOL: 0
;PCODE: $00000F35 VOL: 0
;PCODE: $00000F36 VOL: 0
;PCODE: $00000F37 VOL: 0
;PCODE: $00000F38 VOL: 0
;PCODE: $00000F39 VOL: 0
;PCODE: $00000F3A VOL: 0
;PCODE: $00000F3B VOL: 0
;PCODE: $00000F3C VOL: 0
;PCODE: $00000F3D VOL: 0
;PCODE: $00000F3E VOL: 0
; 0000 06A6              min_val =rlow[mux_scan] - (rlow[mux_scan]*20/100);
;PCODE: $00000F3F VOL: 0
;PCODE: $00000F40 VOL: 0
;PCODE: $00000F41 VOL: 0
;PCODE: $00000F42 VOL: 0
;PCODE: $00000F43 VOL: 0
;PCODE: $00000F44 VOL: 0
;PCODE: $00000F45 VOL: 0
;PCODE: $00000F46 VOL: 0
;PCODE: $00000F47 VOL: 0
;PCODE: $00000F48 VOL: 0
;PCODE: $00000F49 VOL: 0
;PCODE: $00000F4A VOL: 0
;PCODE: $00000F4B VOL: 0
;PCODE: $00000F4C VOL: 0
;PCODE: $00000F4D VOL: 0
;PCODE: $00000F4E VOL: 0
;PCODE: $00000F4F VOL: 0
;PCODE: $00000F50 VOL: 0
; 0000 06A7             max_val =rhigh[mux_scan]+ (rhigh[mux_scan]*20/100);
;PCODE: $00000F51 VOL: 0
;PCODE: $00000F52 VOL: 0
;PCODE: $00000F53 VOL: 0
;PCODE: $00000F54 VOL: 0
;PCODE: $00000F55 VOL: 0
;PCODE: $00000F56 VOL: 0
;PCODE: $00000F57 VOL: 0
;PCODE: $00000F58 VOL: 0
;PCODE: $00000F59 VOL: 0
;PCODE: $00000F5A VOL: 0
;PCODE: $00000F5B VOL: 0
;PCODE: $00000F5C VOL: 0
;PCODE: $00000F5D VOL: 0
;PCODE: $00000F5E VOL: 0
;PCODE: $00000F5F VOL: 0
;PCODE: $00000F60 VOL: 0
;PCODE: $00000F61 VOL: 0
; 0000 06A8             break;
;PCODE: $00000F62 VOL: 0
; 0000 06A9     }
;PCODE: $00000F63 VOL: 0
; 0000 06AA     //check for overrange or underrange or skip. proces_error used in other routines and modbus
; 0000 06AB     //0: normal
; 0000 06AC     //1: underrange
; 0000 06AD     //2: overrange
; 0000 06AE     //3: skip
; 0000 06AF     //////////////////////////////////////////////////////////////////////////
; 0000 06B0     if (process_value[mux_scan] < min_val) process_error[mux_scan] = 1;
;PCODE: $00000F64 VOL: 0
;PCODE: $00000F65 VOL: 0
;PCODE: $00000F66 VOL: 0
;PCODE: $00000F67 VOL: 0
;PCODE: $00000F68 VOL: 0
;PCODE: $00000F69 VOL: 0
;PCODE: $00000F6A VOL: 0
;PCODE: $00000F6B VOL: 0
;PCODE: $00000F6C VOL: 0
;PCODE: $00000F6D VOL: 0
;PCODE: $00000F6E VOL: 0
;PCODE: $00000F6F VOL: 0
;PCODE: $00000F70 VOL: 0
; 0000 06B1     else if (process_value[mux_scan] > max_val) process_error[mux_scan]=2;
;PCODE: $00000F71 VOL: 0
;PCODE: $00000F72 VOL: 0
;PCODE: $00000F73 VOL: 0
;PCODE: $00000F74 VOL: 0
;PCODE: $00000F75 VOL: 0
;PCODE: $00000F76 VOL: 0
;PCODE: $00000F77 VOL: 0
;PCODE: $00000F78 VOL: 0
;PCODE: $00000F79 VOL: 0
;PCODE: $00000F7A VOL: 0
;PCODE: $00000F7B VOL: 0
;PCODE: $00000F7C VOL: 0
;PCODE: $00000F7D VOL: 0
;PCODE: $00000F7E VOL: 0
;PCODE: $00000F7F VOL: 0
; 0000 06B2     else process_error[mux_scan] =0;        //normal
;PCODE: $00000F80 VOL: 0
;PCODE: $00000F81 VOL: 0
;PCODE: $00000F82 VOL: 0
;PCODE: $00000F83 VOL: 0
;PCODE: $00000F84 VOL: 0
;PCODE: $00000F85 VOL: 0
;PCODE: $00000F86 VOL: 0
;PCODE: $00000F87 VOL: 0
; 0000 06B3     //////////////////////////////////////////////////////////////////////////
; 0000 06B4 }
;PCODE: $00000F88 VOL: 0
;PCODE: $00000F89 VOL: 0
;PCODE: $00000F8A VOL: 0
; 0000 06B5 mux_scan++;
;PCODE: $00000F8B VOL: 0
;PCODE: $00000F8C VOL: 0
;PCODE: $00000F8D VOL: 0
;PCODE: $00000F8E VOL: 0
; 0000 06B6 //////////////////////////////////////////////////////////////////
; 0000 06B7 //internal scanning according to skip status. to be checked later after uncommenting
; 0000 06B8 //////////////////////////////////////////////////////////////////
; 0000 06B9 
; 0000 06BA if (!(tc_fl && (mux_scan ==7)))
;PCODE: $00000F8F VOL: 0
;PCODE: $00000F90 VOL: 0
;PCODE: $00000F91 VOL: 0
;PCODE: $00000F92 VOL: 0
;PCODE: $00000F93 VOL: 0
;PCODE: $00000F94 VOL: 0
;PCODE: $00000F95 VOL: 0
;PCODE: $00000F96 VOL: 0
; 0000 06BB {
; 0000 06BC while (skip[mux_scan] !=0)
;PCODE: $00000F97 VOL: 0
;PCODE: $00000F98 VOL: 0
;PCODE: $00000F99 VOL: 0
;PCODE: $00000F9A VOL: 0
;PCODE: $00000F9B VOL: 0
;PCODE: $00000F9C VOL: 0
;PCODE: $00000F9D VOL: 0
;PCODE: $00000F9E VOL: 0
; 0000 06BD {
; 0000 06BE mux_scan++;
;PCODE: $00000F9F VOL: 0
;PCODE: $00000FA0 VOL: 0
;PCODE: $00000FA1 VOL: 0
;PCODE: $00000FA2 VOL: 0
; 0000 06BF if (mux_scan>=8)
;PCODE: $00000FA3 VOL: 0
;PCODE: $00000FA4 VOL: 0
;PCODE: $00000FA5 VOL: 0
; 0000 06C0 break;
;PCODE: $00000FA6 VOL: 0
; 0000 06C1 }
;PCODE: $00000FA7 VOL: 0
;PCODE: $00000FA8 VOL: 0
;PCODE: $00000FA9 VOL: 0
; 0000 06C2 }
; 0000 06C3 //////////////////////////////////////////////////////////////////
; 0000 06C4 
; 0000 06C5 
; 0000 06C6 
; 0000 06C7 if (mux_scan >=8) mux_scan =0;
;PCODE: $00000FAA VOL: 0
;PCODE: $00000FAB VOL: 0
;PCODE: $00000FAC VOL: 0
;PCODE: $00000FAD VOL: 0
;PCODE: $00000FAE VOL: 0
;PCODE: $00000FAF VOL: 0
; 0000 06C8 switch(mux_scan)
;PCODE: $00000FB0 VOL: 0
;PCODE: $00000FB1 VOL: 0
; 0000 06C9     {
; 0000 06CA     case 0: mux9 =0;
;PCODE: $00000FB2 VOL: 0
;PCODE: $00000FB3 VOL: 0
;PCODE: $00000FB4 VOL: 0
;PCODE: $00000FB5 VOL: 0
; 0000 06CB             mux10 =0;
;PCODE: $00000FB6 VOL: 0
;PCODE: $00000FB7 VOL: 0
; 0000 06CC             mux11 =0;
;PCODE: $00000FB8 VOL: 0
;PCODE: $00000FB9 VOL: 0
; 0000 06CD             break;
;PCODE: $00000FBA VOL: 0
; 0000 06CE     case 1: mux9 =1;
;PCODE: $00000FBB VOL: 0
;PCODE: $00000FBC VOL: 0
;PCODE: $00000FBD VOL: 0
;PCODE: $00000FBE VOL: 0
;PCODE: $00000FBF VOL: 0
; 0000 06CF             mux10 =0;
;PCODE: $00000FC0 VOL: 0
;PCODE: $00000FC1 VOL: 0
; 0000 06D0             mux11 =0;
;PCODE: $00000FC2 VOL: 0
;PCODE: $00000FC3 VOL: 0
; 0000 06D1             break;
;PCODE: $00000FC4 VOL: 0
; 0000 06D2     case 2: mux9 =0;
;PCODE: $00000FC5 VOL: 0
;PCODE: $00000FC6 VOL: 0
;PCODE: $00000FC7 VOL: 0
;PCODE: $00000FC8 VOL: 0
;PCODE: $00000FC9 VOL: 0
; 0000 06D3             mux10 =1;
;PCODE: $00000FCA VOL: 0
;PCODE: $00000FCB VOL: 0
; 0000 06D4             mux11 =0;
;PCODE: $00000FCC VOL: 0
;PCODE: $00000FCD VOL: 0
; 0000 06D5             break;
;PCODE: $00000FCE VOL: 0
; 0000 06D6     case 3: mux9 =1;
;PCODE: $00000FCF VOL: 0
;PCODE: $00000FD0 VOL: 0
;PCODE: $00000FD1 VOL: 0
;PCODE: $00000FD2 VOL: 0
;PCODE: $00000FD3 VOL: 0
; 0000 06D7             mux10 =1;
;PCODE: $00000FD4 VOL: 0
;PCODE: $00000FD5 VOL: 0
; 0000 06D8             mux11 =0;
;PCODE: $00000FD6 VOL: 0
;PCODE: $00000FD7 VOL: 0
; 0000 06D9             break;
;PCODE: $00000FD8 VOL: 0
; 0000 06DA     case 4: mux9 =0;
;PCODE: $00000FD9 VOL: 0
;PCODE: $00000FDA VOL: 0
;PCODE: $00000FDB VOL: 0
;PCODE: $00000FDC VOL: 0
;PCODE: $00000FDD VOL: 0
; 0000 06DB             mux10 =0;
;PCODE: $00000FDE VOL: 0
;PCODE: $00000FDF VOL: 0
; 0000 06DC             mux11 =1;
;PCODE: $00000FE0 VOL: 0
;PCODE: $00000FE1 VOL: 0
; 0000 06DD             break;
;PCODE: $00000FE2 VOL: 0
; 0000 06DE     case 5: mux9 =1;
;PCODE: $00000FE3 VOL: 0
;PCODE: $00000FE4 VOL: 0
;PCODE: $00000FE5 VOL: 0
;PCODE: $00000FE6 VOL: 0
;PCODE: $00000FE7 VOL: 0
; 0000 06DF             mux10 =0;
;PCODE: $00000FE8 VOL: 0
;PCODE: $00000FE9 VOL: 0
; 0000 06E0             mux11 =1;
;PCODE: $00000FEA VOL: 0
;PCODE: $00000FEB VOL: 0
; 0000 06E1             break;
;PCODE: $00000FEC VOL: 0
; 0000 06E2     case 6: mux9 =0;
;PCODE: $00000FED VOL: 0
;PCODE: $00000FEE VOL: 0
;PCODE: $00000FEF VOL: 0
;PCODE: $00000FF0 VOL: 0
;PCODE: $00000FF1 VOL: 0
; 0000 06E3             mux10 =1;
;PCODE: $00000FF2 VOL: 0
;PCODE: $00000FF3 VOL: 0
; 0000 06E4             mux11 =1;
;PCODE: $00000FF4 VOL: 0
;PCODE: $00000FF5 VOL: 0
; 0000 06E5             break;
;PCODE: $00000FF6 VOL: 0
; 0000 06E6     case 7: mux9 =1;
;PCODE: $00000FF7 VOL: 0
;PCODE: $00000FF8 VOL: 0
;PCODE: $00000FF9 VOL: 0
;PCODE: $00000FFA VOL: 0
;PCODE: $00000FFB VOL: 0
; 0000 06E7             mux10 =1;
;PCODE: $00000FFC VOL: 0
;PCODE: $00000FFD VOL: 0
; 0000 06E8             mux11 =1;
;PCODE: $00000FFE VOL: 0
;PCODE: $00000FFF VOL: 0
; 0000 06E9             break;
;PCODE: $00001000 VOL: 0
; 0000 06EA     default:mux_scan =0;
;PCODE: $00001001 VOL: 0
;PCODE: $00001002 VOL: 0
;PCODE: $00001003 VOL: 0
; 0000 06EB             mux9 =0;
;PCODE: $00001004 VOL: 0
;PCODE: $00001005 VOL: 0
; 0000 06EC             mux10 =0;
;PCODE: $00001006 VOL: 0
;PCODE: $00001007 VOL: 0
; 0000 06ED             mux11 =0;
;PCODE: $00001008 VOL: 0
;PCODE: $00001009 VOL: 0
; 0000 06EE             break;
;PCODE: $0000100A VOL: 0
; 0000 06EF     }
;PCODE: $0000100B VOL: 0
; 0000 06F0 }
; 0000 06F1 }
;PCODE: $0000100C VOL: 0
;PCODE: $0000100D VOL: 0
;PCODE: $0000100E VOL: 0
;PCODE: $0000100F VOL: 0
;PCODE: $00001010 VOL: 0
;
;void display_check(void)
; 0000 06F4 {
;PCODE: $00001011 VOL: 0
;PCODE: $00001012 VOL: 0
; 0000 06F5 int adc_value;
; 0000 06F6 if(!menu_fl && !cal_fl)
;PCODE: $00001013 VOL: 0
;PCODE: $00001014 VOL: 0
;	adc_value -> R16,R17
;PCODE: $00001015 VOL: 0
;PCODE: $00001016 VOL: 0
;PCODE: $00001017 VOL: 0
;PCODE: $00001018 VOL: 0
;PCODE: $00001019 VOL: 0
;PCODE: $0000101A VOL: 0
;PCODE: $0000101B VOL: 0
;PCODE: $0000101C VOL: 0
;PCODE: $0000101D VOL: 0
;PCODE: $0000101E VOL: 0
; 0000 06F7     {
; 0000 06F8     skip[0] = ee_skip[0] =0;
;PCODE: $0000101F VOL: 0
;PCODE: $00001020 VOL: 0
;PCODE: $00001021 VOL: 0
;PCODE: $00001022 VOL: 0
; 0000 06F9     if (tsec_fl )   //hold_fl =0 implies scan else hold (toggled in shf key routine)
;PCODE: $00001023 VOL: 0
;PCODE: $00001024 VOL: 0
;PCODE: $00001025 VOL: 0
; 0000 06FA         {
; 0000 06FB         if (!hold_fl) display_scan_cnt++;  //hold display to same channel
;PCODE: $00001026 VOL: 0
;PCODE: $00001027 VOL: 0
;PCODE: $00001028 VOL: 0
;PCODE: $00001029 VOL: 0
;PCODE: $0000102A VOL: 0
;PCODE: $0000102B VOL: 0
; 0000 06FC         if (skip[display_scan_cnt]!=0 && display_scan_cnt <=8)
;PCODE: $0000102C VOL: 0
;PCODE: $0000102D VOL: 0
;PCODE: $0000102E VOL: 0
;PCODE: $0000102F VOL: 0
;PCODE: $00001030 VOL: 0
;PCODE: $00001031 VOL: 0
;PCODE: $00001032 VOL: 0
;PCODE: $00001033 VOL: 0
;PCODE: $00001034 VOL: 0
;PCODE: $00001035 VOL: 0
;PCODE: $00001036 VOL: 0
;PCODE: $00001037 VOL: 0
;PCODE: $00001038 VOL: 0
;PCODE: $00001039 VOL: 0
;PCODE: $0000103A VOL: 0
; 0000 06FD         goto bypass;
;PCODE: $0000103B VOL: 0
; 0000 06FE         tsec_fl =0;
;PCODE: $0000103C VOL: 0
;PCODE: $0000103D VOL: 0
;PCODE: $0000103E VOL: 0
;PCODE: $0000103F VOL: 0
; 0000 06FF         if (display_scan_cnt >=8) display_scan_cnt =0;
;PCODE: $00001040 VOL: 0
;PCODE: $00001041 VOL: 0
;PCODE: $00001042 VOL: 0
;PCODE: $00001043 VOL: 0
; 0000 0700         switch (process_error[display_scan_cnt])
;PCODE: $00001044 VOL: 0
;PCODE: $00001045 VOL: 0
;PCODE: $00001046 VOL: 0
;PCODE: $00001047 VOL: 0
;PCODE: $00001048 VOL: 0
;PCODE: $00001049 VOL: 0
; 0000 0701             {
; 0000 0702             case 0: display_put(process_value[display_scan_cnt],display_scan_cnt+1,0,dummy,dummy2);
;PCODE: $0000104A VOL: 0
;PCODE: $0000104B VOL: 0
;PCODE: $0000104C VOL: 0
;PCODE: $0000104D VOL: 0
;PCODE: $0000104E VOL: 0
;PCODE: $0000104F VOL: 0
;PCODE: $00001050 VOL: 0
;PCODE: $00001051 VOL: 0
;PCODE: $00001052 VOL: 0
;PCODE: $00001053 VOL: 0
;PCODE: $00001054 VOL: 0
;PCODE: $00001055 VOL: 0
;PCODE: $00001056 VOL: 0
;PCODE: $00001057 VOL: 0
;PCODE: $00001058 VOL: 0
;PCODE: $00001059 VOL: 0
;PCODE: $0000105A VOL: 0
; 0000 0703                     break;
;PCODE: $0000105B VOL: 0
; 0000 0704            case 1: display_put(0,display_scan_cnt+1,1,message_neg,dummy2);
;PCODE: $0000105C VOL: 0
;PCODE: $0000105D VOL: 0
;PCODE: $0000105E VOL: 0
;PCODE: $0000105F VOL: 0
;PCODE: $00001060 VOL: 0
;PCODE: $00001061 VOL: 0
;PCODE: $00001062 VOL: 0
;PCODE: $00001063 VOL: 0
;PCODE: $00001064 VOL: 0
;PCODE: $00001065 VOL: 0
;PCODE: $00001066 VOL: 0
;PCODE: $00001067 VOL: 0
;PCODE: $00001068 VOL: 0
;PCODE: $00001069 VOL: 0
; 0000 0705                     break;
;PCODE: $0000106A VOL: 0
; 0000 0706            case 2: display_put(0,display_scan_cnt+1,1,message_open,dummy2);
;PCODE: $0000106B VOL: 0
;PCODE: $0000106C VOL: 0
;PCODE: $0000106D VOL: 0
;PCODE: $0000106E VOL: 0
;PCODE: $0000106F VOL: 0
;PCODE: $00001070 VOL: 0
;PCODE: $00001071 VOL: 0
;PCODE: $00001072 VOL: 0
;PCODE: $00001073 VOL: 0
;PCODE: $00001074 VOL: 0
;PCODE: $00001075 VOL: 0
;PCODE: $00001076 VOL: 0
;PCODE: $00001077 VOL: 0
;PCODE: $00001078 VOL: 0
; 0000 0707                     break;
;PCODE: $00001079 VOL: 0
; 0000 0708            default: display_put(process_value[display_scan_cnt],display_scan_cnt+1,0,dummy,dummy2);
;PCODE: $0000107A VOL: 0
;PCODE: $0000107B VOL: 0
;PCODE: $0000107C VOL: 0
;PCODE: $0000107D VOL: 0
;PCODE: $0000107E VOL: 0
;PCODE: $0000107F VOL: 0
;PCODE: $00001080 VOL: 0
;PCODE: $00001081 VOL: 0
;PCODE: $00001082 VOL: 0
;PCODE: $00001083 VOL: 0
;PCODE: $00001084 VOL: 0
;PCODE: $00001085 VOL: 0
;PCODE: $00001086 VOL: 0
;PCODE: $00001087 VOL: 0
;PCODE: $00001088 VOL: 0
;PCODE: $00001089 VOL: 0
; 0000 0709                     break;
;PCODE: $0000108A VOL: 0
; 0000 070A 
; 0000 070B             }
;PCODE: $0000108B VOL: 0
; 0000 070C bypass:
;PCODE: $0000108C VOL: 0
; 0000 070D         }
; 0000 070E     }
;PCODE: $0000108D VOL: 0
; 0000 070F 
; 0000 0710 else if (menu_fl && !cal_fl)
;PCODE: $0000108E VOL: 0
;PCODE: $0000108F VOL: 0
;PCODE: $00001090 VOL: 0
;PCODE: $00001091 VOL: 0
;PCODE: $00001092 VOL: 0
;PCODE: $00001093 VOL: 0
;PCODE: $00001094 VOL: 0
;PCODE: $00001095 VOL: 0
;PCODE: $00001096 VOL: 0
;PCODE: $00001097 VOL: 0
;PCODE: $00001098 VOL: 0
;PCODE: $00001099 VOL: 0
; 0000 0711     {
; 0000 0712     if (level ==1)
;PCODE: $0000109A VOL: 0
;PCODE: $0000109B VOL: 0
;PCODE: $0000109C VOL: 0
; 0000 0713         {
; 0000 0714         display_put(0,item1,2,ms_menu,message_menu);
;PCODE: $0000109D VOL: 0
;PCODE: $0000109E VOL: 0
;PCODE: $0000109F VOL: 0
;PCODE: $000010A0 VOL: 0
;PCODE: $000010A1 VOL: 0
;PCODE: $000010A2 VOL: 0
;PCODE: $000010A3 VOL: 0
;PCODE: $000010A4 VOL: 0
;PCODE: $000010A5 VOL: 0
;PCODE: $000010A6 VOL: 0
; 0000 0715         }
; 0000 0716     else if (level ==2)
;PCODE: $000010A7 VOL: 0
;PCODE: $000010A8 VOL: 0
;PCODE: $000010A9 VOL: 0
;PCODE: $000010AA VOL: 0
;PCODE: $000010AB VOL: 0
; 0000 0717         {
; 0000 0718         switch (item1)
;PCODE: $000010AC VOL: 0
; 0000 0719             {
; 0000 071A             case 0: if (item2==0) display_put(0,gen[0],1,message_gen,dummy); //st
;PCODE: $000010AD VOL: 0
;PCODE: $000010AE VOL: 0
;PCODE: $000010AF VOL: 0
;PCODE: $000010B0 VOL: 0
;PCODE: $000010B1 VOL: 0
;PCODE: $000010B2 VOL: 0
;PCODE: $000010B3 VOL: 0
;PCODE: $000010B4 VOL: 0
;PCODE: $000010B5 VOL: 0
;PCODE: $000010B6 VOL: 0
;PCODE: $000010B7 VOL: 0
;PCODE: $000010B8 VOL: 0
;PCODE: $000010B9 VOL: 0
;PCODE: $000010BA VOL: 0
;PCODE: $000010BB VOL: 0
; 0000 071B                     if (item2==1) display_put(1,gen[1],1,message_gen,dummy);
;PCODE: $000010BC VOL: 0
;PCODE: $000010BD VOL: 0
;PCODE: $000010BE VOL: 0
;PCODE: $000010BF VOL: 0
;PCODE: $000010C0 VOL: 0
;PCODE: $000010C1 VOL: 0
;PCODE: $000010C2 VOL: 0
;PCODE: $000010C3 VOL: 0
;PCODE: $000010C4 VOL: 0
;PCODE: $000010C5 VOL: 0
;PCODE: $000010C6 VOL: 0
;PCODE: $000010C7 VOL: 0
;PCODE: $000010C8 VOL: 0
;PCODE: $000010C9 VOL: 0
;PCODE: $000010CA VOL: 0
; 0000 071C                     if (item2==2) display_put(2,gen[2],2,message_gen,message_baud);
;PCODE: $000010CB VOL: 0
;PCODE: $000010CC VOL: 0
;PCODE: $000010CD VOL: 0
;PCODE: $000010CE VOL: 0
;PCODE: $000010CF VOL: 0
;PCODE: $000010D0 VOL: 0
;PCODE: $000010D1 VOL: 0
;PCODE: $000010D2 VOL: 0
;PCODE: $000010D3 VOL: 0
;PCODE: $000010D4 VOL: 0
;PCODE: $000010D5 VOL: 0
;PCODE: $000010D6 VOL: 0
;PCODE: $000010D7 VOL: 0
;PCODE: $000010D8 VOL: 0
;PCODE: $000010D9 VOL: 0
; 0000 071D                     break;
;PCODE: $000010DA VOL: 0
;PCODE: $000010DB VOL: 0
; 0000 071E             case 1: display_put(item2,os[item2],1,message_os,dummy);
;PCODE: $000010DC VOL: 0
;PCODE: $000010DD VOL: 0
;PCODE: $000010DE VOL: 0
;PCODE: $000010DF VOL: 0
;PCODE: $000010E0 VOL: 0
;PCODE: $000010E1 VOL: 0
;PCODE: $000010E2 VOL: 0
;PCODE: $000010E3 VOL: 0
;PCODE: $000010E4 VOL: 0
;PCODE: $000010E5 VOL: 0
;PCODE: $000010E6 VOL: 0
;PCODE: $000010E7 VOL: 0
;PCODE: $000010E8 VOL: 0
;PCODE: $000010E9 VOL: 0
;PCODE: $000010EA VOL: 0
;PCODE: $000010EB VOL: 0
;PCODE: $000010EC VOL: 0
; 0000 071F                     break;
;PCODE: $000010ED VOL: 0
; 0000 0720             case 2: display_put(item2,skip[item2],2,message_skip,message_skuk);
;PCODE: $000010EE VOL: 0
;PCODE: $000010EF VOL: 0
;PCODE: $000010F0 VOL: 0
;PCODE: $000010F1 VOL: 0
;PCODE: $000010F2 VOL: 0
;PCODE: $000010F3 VOL: 0
;PCODE: $000010F4 VOL: 0
;PCODE: $000010F5 VOL: 0
;PCODE: $000010F6 VOL: 0
;PCODE: $000010F7 VOL: 0
;PCODE: $000010F8 VOL: 0
;PCODE: $000010F9 VOL: 0
;PCODE: $000010FA VOL: 0
;PCODE: $000010FB VOL: 0
;PCODE: $000010FC VOL: 0
;PCODE: $000010FD VOL: 0
;PCODE: $000010FE VOL: 0
; 0000 0721                     break;
;PCODE: $000010FF VOL: 0
; 0000 0722             case 3: display_put(item2,rlow[item2],1,message_rlow,dummy);
;PCODE: $00001100 VOL: 0
;PCODE: $00001101 VOL: 0
;PCODE: $00001102 VOL: 0
;PCODE: $00001103 VOL: 0
;PCODE: $00001104 VOL: 0
;PCODE: $00001105 VOL: 0
;PCODE: $00001106 VOL: 0
;PCODE: $00001107 VOL: 0
;PCODE: $00001108 VOL: 0
;PCODE: $00001109 VOL: 0
;PCODE: $0000110A VOL: 0
;PCODE: $0000110B VOL: 0
;PCODE: $0000110C VOL: 0
;PCODE: $0000110D VOL: 0
;PCODE: $0000110E VOL: 0
;PCODE: $0000110F VOL: 0
;PCODE: $00001110 VOL: 0
; 0000 0723                     break;
;PCODE: $00001111 VOL: 0
; 0000 0724             case 4: display_put(item2,rhigh[item2],1,message_rhigh,dummy);
;PCODE: $00001112 VOL: 0
;PCODE: $00001113 VOL: 0
;PCODE: $00001114 VOL: 0
;PCODE: $00001115 VOL: 0
;PCODE: $00001116 VOL: 0
;PCODE: $00001117 VOL: 0
;PCODE: $00001118 VOL: 0
;PCODE: $00001119 VOL: 0
;PCODE: $0000111A VOL: 0
;PCODE: $0000111B VOL: 0
;PCODE: $0000111C VOL: 0
;PCODE: $0000111D VOL: 0
;PCODE: $0000111E VOL: 0
;PCODE: $0000111F VOL: 0
;PCODE: $00001120 VOL: 0
;PCODE: $00001121 VOL: 0
;PCODE: $00001122 VOL: 0
; 0000 0725                     break;
;PCODE: $00001123 VOL: 0
; 0000 0726             case 5: display_put(item2,alow[item2],1,message_alow,dummy);
;PCODE: $00001124 VOL: 0
;PCODE: $00001125 VOL: 0
;PCODE: $00001126 VOL: 0
;PCODE: $00001127 VOL: 0
;PCODE: $00001128 VOL: 0
;PCODE: $00001129 VOL: 0
;PCODE: $0000112A VOL: 0
;PCODE: $0000112B VOL: 0
;PCODE: $0000112C VOL: 0
;PCODE: $0000112D VOL: 0
;PCODE: $0000112E VOL: 0
;PCODE: $0000112F VOL: 0
;PCODE: $00001130 VOL: 0
;PCODE: $00001131 VOL: 0
;PCODE: $00001132 VOL: 0
;PCODE: $00001133 VOL: 0
;PCODE: $00001134 VOL: 0
; 0000 0727                     break;
;PCODE: $00001135 VOL: 0
; 0000 0728             case 6: display_put(item2,ahigh[item2],1,message_ahigh,dummy);
;PCODE: $00001136 VOL: 0
;PCODE: $00001137 VOL: 0
;PCODE: $00001138 VOL: 0
;PCODE: $00001139 VOL: 0
;PCODE: $0000113A VOL: 0
;PCODE: $0000113B VOL: 0
;PCODE: $0000113C VOL: 0
;PCODE: $0000113D VOL: 0
;PCODE: $0000113E VOL: 0
;PCODE: $0000113F VOL: 0
;PCODE: $00001140 VOL: 0
;PCODE: $00001141 VOL: 0
;PCODE: $00001142 VOL: 0
;PCODE: $00001143 VOL: 0
;PCODE: $00001144 VOL: 0
;PCODE: $00001145 VOL: 0
;PCODE: $00001146 VOL: 0
; 0000 0729                     break;
;PCODE: $00001147 VOL: 0
; 0000 072A             case 7: display_put(item2,input[item2],2,message_in,message_inp);
;PCODE: $00001148 VOL: 0
;PCODE: $00001149 VOL: 0
;PCODE: $0000114A VOL: 0
;PCODE: $0000114B VOL: 0
;PCODE: $0000114C VOL: 0
;PCODE: $0000114D VOL: 0
;PCODE: $0000114E VOL: 0
;PCODE: $0000114F VOL: 0
;PCODE: $00001150 VOL: 0
;PCODE: $00001151 VOL: 0
;PCODE: $00001152 VOL: 0
;PCODE: $00001153 VOL: 0
;PCODE: $00001154 VOL: 0
;PCODE: $00001155 VOL: 0
;PCODE: $00001156 VOL: 0
;PCODE: $00001157 VOL: 0
;PCODE: $00001158 VOL: 0
; 0000 072B                     break;
;PCODE: $00001159 VOL: 0
; 0000 072C             case 8: display_put(item2,dp[item2],2,message_dp,message_dp1);
;PCODE: $0000115A VOL: 0
;PCODE: $0000115B VOL: 0
;PCODE: $0000115C VOL: 0
;PCODE: $0000115D VOL: 0
;PCODE: $0000115E VOL: 0
;PCODE: $0000115F VOL: 0
;PCODE: $00001160 VOL: 0
;PCODE: $00001161 VOL: 0
;PCODE: $00001162 VOL: 0
;PCODE: $00001163 VOL: 0
;PCODE: $00001164 VOL: 0
;PCODE: $00001165 VOL: 0
;PCODE: $00001166 VOL: 0
;PCODE: $00001167 VOL: 0
;PCODE: $00001168 VOL: 0
;PCODE: $00001169 VOL: 0
;PCODE: $0000116A VOL: 0
; 0000 072D 
; 0000 072E             }
;PCODE: $0000116B VOL: 0
; 0000 072F 
; 0000 0730         }
; 0000 0731 
; 0000 0732 
; 0000 0733 
; 0000 0734 
; 0000 0735     }
;PCODE: $0000116C VOL: 0
;PCODE: $0000116D VOL: 0
; 0000 0736 else if (cal_fl)
;PCODE: $0000116E VOL: 0
;PCODE: $0000116F VOL: 0
;PCODE: $00001170 VOL: 0
;PCODE: $00001171 VOL: 0
;PCODE: $00001172 VOL: 0
; 0000 0737     {
; 0000 0738     adc_value = adc3421_read();
;PCODE: $00001173 VOL: 0
;PCODE: $00001174 VOL: 0
; 0000 0739     display_put(mux_scan,adc_value,1,message_cal,dummy);
;PCODE: $00001175 VOL: 0
;PCODE: $00001176 VOL: 0
;PCODE: $00001177 VOL: 0
;PCODE: $00001178 VOL: 0
;PCODE: $00001179 VOL: 0
;PCODE: $0000117A VOL: 0
;PCODE: $0000117B VOL: 0
;PCODE: $0000117C VOL: 0
;PCODE: $0000117D VOL: 0
; 0000 073A     }
; 0000 073B }
;PCODE: $0000117E VOL: 0
;PCODE: $0000117F VOL: 0
;PCODE: $00001180 VOL: 0
;PCODE: $00001181 VOL: 0
;PCODE: $00001182 VOL: 0
;PCODE: $00001183 VOL: 0
;
;void display_out(short int count2)
; 0000 073E {
;PCODE: $00001184 VOL: 0
;PCODE: $00001185 VOL: 0
; 0000 073F int asa;
; 0000 0740 clear_display();
;PCODE: $00001186 VOL: 0
;PCODE: $00001187 VOL: 0
;PCODE: $00001188 VOL: 0
;	count2 -> Y+2
;	asa -> R16,R17
;PCODE: $00001189 VOL: 0
; 0000 0741 asa = display_buffer[count2];
;PCODE: $0000118A VOL: 0
;PCODE: $0000118B VOL: 0
;PCODE: $0000118C VOL: 0
;PCODE: $0000118D VOL: 0
;PCODE: $0000118E VOL: 0
; 0000 0742 asa = segment_table[asa];
;PCODE: $0000118F VOL: 0
;PCODE: $00001190 VOL: 0
;PCODE: $00001191 VOL: 0
;PCODE: $00001192 VOL: 0
; 0000 0743 if (count2 == (7-blink_digit))
;PCODE: $00001193 VOL: 0
;PCODE: $00001194 VOL: 0
;PCODE: $00001195 VOL: 0
;PCODE: $00001196 VOL: 0
;PCODE: $00001197 VOL: 0
;PCODE: $00001198 VOL: 0
; 0000 0744 {
; 0000 0745 if (blink_flag && blinking)
;PCODE: $00001199 VOL: 0
;PCODE: $0000119A VOL: 0
;PCODE: $0000119B VOL: 0
;PCODE: $0000119C VOL: 0
;PCODE: $0000119D VOL: 0
;PCODE: $0000119E VOL: 0
;PCODE: $0000119F VOL: 0
;PCODE: $000011A0 VOL: 0
;PCODE: $000011A1 VOL: 0
;PCODE: $000011A2 VOL: 0
; 0000 0746 PORTA =0xff;
;PCODE: $000011A3 VOL: 0
;PCODE: $000011A4 VOL: 0
; 0000 0747 else
;PCODE: $000011A5 VOL: 0
;PCODE: $000011A6 VOL: 0
; 0000 0748 PORTA = asa;
;PCODE: $000011A7 VOL: 0
;PCODE: $000011A8 VOL: 0
; 0000 0749 }
;PCODE: $000011A9 VOL: 0
; 0000 074A else
;PCODE: $000011AA VOL: 0
;PCODE: $000011AB VOL: 0
; 0000 074B PORTA = asa;//decimal point for upper display
;PCODE: $000011AC VOL: 0
;PCODE: $000011AD VOL: 0
; 0000 074C // logic to display decimal point
; 0000 074D switch (count2)
;PCODE: $000011AE VOL: 0
;PCODE: $000011AF VOL: 0
; 0000 074E     {
; 0000 074F     case 0: if (!menu_fl && !cal_fl )
;PCODE: $000011B0 VOL: 0
;PCODE: $000011B1 VOL: 0
;PCODE: $000011B2 VOL: 0
;PCODE: $000011B3 VOL: 0
;PCODE: $000011B4 VOL: 0
;PCODE: $000011B5 VOL: 0
;PCODE: $000011B6 VOL: 0
;PCODE: $000011B7 VOL: 0
;PCODE: $000011B8 VOL: 0
;PCODE: $000011B9 VOL: 0
;PCODE: $000011BA VOL: 0
;PCODE: $000011BB VOL: 0
; 0000 0750                 {
; 0000 0751                 if (dp[display_scan_cnt] ==0) PORTA.7 =0;
;PCODE: $000011BC VOL: 0
;PCODE: $000011BD VOL: 0
;PCODE: $000011BE VOL: 0
;PCODE: $000011BF VOL: 0
;PCODE: $000011C0 VOL: 0
;PCODE: $000011C1 VOL: 0
;PCODE: $000011C2 VOL: 0
;PCODE: $000011C3 VOL: 0
;PCODE: $000011C4 VOL: 0
; 0000 0752                 }
;PCODE: $000011C5 VOL: 0
; 0000 0753             break;
;PCODE: $000011C6 VOL: 0
;PCODE: $000011C7 VOL: 0
; 0000 0754     case 1: if (!menu_fl && !cal_fl )
;PCODE: $000011C8 VOL: 0
;PCODE: $000011C9 VOL: 0
;PCODE: $000011CA VOL: 0
;PCODE: $000011CB VOL: 0
;PCODE: $000011CC VOL: 0
;PCODE: $000011CD VOL: 0
;PCODE: $000011CE VOL: 0
;PCODE: $000011CF VOL: 0
;PCODE: $000011D0 VOL: 0
;PCODE: $000011D1 VOL: 0
;PCODE: $000011D2 VOL: 0
;PCODE: $000011D3 VOL: 0
;PCODE: $000011D4 VOL: 0
; 0000 0755                 {
; 0000 0756                 if (dp[display_scan_cnt] ==1) PORTA.7 =0;
;PCODE: $000011D5 VOL: 0
;PCODE: $000011D6 VOL: 0
;PCODE: $000011D7 VOL: 0
;PCODE: $000011D8 VOL: 0
;PCODE: $000011D9 VOL: 0
;PCODE: $000011DA VOL: 0
;PCODE: $000011DB VOL: 0
;PCODE: $000011DC VOL: 0
;PCODE: $000011DD VOL: 0
; 0000 0757                 }
;PCODE: $000011DE VOL: 0
; 0000 0758             break;
;PCODE: $000011DF VOL: 0
;PCODE: $000011E0 VOL: 0
; 0000 0759     case 2: if (!menu_fl && !cal_fl )
;PCODE: $000011E1 VOL: 0
;PCODE: $000011E2 VOL: 0
;PCODE: $000011E3 VOL: 0
;PCODE: $000011E4 VOL: 0
;PCODE: $000011E5 VOL: 0
;PCODE: $000011E6 VOL: 0
;PCODE: $000011E7 VOL: 0
;PCODE: $000011E8 VOL: 0
;PCODE: $000011E9 VOL: 0
;PCODE: $000011EA VOL: 0
;PCODE: $000011EB VOL: 0
;PCODE: $000011EC VOL: 0
;PCODE: $000011ED VOL: 0
; 0000 075A                 {
; 0000 075B                 if (dp[display_scan_cnt] ==2) PORTA.7 =0;
;PCODE: $000011EE VOL: 0
;PCODE: $000011EF VOL: 0
;PCODE: $000011F0 VOL: 0
;PCODE: $000011F1 VOL: 0
;PCODE: $000011F2 VOL: 0
;PCODE: $000011F3 VOL: 0
;PCODE: $000011F4 VOL: 0
;PCODE: $000011F5 VOL: 0
;PCODE: $000011F6 VOL: 0
; 0000 075C                 }
;PCODE: $000011F7 VOL: 0
; 0000 075D             break;
;PCODE: $000011F8 VOL: 0
;PCODE: $000011F9 VOL: 0
; 0000 075E     case 4: if (menu_fl && !cal_fl && (level ==2))
;PCODE: $000011FA VOL: 0
;PCODE: $000011FB VOL: 0
;PCODE: $000011FC VOL: 0
;PCODE: $000011FD VOL: 0
;PCODE: $000011FE VOL: 0
;PCODE: $000011FF VOL: 0
;PCODE: $00001200 VOL: 0
;PCODE: $00001201 VOL: 0
;PCODE: $00001202 VOL: 0
;PCODE: $00001203 VOL: 0
;PCODE: $00001204 VOL: 0
;PCODE: $00001205 VOL: 0
;PCODE: $00001206 VOL: 0
;PCODE: $00001207 VOL: 0
;PCODE: $00001208 VOL: 0
;PCODE: $00001209 VOL: 0
; 0000 075F                 {
; 0000 0760                 if ((dp[item2] ==0) && ((item1==1)||(item1==3)||(item1==4)||(item1 ==5)||(item1==6))) PORTA.7=0;
;PCODE: $0000120A VOL: 0
;PCODE: $0000120B VOL: 0
;PCODE: $0000120C VOL: 0
;PCODE: $0000120D VOL: 0
;PCODE: $0000120E VOL: 0
;PCODE: $0000120F VOL: 0
;PCODE: $00001210 VOL: 0
;PCODE: $00001211 VOL: 0
;PCODE: $00001212 VOL: 0
;PCODE: $00001213 VOL: 0
;PCODE: $00001214 VOL: 0
;PCODE: $00001215 VOL: 0
;PCODE: $00001216 VOL: 0
;PCODE: $00001217 VOL: 0
;PCODE: $00001218 VOL: 0
;PCODE: $00001219 VOL: 0
;PCODE: $0000121A VOL: 0
;PCODE: $0000121B VOL: 0
;PCODE: $0000121C VOL: 0
;PCODE: $0000121D VOL: 0
;PCODE: $0000121E VOL: 0
;PCODE: $0000121F VOL: 0
;PCODE: $00001220 VOL: 0
;PCODE: $00001221 VOL: 0
;PCODE: $00001222 VOL: 0
;PCODE: $00001223 VOL: 0
;PCODE: $00001224 VOL: 0
;PCODE: $00001225 VOL: 0
;PCODE: $00001226 VOL: 0
;PCODE: $00001227 VOL: 0
; 0000 0761                 }
;PCODE: $00001228 VOL: 0
; 0000 0762             break;
;PCODE: $00001229 VOL: 0
;PCODE: $0000122A VOL: 0
; 0000 0763     case 5: if (menu_fl && !cal_fl && (level ==2))
;PCODE: $0000122B VOL: 0
;PCODE: $0000122C VOL: 0
;PCODE: $0000122D VOL: 0
;PCODE: $0000122E VOL: 0
;PCODE: $0000122F VOL: 0
;PCODE: $00001230 VOL: 0
;PCODE: $00001231 VOL: 0
;PCODE: $00001232 VOL: 0
;PCODE: $00001233 VOL: 0
;PCODE: $00001234 VOL: 0
;PCODE: $00001235 VOL: 0
;PCODE: $00001236 VOL: 0
;PCODE: $00001237 VOL: 0
;PCODE: $00001238 VOL: 0
;PCODE: $00001239 VOL: 0
;PCODE: $0000123A VOL: 0
; 0000 0764                 {
; 0000 0765                 if ((dp[item2] ==1)&& ((item1==1)||(item1==3)||(item1==4)||(item1 ==5)||(item1==6))) PORTA.7=0;
;PCODE: $0000123B VOL: 0
;PCODE: $0000123C VOL: 0
;PCODE: $0000123D VOL: 0
;PCODE: $0000123E VOL: 0
;PCODE: $0000123F VOL: 0
;PCODE: $00001240 VOL: 0
;PCODE: $00001241 VOL: 0
;PCODE: $00001242 VOL: 0
;PCODE: $00001243 VOL: 0
;PCODE: $00001244 VOL: 0
;PCODE: $00001245 VOL: 0
;PCODE: $00001246 VOL: 0
;PCODE: $00001247 VOL: 0
;PCODE: $00001248 VOL: 0
;PCODE: $00001249 VOL: 0
;PCODE: $0000124A VOL: 0
;PCODE: $0000124B VOL: 0
;PCODE: $0000124C VOL: 0
;PCODE: $0000124D VOL: 0
;PCODE: $0000124E VOL: 0
;PCODE: $0000124F VOL: 0
;PCODE: $00001250 VOL: 0
;PCODE: $00001251 VOL: 0
;PCODE: $00001252 VOL: 0
;PCODE: $00001253 VOL: 0
;PCODE: $00001254 VOL: 0
;PCODE: $00001255 VOL: 0
;PCODE: $00001256 VOL: 0
;PCODE: $00001257 VOL: 0
;PCODE: $00001258 VOL: 0
; 0000 0766                 }
;PCODE: $00001259 VOL: 0
; 0000 0767             break;
;PCODE: $0000125A VOL: 0
;PCODE: $0000125B VOL: 0
; 0000 0768     case 6: if (menu_fl && !cal_fl && (level ==2))
;PCODE: $0000125C VOL: 0
;PCODE: $0000125D VOL: 0
;PCODE: $0000125E VOL: 0
;PCODE: $0000125F VOL: 0
;PCODE: $00001260 VOL: 0
;PCODE: $00001261 VOL: 0
;PCODE: $00001262 VOL: 0
;PCODE: $00001263 VOL: 0
;PCODE: $00001264 VOL: 0
;PCODE: $00001265 VOL: 0
;PCODE: $00001266 VOL: 0
;PCODE: $00001267 VOL: 0
;PCODE: $00001268 VOL: 0
;PCODE: $00001269 VOL: 0
;PCODE: $0000126A VOL: 0
;PCODE: $0000126B VOL: 0
; 0000 0769                 {
; 0000 076A                 if ((dp[item2] ==2)&& ((item1==1)||(item1==3)||(item1==4)||(item1 ==5)||(item1==6))) PORTA.7=0;
;PCODE: $0000126C VOL: 0
;PCODE: $0000126D VOL: 0
;PCODE: $0000126E VOL: 0
;PCODE: $0000126F VOL: 0
;PCODE: $00001270 VOL: 0
;PCODE: $00001271 VOL: 0
;PCODE: $00001272 VOL: 0
;PCODE: $00001273 VOL: 0
;PCODE: $00001274 VOL: 0
;PCODE: $00001275 VOL: 0
;PCODE: $00001276 VOL: 0
;PCODE: $00001277 VOL: 0
;PCODE: $00001278 VOL: 0
;PCODE: $00001279 VOL: 0
;PCODE: $0000127A VOL: 0
;PCODE: $0000127B VOL: 0
;PCODE: $0000127C VOL: 0
;PCODE: $0000127D VOL: 0
;PCODE: $0000127E VOL: 0
;PCODE: $0000127F VOL: 0
;PCODE: $00001280 VOL: 0
;PCODE: $00001281 VOL: 0
;PCODE: $00001282 VOL: 0
;PCODE: $00001283 VOL: 0
;PCODE: $00001284 VOL: 0
;PCODE: $00001285 VOL: 0
;PCODE: $00001286 VOL: 0
;PCODE: $00001287 VOL: 0
;PCODE: $00001288 VOL: 0
;PCODE: $00001289 VOL: 0
; 0000 076B                 }
;PCODE: $0000128A VOL: 0
; 0000 076C             break;
;PCODE: $0000128B VOL: 0
;PCODE: $0000128C VOL: 0
; 0000 076D 
; 0000 076E 
; 0000 076F     }
;PCODE: $0000128D VOL: 0
; 0000 0770 
; 0000 0771 
; 0000 0772 
; 0000 0773 
; 0000 0774 
; 0000 0775 ////end of decimal point logic
; 0000 0776 
; 0000 0777 switch(count2)
;PCODE: $0000128E VOL: 0
; 0000 0778         {
; 0000 0779         case 0:  digit1();
;PCODE: $0000128F VOL: 0
;PCODE: $00001290 VOL: 0
;PCODE: $00001291 VOL: 0
;PCODE: $00001292 VOL: 0
; 0000 077A         break;
;PCODE: $00001293 VOL: 0
; 0000 077B         case 1:  digit2();
;PCODE: $00001294 VOL: 0
;PCODE: $00001295 VOL: 0
;PCODE: $00001296 VOL: 0
;PCODE: $00001297 VOL: 0
;PCODE: $00001298 VOL: 0
; 0000 077C         break;
;PCODE: $00001299 VOL: 0
; 0000 077D         case 2:  digit3();
;PCODE: $0000129A VOL: 0
;PCODE: $0000129B VOL: 0
;PCODE: $0000129C VOL: 0
;PCODE: $0000129D VOL: 0
;PCODE: $0000129E VOL: 0
; 0000 077E         break;
;PCODE: $0000129F VOL: 0
; 0000 077F         case 3:  digit4();
;PCODE: $000012A0 VOL: 0
;PCODE: $000012A1 VOL: 0
;PCODE: $000012A2 VOL: 0
;PCODE: $000012A3 VOL: 0
;PCODE: $000012A4 VOL: 0
; 0000 0780         break;
;PCODE: $000012A5 VOL: 0
; 0000 0781         case 4:  digit5();
;PCODE: $000012A6 VOL: 0
;PCODE: $000012A7 VOL: 0
;PCODE: $000012A8 VOL: 0
;PCODE: $000012A9 VOL: 0
;PCODE: $000012AA VOL: 0
; 0000 0782         break;
;PCODE: $000012AB VOL: 0
; 0000 0783         case 5:  digit6();
;PCODE: $000012AC VOL: 0
;PCODE: $000012AD VOL: 0
;PCODE: $000012AE VOL: 0
;PCODE: $000012AF VOL: 0
;PCODE: $000012B0 VOL: 0
; 0000 0784         break;
;PCODE: $000012B1 VOL: 0
; 0000 0785         case 6:  digit7();
;PCODE: $000012B2 VOL: 0
;PCODE: $000012B3 VOL: 0
;PCODE: $000012B4 VOL: 0
;PCODE: $000012B5 VOL: 0
;PCODE: $000012B6 VOL: 0
; 0000 0786         break;
;PCODE: $000012B7 VOL: 0
; 0000 0787         case 7:  digit8();
;PCODE: $000012B8 VOL: 0
;PCODE: $000012B9 VOL: 0
;PCODE: $000012BA VOL: 0
;PCODE: $000012BB VOL: 0
;PCODE: $000012BC VOL: 0
; 0000 0788         break;
;PCODE: $000012BD VOL: 0
; 0000 0789         case 8: PORTA = led_status;
;PCODE: $000012BE VOL: 0
;PCODE: $000012BF VOL: 0
;PCODE: $000012C0 VOL: 0
;PCODE: $000012C1 VOL: 0
;PCODE: $000012C2 VOL: 0
; 0000 078A                 digit9();
;PCODE: $000012C3 VOL: 0
;PCODE: $000012C4 VOL: 0
; 0000 078B                 break;
;PCODE: $000012C5 VOL: 0
; 0000 078C         case 9: PORTA = led_status1;
;PCODE: $000012C6 VOL: 0
;PCODE: $000012C7 VOL: 0
;PCODE: $000012C8 VOL: 0
;PCODE: $000012C9 VOL: 0
;PCODE: $000012CA VOL: 0
; 0000 078D                 digit10();
;PCODE: $000012CB VOL: 0
;PCODE: $000012CC VOL: 0
; 0000 078E         break;
;PCODE: $000012CD VOL: 0
; 0000 078F         }
;PCODE: $000012CE VOL: 0
; 0000 0790 
; 0000 0791 //display_put(process_value[0],process_value[1],0,dummy,dummy2);                       //**
; 0000 0792 
; 0000 0793 
; 0000 0794 }
;PCODE: $000012CF VOL: 0
;PCODE: $000012D0 VOL: 0
;PCODE: $000012D1 VOL: 0
;PCODE: $000012D2 VOL: 0
;PCODE: $000012D3 VOL: 0
;PCODE: $000012D4 VOL: 0
;PCODE: $000012D5 VOL: 0
;
;
;
;
;void key_check()
; 0000 079A {
;PCODE: $000012D6 VOL: 0
;PCODE: $000012D7 VOL: 0
; 0000 079B      key1 = key2 = key3 = key4 = 1;
;PCODE: $000012D8 VOL: 0
;PCODE: $000012D9 VOL: 0
;PCODE: $000012DA VOL: 0
;PCODE: $000012DB VOL: 0
;PCODE: $000012DC VOL: 0
;PCODE: $000012DD VOL: 0
;PCODE: $000012DE VOL: 0
;PCODE: $000012DF VOL: 0
; 0000 079C       key_count++;
;PCODE: $000012E0 VOL: 0
;PCODE: $000012E1 VOL: 0
;PCODE: $000012E2 VOL: 0
;PCODE: $000012E3 VOL: 0
; 0000 079D  if (key_count >=100)
;PCODE: $000012E4 VOL: 0
;PCODE: $000012E5 VOL: 0
;PCODE: $000012E6 VOL: 0
; 0000 079E     {
; 0000 079F       key_count=0;
;PCODE: $000012E7 VOL: 0
;PCODE: $000012E8 VOL: 0
; 0000 07A0       if (!key1 && key1_old)ent_key();
;PCODE: $000012E9 VOL: 0
;PCODE: $000012EA VOL: 0
;PCODE: $000012EB VOL: 0
;PCODE: $000012EC VOL: 0
;PCODE: $000012ED VOL: 0
;PCODE: $000012EE VOL: 0
;PCODE: $000012EF VOL: 0
;PCODE: $000012F0 VOL: 0
;PCODE: $000012F1 VOL: 0
;PCODE: $000012F2 VOL: 0
;PCODE: $000012F3 VOL: 0
; 0000 07A1       if (!key2 && key2_old)inc_key();
;PCODE: $000012F4 VOL: 0
;PCODE: $000012F5 VOL: 0
;PCODE: $000012F6 VOL: 0
;PCODE: $000012F7 VOL: 0
;PCODE: $000012F8 VOL: 0
;PCODE: $000012F9 VOL: 0
;PCODE: $000012FA VOL: 0
;PCODE: $000012FB VOL: 0
;PCODE: $000012FC VOL: 0
;PCODE: $000012FD VOL: 0
;PCODE: $000012FE VOL: 0
;PCODE: $000012FF VOL: 0
; 0000 07A2       if (!key3 && key3_old)dec_key();
;PCODE: $00001300 VOL: 0
;PCODE: $00001301 VOL: 0
;PCODE: $00001302 VOL: 0
;PCODE: $00001303 VOL: 0
;PCODE: $00001304 VOL: 0
;PCODE: $00001305 VOL: 0
;PCODE: $00001306 VOL: 0
;PCODE: $00001307 VOL: 0
;PCODE: $00001308 VOL: 0
;PCODE: $00001309 VOL: 0
;PCODE: $0000130A VOL: 0
;PCODE: $0000130B VOL: 0
; 0000 07A3       if (!key4 && key4_old)shf_key();
;PCODE: $0000130C VOL: 0
;PCODE: $0000130D VOL: 0
;PCODE: $0000130E VOL: 0
;PCODE: $0000130F VOL: 0
;PCODE: $00001310 VOL: 0
;PCODE: $00001311 VOL: 0
;PCODE: $00001312 VOL: 0
;PCODE: $00001313 VOL: 0
;PCODE: $00001314 VOL: 0
;PCODE: $00001315 VOL: 0
;PCODE: $00001316 VOL: 0
;PCODE: $00001317 VOL: 0
; 0000 07A4       key1_old = key1;
;PCODE: $00001318 VOL: 0
;PCODE: $00001319 VOL: 0
;PCODE: $0000131A VOL: 0
;PCODE: $0000131B VOL: 0
;PCODE: $0000131C VOL: 0
; 0000 07A5       key2_old = key2;
;PCODE: $0000131D VOL: 0
;PCODE: $0000131E VOL: 0
;PCODE: $0000131F VOL: 0
;PCODE: $00001320 VOL: 0
; 0000 07A6       key3_old = key3;
;PCODE: $00001321 VOL: 0
;PCODE: $00001322 VOL: 0
;PCODE: $00001323 VOL: 0
;PCODE: $00001324 VOL: 0
; 0000 07A7       key4_old = key4;
;PCODE: $00001325 VOL: 0
;PCODE: $00001326 VOL: 0
;PCODE: $00001327 VOL: 0
;PCODE: $00001328 VOL: 0
; 0000 07A8      }
; 0000 07A9 }
;PCODE: $00001329 VOL: 0
;PCODE: $0000132A VOL: 0
;PCODE: $0000132B VOL: 0
;
;void eeprom_transfer(void)
; 0000 07AC {
;PCODE: $0000132C VOL: 0
;PCODE: $0000132D VOL: 0
; 0000 07AD short int i;
; 0000 07AE for(i=0;i<=8;i++)
;PCODE: $0000132E VOL: 0
;PCODE: $0000132F VOL: 0
;	i -> R16,R17
;PCODE: $00001330 VOL: 0
;PCODE: $00001331 VOL: 0
;PCODE: $00001332 VOL: 0
;PCODE: $00001333 VOL: 0
;PCODE: $00001334 VOL: 0
;PCODE: $00001335 VOL: 0
;PCODE: $00001336 VOL: 0
;PCODE: $00001337 VOL: 0
;PCODE: $00001338 VOL: 0
; 0000 07AF     {
; 0000 07B0     cal_zero[i] = ee_cal_zero[i];
;PCODE: $00001339 VOL: 0
;PCODE: $0000133A VOL: 0
;PCODE: $0000133B VOL: 0
;PCODE: $0000133C VOL: 0
;PCODE: $0000133D VOL: 0
;PCODE: $0000133E VOL: 0
;PCODE: $0000133F VOL: 0
;PCODE: $00001340 VOL: 0
;PCODE: $00001341 VOL: 0
;PCODE: $00001342 VOL: 0
;PCODE: $00001343 VOL: 0
;PCODE: $00001344 VOL: 0
; 0000 07B1     }
;PCODE: $00001345 VOL: 0
;PCODE: $00001346 VOL: 0
;PCODE: $00001347 VOL: 0
;PCODE: $00001348 VOL: 0
;PCODE: $00001349 VOL: 0
; 0000 07B2 for(i=0;i<=8;i++)
;PCODE: $0000134A VOL: 0
;PCODE: $0000134B VOL: 0
;PCODE: $0000134C VOL: 0
;PCODE: $0000134D VOL: 0
;PCODE: $0000134E VOL: 0
;PCODE: $0000134F VOL: 0
;PCODE: $00001350 VOL: 0
;PCODE: $00001351 VOL: 0
;PCODE: $00001352 VOL: 0
; 0000 07B3     {
; 0000 07B4     cal_span[i] = ee_cal_span[i];
;PCODE: $00001353 VOL: 0
;PCODE: $00001354 VOL: 0
;PCODE: $00001355 VOL: 0
;PCODE: $00001356 VOL: 0
;PCODE: $00001357 VOL: 0
;PCODE: $00001358 VOL: 0
;PCODE: $00001359 VOL: 0
;PCODE: $0000135A VOL: 0
;PCODE: $0000135B VOL: 0
;PCODE: $0000135C VOL: 0
;PCODE: $0000135D VOL: 0
;PCODE: $0000135E VOL: 0
; 0000 07B5     }
;PCODE: $0000135F VOL: 0
;PCODE: $00001360 VOL: 0
;PCODE: $00001361 VOL: 0
;PCODE: $00001362 VOL: 0
;PCODE: $00001363 VOL: 0
; 0000 07B6 for(i=0;i<=3;i++)
;PCODE: $00001364 VOL: 0
;PCODE: $00001365 VOL: 0
;PCODE: $00001366 VOL: 0
;PCODE: $00001367 VOL: 0
;PCODE: $00001368 VOL: 0
;PCODE: $00001369 VOL: 0
;PCODE: $0000136A VOL: 0
;PCODE: $0000136B VOL: 0
;PCODE: $0000136C VOL: 0
; 0000 07B7     {
; 0000 07B8     gen[i] = ee_gen[i];
;PCODE: $0000136D VOL: 0
;PCODE: $0000136E VOL: 0
;PCODE: $0000136F VOL: 0
;PCODE: $00001370 VOL: 0
;PCODE: $00001371 VOL: 0
;PCODE: $00001372 VOL: 0
;PCODE: $00001373 VOL: 0
;PCODE: $00001374 VOL: 0
;PCODE: $00001375 VOL: 0
;PCODE: $00001376 VOL: 0
;PCODE: $00001377 VOL: 0
;PCODE: $00001378 VOL: 0
; 0000 07B9     }
;PCODE: $00001379 VOL: 0
;PCODE: $0000137A VOL: 0
;PCODE: $0000137B VOL: 0
;PCODE: $0000137C VOL: 0
;PCODE: $0000137D VOL: 0
; 0000 07BA for(i=0;i<=8;i++)
;PCODE: $0000137E VOL: 0
;PCODE: $0000137F VOL: 0
;PCODE: $00001380 VOL: 0
;PCODE: $00001381 VOL: 0
;PCODE: $00001382 VOL: 0
;PCODE: $00001383 VOL: 0
;PCODE: $00001384 VOL: 0
;PCODE: $00001385 VOL: 0
;PCODE: $00001386 VOL: 0
; 0000 07BB     {
; 0000 07BC     os[i] = ee_os[i];
;PCODE: $00001387 VOL: 0
;PCODE: $00001388 VOL: 0
;PCODE: $00001389 VOL: 0
;PCODE: $0000138A VOL: 0
;PCODE: $0000138B VOL: 0
;PCODE: $0000138C VOL: 0
;PCODE: $0000138D VOL: 0
;PCODE: $0000138E VOL: 0
;PCODE: $0000138F VOL: 0
;PCODE: $00001390 VOL: 0
;PCODE: $00001391 VOL: 0
;PCODE: $00001392 VOL: 0
; 0000 07BD     }
;PCODE: $00001393 VOL: 0
;PCODE: $00001394 VOL: 0
;PCODE: $00001395 VOL: 0
;PCODE: $00001396 VOL: 0
;PCODE: $00001397 VOL: 0
; 0000 07BE for(i=0;i<=8;i++)
;PCODE: $00001398 VOL: 0
;PCODE: $00001399 VOL: 0
;PCODE: $0000139A VOL: 0
;PCODE: $0000139B VOL: 0
;PCODE: $0000139C VOL: 0
;PCODE: $0000139D VOL: 0
;PCODE: $0000139E VOL: 0
;PCODE: $0000139F VOL: 0
;PCODE: $000013A0 VOL: 0
; 0000 07BF     {
; 0000 07C0     skip[i] = ee_skip[i];
;PCODE: $000013A1 VOL: 0
;PCODE: $000013A2 VOL: 0
;PCODE: $000013A3 VOL: 0
;PCODE: $000013A4 VOL: 0
;PCODE: $000013A5 VOL: 0
;PCODE: $000013A6 VOL: 0
;PCODE: $000013A7 VOL: 0
;PCODE: $000013A8 VOL: 0
;PCODE: $000013A9 VOL: 0
;PCODE: $000013AA VOL: 0
;PCODE: $000013AB VOL: 0
;PCODE: $000013AC VOL: 0
; 0000 07C1     }
;PCODE: $000013AD VOL: 0
;PCODE: $000013AE VOL: 0
;PCODE: $000013AF VOL: 0
;PCODE: $000013B0 VOL: 0
;PCODE: $000013B1 VOL: 0
; 0000 07C2 for(i=0;i<=8;i++)
;PCODE: $000013B2 VOL: 0
;PCODE: $000013B3 VOL: 0
;PCODE: $000013B4 VOL: 0
;PCODE: $000013B5 VOL: 0
;PCODE: $000013B6 VOL: 0
;PCODE: $000013B7 VOL: 0
;PCODE: $000013B8 VOL: 0
;PCODE: $000013B9 VOL: 0
;PCODE: $000013BA VOL: 0
; 0000 07C3     {
; 0000 07C4     rlow[i] = ee_rlow[i];
;PCODE: $000013BB VOL: 0
;PCODE: $000013BC VOL: 0
;PCODE: $000013BD VOL: 0
;PCODE: $000013BE VOL: 0
;PCODE: $000013BF VOL: 0
;PCODE: $000013C0 VOL: 0
;PCODE: $000013C1 VOL: 0
;PCODE: $000013C2 VOL: 0
;PCODE: $000013C3 VOL: 0
;PCODE: $000013C4 VOL: 0
;PCODE: $000013C5 VOL: 0
;PCODE: $000013C6 VOL: 0
; 0000 07C5     }
;PCODE: $000013C7 VOL: 0
;PCODE: $000013C8 VOL: 0
;PCODE: $000013C9 VOL: 0
;PCODE: $000013CA VOL: 0
;PCODE: $000013CB VOL: 0
; 0000 07C6 for(i=0;i<=8;i++)
;PCODE: $000013CC VOL: 0
;PCODE: $000013CD VOL: 0
;PCODE: $000013CE VOL: 0
;PCODE: $000013CF VOL: 0
;PCODE: $000013D0 VOL: 0
;PCODE: $000013D1 VOL: 0
;PCODE: $000013D2 VOL: 0
;PCODE: $000013D3 VOL: 0
;PCODE: $000013D4 VOL: 0
; 0000 07C7     {
; 0000 07C8     rhigh[i] = ee_rhigh[i];
;PCODE: $000013D5 VOL: 0
;PCODE: $000013D6 VOL: 0
;PCODE: $000013D7 VOL: 0
;PCODE: $000013D8 VOL: 0
;PCODE: $000013D9 VOL: 0
;PCODE: $000013DA VOL: 0
;PCODE: $000013DB VOL: 0
;PCODE: $000013DC VOL: 0
;PCODE: $000013DD VOL: 0
;PCODE: $000013DE VOL: 0
;PCODE: $000013DF VOL: 0
;PCODE: $000013E0 VOL: 0
; 0000 07C9     }
;PCODE: $000013E1 VOL: 0
;PCODE: $000013E2 VOL: 0
;PCODE: $000013E3 VOL: 0
;PCODE: $000013E4 VOL: 0
;PCODE: $000013E5 VOL: 0
; 0000 07CA for(i=0;i<=8;i++)
;PCODE: $000013E6 VOL: 0
;PCODE: $000013E7 VOL: 0
;PCODE: $000013E8 VOL: 0
;PCODE: $000013E9 VOL: 0
;PCODE: $000013EA VOL: 0
;PCODE: $000013EB VOL: 0
;PCODE: $000013EC VOL: 0
;PCODE: $000013ED VOL: 0
;PCODE: $000013EE VOL: 0
; 0000 07CB     {
; 0000 07CC     alow[i] = ee_alow[i];
;PCODE: $000013EF VOL: 0
;PCODE: $000013F0 VOL: 0
;PCODE: $000013F1 VOL: 0
;PCODE: $000013F2 VOL: 0
;PCODE: $000013F3 VOL: 0
;PCODE: $000013F4 VOL: 0
;PCODE: $000013F5 VOL: 0
;PCODE: $000013F6 VOL: 0
;PCODE: $000013F7 VOL: 0
;PCODE: $000013F8 VOL: 0
;PCODE: $000013F9 VOL: 0
;PCODE: $000013FA VOL: 0
; 0000 07CD     }
;PCODE: $000013FB VOL: 0
;PCODE: $000013FC VOL: 0
;PCODE: $000013FD VOL: 0
;PCODE: $000013FE VOL: 0
;PCODE: $000013FF VOL: 0
; 0000 07CE for(i=0;i<=8;i++)
;PCODE: $00001400 VOL: 0
;PCODE: $00001401 VOL: 0
;PCODE: $00001402 VOL: 0
;PCODE: $00001403 VOL: 0
;PCODE: $00001404 VOL: 0
;PCODE: $00001405 VOL: 0
;PCODE: $00001406 VOL: 0
;PCODE: $00001407 VOL: 0
;PCODE: $00001408 VOL: 0
; 0000 07CF     {
; 0000 07D0     ahigh[i] = ee_ahigh[i];
;PCODE: $00001409 VOL: 0
;PCODE: $0000140A VOL: 0
;PCODE: $0000140B VOL: 0
;PCODE: $0000140C VOL: 0
;PCODE: $0000140D VOL: 0
;PCODE: $0000140E VOL: 0
;PCODE: $0000140F VOL: 0
;PCODE: $00001410 VOL: 0
;PCODE: $00001411 VOL: 0
;PCODE: $00001412 VOL: 0
;PCODE: $00001413 VOL: 0
;PCODE: $00001414 VOL: 0
; 0000 07D1     }
;PCODE: $00001415 VOL: 0
;PCODE: $00001416 VOL: 0
;PCODE: $00001417 VOL: 0
;PCODE: $00001418 VOL: 0
;PCODE: $00001419 VOL: 0
; 0000 07D2 for(i=0;i<=8;i++)
;PCODE: $0000141A VOL: 0
;PCODE: $0000141B VOL: 0
;PCODE: $0000141C VOL: 0
;PCODE: $0000141D VOL: 0
;PCODE: $0000141E VOL: 0
;PCODE: $0000141F VOL: 0
;PCODE: $00001420 VOL: 0
;PCODE: $00001421 VOL: 0
;PCODE: $00001422 VOL: 0
; 0000 07D3     {
; 0000 07D4     input[i] = ee_input[i];
;PCODE: $00001423 VOL: 0
;PCODE: $00001424 VOL: 0
;PCODE: $00001425 VOL: 0
;PCODE: $00001426 VOL: 0
;PCODE: $00001427 VOL: 0
;PCODE: $00001428 VOL: 0
;PCODE: $00001429 VOL: 0
;PCODE: $0000142A VOL: 0
;PCODE: $0000142B VOL: 0
;PCODE: $0000142C VOL: 0
;PCODE: $0000142D VOL: 0
;PCODE: $0000142E VOL: 0
; 0000 07D5     }
;PCODE: $0000142F VOL: 0
;PCODE: $00001430 VOL: 0
;PCODE: $00001431 VOL: 0
;PCODE: $00001432 VOL: 0
;PCODE: $00001433 VOL: 0
; 0000 07D6 for(i=0;i<=8;i++)
;PCODE: $00001434 VOL: 0
;PCODE: $00001435 VOL: 0
;PCODE: $00001436 VOL: 0
;PCODE: $00001437 VOL: 0
;PCODE: $00001438 VOL: 0
;PCODE: $00001439 VOL: 0
;PCODE: $0000143A VOL: 0
;PCODE: $0000143B VOL: 0
;PCODE: $0000143C VOL: 0
; 0000 07D7     {
; 0000 07D8     dp[i] = ee_dp[i];
;PCODE: $0000143D VOL: 0
;PCODE: $0000143E VOL: 0
;PCODE: $0000143F VOL: 0
;PCODE: $00001440 VOL: 0
;PCODE: $00001441 VOL: 0
;PCODE: $00001442 VOL: 0
;PCODE: $00001443 VOL: 0
;PCODE: $00001444 VOL: 0
;PCODE: $00001445 VOL: 0
;PCODE: $00001446 VOL: 0
;PCODE: $00001447 VOL: 0
;PCODE: $00001448 VOL: 0
; 0000 07D9     }
;PCODE: $00001449 VOL: 0
;PCODE: $0000144A VOL: 0
;PCODE: $0000144B VOL: 0
;PCODE: $0000144C VOL: 0
;PCODE: $0000144D VOL: 0
; 0000 07DA 
; 0000 07DB }
;PCODE: $0000144E VOL: 0
;PCODE: $0000144F VOL: 0
;PCODE: $00001450 VOL: 0
;
;// added to check if any input is tc. if so, then channel 8 is skipped for all purposes
;void tc_check()
; 0000 07DF {
;PCODE: $00001451 VOL: 0
;PCODE: $00001452 VOL: 0
; 0000 07E0 int i;
; 0000 07E1 tc_fl =0;
;PCODE: $00001453 VOL: 0
;PCODE: $00001454 VOL: 0
;	i -> R16,R17
;PCODE: $00001455 VOL: 0
;PCODE: $00001456 VOL: 0
;PCODE: $00001457 VOL: 0
; 0000 07E2 for (i=0;i<=7;i++)
;PCODE: $00001458 VOL: 0
;PCODE: $00001459 VOL: 0
;PCODE: $0000145A VOL: 0
;PCODE: $0000145B VOL: 0
;PCODE: $0000145C VOL: 0
;PCODE: $0000145D VOL: 0
;PCODE: $0000145E VOL: 0
;PCODE: $0000145F VOL: 0
;PCODE: $00001460 VOL: 0
; 0000 07E3     {
; 0000 07E4     if (input[i]>=2  && input[i] <=6) tc_fl =1;
;PCODE: $00001461 VOL: 0
;PCODE: $00001462 VOL: 0
;PCODE: $00001463 VOL: 0
;PCODE: $00001464 VOL: 0
;PCODE: $00001465 VOL: 0
;PCODE: $00001466 VOL: 0
;PCODE: $00001467 VOL: 0
;PCODE: $00001468 VOL: 0
;PCODE: $00001469 VOL: 0
;PCODE: $0000146A VOL: 0
;PCODE: $0000146B VOL: 0
;PCODE: $0000146C VOL: 0
;PCODE: $0000146D VOL: 0
;PCODE: $0000146E VOL: 0
;PCODE: $0000146F VOL: 0
;PCODE: $00001470 VOL: 0
;PCODE: $00001471 VOL: 0
;PCODE: $00001472 VOL: 0
; 0000 07E5     }
;PCODE: $00001473 VOL: 0
;PCODE: $00001474 VOL: 0
;PCODE: $00001475 VOL: 0
;PCODE: $00001476 VOL: 0
;PCODE: $00001477 VOL: 0
;PCODE: $00001478 VOL: 0
; 0000 07E6 if (tc_fl) skip[7] = ee_skip[7] = 1;    //force skip channel 8
;PCODE: $00001479 VOL: 0
;PCODE: $0000147A VOL: 0
;PCODE: $0000147B VOL: 0
;PCODE: $0000147C VOL: 0
;PCODE: $0000147D VOL: 0
;PCODE: $0000147E VOL: 0
;PCODE: $0000147F VOL: 0
;PCODE: $00001480 VOL: 0
;PCODE: $00001481 VOL: 0
; 0000 07E7 }
;PCODE: $00001482 VOL: 0
;PCODE: $00001483 VOL: 0
;PCODE: $00001484 VOL: 0
;PCODE: $00001485 VOL: 0
;
;void init(void)
; 0000 07EA {
;PCODE: $00001486 VOL: 0
;PCODE: $00001487 VOL: 0
; 0000 07EB // Input/Output Ports initialization
; 0000 07EC // Port A initialization
; 0000 07ED // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 07EE DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
;PCODE: $00001488 VOL: 0
;PCODE: $00001489 VOL: 0
; 0000 07EF // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
; 0000 07F0 PORTA=(1<<PORTA7) | (1<<PORTA6) | (1<<PORTA5) | (1<<PORTA4) | (1<<PORTA3) | (1<<PORTA2) | (1<<PORTA1) | (1<<PORTA0);
;PCODE: $0000148A VOL: 0
;PCODE: $0000148B VOL: 0
; 0000 07F1 
; 0000 07F2 // Port B initialization
; 0000 07F3 // Function: Bit7=Out Bit6=Out Bit5=In Bit4=In Bit3=In Bit2=In Bit1=Out Bit0=Out
; 0000 07F4 DDRB=(1<<DDB7) | (1<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $0000148C VOL: 0
;PCODE: $0000148D VOL: 0
; 0000 07F5 // State: Bit7=1 Bit6=1 Bit5=P Bit4=P Bit3=P Bit2=P Bit1=1 Bit0=1
; 0000 07F6 PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
;PCODE: $0000148E VOL: 0
;PCODE: $0000148F VOL: 0
; 0000 07F7 
; 0000 07F8 // Port C initialization
; 0000 07F9 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 07FA DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00001490 VOL: 0
;PCODE: $00001491 VOL: 0
; 0000 07FB // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
; 0000 07FC PORTC=(1<<PORTC7) | (1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
;PCODE: $00001492 VOL: 0
;PCODE: $00001493 VOL: 0
; 0000 07FD 
; 0000 07FE // Port D initialization
; 0000 07FF // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0800 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $00001494 VOL: 0
;PCODE: $00001495 VOL: 0
; 0000 0801 // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
; 0000 0802 PORTD=(1<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (1<<PORTD1) | (1<<PORTD0);
;PCODE: $00001496 VOL: 0
;PCODE: $00001497 VOL: 0
; 0000 0803 
; 0000 0804 // Timer/Counter 0 initialization
; 0000 0805 // Clock source: System Clock
; 0000 0806 // Clock value: Timer 0 Stopped
; 0000 0807 // Mode: Normal top=0xFF
; 0000 0808 // OC0 output: Disconnected
; 0000 0809 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00001498 VOL: 0
;PCODE: $00001499 VOL: 0
; 0000 080A TCNT0=0x00;
;PCODE: $0000149A VOL: 0
;PCODE: $0000149B VOL: 0
; 0000 080B OCR0=0x00;
;PCODE: $0000149C VOL: 0
;PCODE: $0000149D VOL: 0
; 0000 080C 
; 0000 080D // Timer/Counter 1 initialization
; 0000 080E // Clock source: System Clock
; 0000 080F // Clock value: 172.800 kHz
; 0000 0810 // Mode: Normal top=0xFFFF
; 0000 0811 // OC1A output: Disconnected
; 0000 0812 // OC1B output: Disconnected
; 0000 0813 // Noise Canceler: Off
; 0000 0814 // Input Capture on Falling Edge
; 0000 0815 // Timer Period: 0.5 s
; 0000 0816 // Timer1 Overflow Interrupt: On
; 0000 0817 // Input Capture Interrupt: Off
; 0000 0818 // Compare A Match Interrupt: Off
; 0000 0819 // Compare B Match Interrupt: Off
; 0000 081A TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000149E VOL: 0
;PCODE: $0000149F VOL: 0
; 0000 081B TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $000014A0 VOL: 0
;PCODE: $000014A1 VOL: 0
; 0000 081C TCNT1H=0xAB;
;PCODE: $000014A2 VOL: 0
;PCODE: $000014A3 VOL: 0
; 0000 081D TCNT1L=0xA0;
;PCODE: $000014A4 VOL: 0
;PCODE: $000014A5 VOL: 0
; 0000 081E ICR1H=0x00;
;PCODE: $000014A6 VOL: 0
;PCODE: $000014A7 VOL: 0
; 0000 081F ICR1L=0x00;
;PCODE: $000014A8 VOL: 0
;PCODE: $000014A9 VOL: 0
; 0000 0820 OCR1AH=0x00;
;PCODE: $000014AA VOL: 0
;PCODE: $000014AB VOL: 0
; 0000 0821 OCR1AL=0x00;
;PCODE: $000014AC VOL: 0
;PCODE: $000014AD VOL: 0
; 0000 0822 OCR1BH=0x00;
;PCODE: $000014AE VOL: 0
;PCODE: $000014AF VOL: 0
; 0000 0823 OCR1BL=0x00;
;PCODE: $000014B0 VOL: 0
;PCODE: $000014B1 VOL: 0
; 0000 0824 
; 0000 0825 // Timer/Counter 2 initialization
; 0000 0826 // Clock source: System Clock
; 0000 0827 // Clock value: Timer2 Stopped
; 0000 0828 // Mode: Normal top=0xFF
; 0000 0829 // OC2 output: Disconnected
; 0000 082A ASSR=0<<AS2;
;PCODE: $000014B2 VOL: 0
;PCODE: $000014B3 VOL: 0
; 0000 082B TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000014B4 VOL: 0
;PCODE: $000014B5 VOL: 0
; 0000 082C TCNT2=0x00;
;PCODE: $000014B6 VOL: 0
;PCODE: $000014B7 VOL: 0
; 0000 082D OCR2=0x00;
;PCODE: $000014B8 VOL: 0
;PCODE: $000014B9 VOL: 0
; 0000 082E 
; 0000 082F // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0830 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $000014BA VOL: 0
;PCODE: $000014BB VOL: 0
; 0000 0831 
; 0000 0832 // External Interrupt(s) initialization
; 0000 0833 // INT0: Off
; 0000 0834 // INT1: Off
; 0000 0835 // INT2: Off
; 0000 0836 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000014BC VOL: 0
;PCODE: $000014BD VOL: 0
; 0000 0837 MCUCSR=(0<<ISC2);
;PCODE: $000014BE VOL: 0
;PCODE: $000014BF VOL: 0
; 0000 0838 
; 0000 0839 // USART initialization
; 0000 083A // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 083B // USART Receiver: On
; 0000 083C // USART Transmitter: On
; 0000 083D // USART Mode: Asynchronous
; 0000 083E // USART Baud Rate: 9600 (Double Speed Mode)
; 0000 083F UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (1<<U2X) | (0<<MPCM);
;PCODE: $000014C0 VOL: 0
;PCODE: $000014C1 VOL: 0
; 0000 0840 UCSRB=(1<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000014C2 VOL: 0
;PCODE: $000014C3 VOL: 0
; 0000 0841 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $000014C4 VOL: 0
;PCODE: $000014C5 VOL: 0
; 0000 0842 UBRRH=0x00;
;PCODE: $000014C6 VOL: 0
;PCODE: $000014C7 VOL: 0
; 0000 0843 UBRRL=0x8F;
;PCODE: $000014C8 VOL: 0
;PCODE: $000014C9 VOL: 0
; 0000 0844 
; 0000 0845 // Analog Comparator initialization
; 0000 0846 // Analog Comparator: Off
; 0000 0847 // The Analog Comparator's positive input is
; 0000 0848 // connected to the AIN0 pin
; 0000 0849 // The Analog Comparator's negative input is
; 0000 084A // connected to the AIN1 pin
; 0000 084B ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000014CA VOL: 0
;PCODE: $000014CB VOL: 0
; 0000 084C SFIOR=(0<<ACME);
;PCODE: $000014CC VOL: 0
;PCODE: $000014CD VOL: 0
; 0000 084D 
; 0000 084E // ADC initialization
; 0000 084F // ADC disabled
; 0000 0850 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000014CE VOL: 0
;PCODE: $000014CF VOL: 0
; 0000 0851 
; 0000 0852 // SPI initialization
; 0000 0853 // SPI disabled
; 0000 0854 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000014D0 VOL: 0
;PCODE: $000014D1 VOL: 0
; 0000 0855 
; 0000 0856 // TWI initialization
; 0000 0857 // TWI disabled
; 0000 0858 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000014D2 VOL: 0
;PCODE: $000014D3 VOL: 0
; 0000 0859 
; 0000 085A // Bit-Banged I2C Bus initialization
; 0000 085B // I2C Port: PORTB
; 0000 085C // I2C SDA bit: 1
; 0000 085D // I2C SCL bit: 0
; 0000 085E // Bit Rate: 100 kHz
; 0000 085F // Note: I2C settings are specified in the
; 0000 0860 // Project|Configure|C Compiler|Libraries|I2C menu.
; 0000 0861 i2c_init();
;PCODE: $000014D4 VOL: 0
; 0000 0862 delay_ms(250);
;PCODE: $000014D5 VOL: 0
;PCODE: $000014D6 VOL: 0
;PCODE: $000014D7 VOL: 0
; 0000 0863 adc3421_init();
;PCODE: $000014D8 VOL: 0
; 0000 0864 delay_ms(250);
;PCODE: $000014D9 VOL: 0
;PCODE: $000014DA VOL: 0
;PCODE: $000014DB VOL: 0
; 0000 0865 
; 0000 0866 // Global enable interrupts
; 0000 0867 #asm("sei")
;PCODE: $000014DC VOL: 0
	sei
;PCODE: $000014DD VOL: 0
; 0000 0868 }
;PCODE: $000014DE VOL: 0
;PCODE: $000014DF VOL: 0
;
;void main(void)
; 0000 086B {
;PCODE: $000014E0 VOL: 0
; 0000 086C // Declare your local variables here
; 0000 086D 
; 0000 086E 
; 0000 086F init();
;PCODE: $000014E1 VOL: 0
; 0000 0870 eeprom_transfer();
;PCODE: $000014E2 VOL: 0
; 0000 0871 //change serial speed according to value set
; 0000 0872 if (gen[2] ==0)    ///9600 baud
;PCODE: $000014E3 VOL: 0
;PCODE: $000014E4 VOL: 0
;PCODE: $000014E5 VOL: 0
;PCODE: $000014E6 VOL: 0
; 0000 0873 {
; 0000 0874 UBRRH=0x00;
;PCODE: $000014E7 VOL: 0
;PCODE: $000014E8 VOL: 0
; 0000 0875 UBRRL=0x8F;
;PCODE: $000014E9 VOL: 0
;PCODE: $000014EA VOL: 0
; 0000 0876 }
; 0000 0877 else if (gen[2] ==1)   //19200 baud
;PCODE: $000014EB VOL: 0
;PCODE: $000014EC VOL: 0
;PCODE: $000014ED VOL: 0
;PCODE: $000014EE VOL: 0
;PCODE: $000014EF VOL: 0
;PCODE: $000014F0 VOL: 0
; 0000 0878 {
; 0000 0879 UBRRH=0x00;
;PCODE: $000014F1 VOL: 0
;PCODE: $000014F2 VOL: 0
; 0000 087A UBRRL=0x47;
;PCODE: $000014F3 VOL: 0
;PCODE: $000014F4 VOL: 0
; 0000 087B }
; 0000 087C else if (gen[2] ==2)   //38400 baud
;PCODE: $000014F5 VOL: 0
;PCODE: $000014F6 VOL: 0
;PCODE: $000014F7 VOL: 0
;PCODE: $000014F8 VOL: 0
;PCODE: $000014F9 VOL: 0
;PCODE: $000014FA VOL: 0
; 0000 087D {
; 0000 087E UBRRH=0x00;
;PCODE: $000014FB VOL: 0
;PCODE: $000014FC VOL: 0
; 0000 087F UBRRL=0x23;
;PCODE: $000014FD VOL: 0
;PCODE: $000014FE VOL: 0
; 0000 0880 }
; 0000 0881 else if (gen[2] ==3)   //115200 baud
;PCODE: $000014FF VOL: 0
;PCODE: $00001500 VOL: 0
;PCODE: $00001501 VOL: 0
;PCODE: $00001502 VOL: 0
;PCODE: $00001503 VOL: 0
;PCODE: $00001504 VOL: 0
; 0000 0882 {
; 0000 0883 UBRRH=0x00;
;PCODE: $00001505 VOL: 0
;PCODE: $00001506 VOL: 0
; 0000 0884 UBRRL=0x0b;
;PCODE: $00001507 VOL: 0
;PCODE: $00001508 VOL: 0
; 0000 0885 }
; 0000 0886 else                    //force to default 9600 baud if not above
;PCODE: $00001509 VOL: 0
;PCODE: $0000150A VOL: 0
; 0000 0887 {
; 0000 0888 gen[2]=0;
;PCODE: $0000150B VOL: 0
;PCODE: $0000150C VOL: 0
;PCODE: $0000150D VOL: 0
;PCODE: $0000150E VOL: 0
; 0000 0889 UBRRH=0x00;
;PCODE: $0000150F VOL: 0
;PCODE: $00001510 VOL: 0
; 0000 088A UBRRL=0x8F;
;PCODE: $00001511 VOL: 0
;PCODE: $00001512 VOL: 0
; 0000 088B }
;PCODE: $00001513 VOL: 0
;PCODE: $00001514 VOL: 0
;PCODE: $00001515 VOL: 0
;PCODE: $00001516 VOL: 0
; 0000 088C 
; 0000 088D cal_fl =0;
;PCODE: $00001517 VOL: 0
;PCODE: $00001518 VOL: 0
;PCODE: $00001519 VOL: 0
; 0000 088E if (!key5) cal_fl =1;
;PCODE: $0000151A VOL: 0
;PCODE: $0000151B VOL: 0
;PCODE: $0000151C VOL: 0
;PCODE: $0000151D VOL: 0
;PCODE: $0000151E VOL: 0
;PCODE: $0000151F VOL: 0
; 0000 088F mb_dir =0;
;PCODE: $00001520 VOL: 0
;PCODE: $00001521 VOL: 0
;PCODE: $00001522 VOL: 0
; 0000 0890 while (1)
;PCODE: $00001523 VOL: 0
; 0000 0891       {
; 0000 0892       // Place your code here
; 0000 0893       display_check();
;PCODE: $00001524 VOL: 0
; 0000 0894       display_out(display_count);
;PCODE: $00001525 VOL: 0
;PCODE: $00001526 VOL: 0
; 0000 0895       display_count++;
;PCODE: $00001527 VOL: 0
;PCODE: $00001528 VOL: 0
;PCODE: $00001529 VOL: 0
; 0000 0896       led_check();
;PCODE: $0000152A VOL: 0
; 0000 0897       relay_logic();
;PCODE: $0000152B VOL: 0
; 0000 0898              key_check();
;PCODE: $0000152C VOL: 0
; 0000 0899       tc_check();
;PCODE: $0000152D VOL: 0
; 0000 089A       if(display_count >=10)
;PCODE: $0000152E VOL: 0
;PCODE: $0000152F VOL: 0
;PCODE: $00001530 VOL: 0
; 0000 089B       {
; 0000 089C        display_count =0;
;PCODE: $00001531 VOL: 0
; 0000 089D        if (hsec_fl)
;PCODE: $00001532 VOL: 0
;PCODE: $00001533 VOL: 0
;PCODE: $00001534 VOL: 0
; 0000 089E         {
; 0000 089F         hsec_fl =0;
;PCODE: $00001535 VOL: 0
;PCODE: $00001536 VOL: 0
;PCODE: $00001537 VOL: 0
; 0000 08A0         pv_update();
;PCODE: $00001538 VOL: 0
; 0000 08A1         check_set();
;PCODE: $00001539 VOL: 0
; 0000 08A2         if (modbus_fl)
;PCODE: $0000153A VOL: 0
;PCODE: $0000153B VOL: 0
;PCODE: $0000153C VOL: 0
; 0000 08A3             {
; 0000 08A4             modbus_fl =0;
;PCODE: $0000153D VOL: 0
;PCODE: $0000153E VOL: 0
;PCODE: $0000153F VOL: 0
; 0000 08A5             mb_datatransfer();
;PCODE: $00001540 VOL: 0
; 0000 08A6             check_mbreceived();
;PCODE: $00001541 VOL: 0
; 0000 08A7  //           delay_ms(100);
; 0000 08A8 //            mb_dir =0;      //set to receieve
; 0000 08A9             }
; 0000 08AA        if (ser_fl)
;PCODE: $00001542 VOL: 0
;PCODE: $00001543 VOL: 0
;PCODE: $00001544 VOL: 0
;PCODE: $00001545 VOL: 0
; 0000 08AB         {
; 0000 08AC         ser_fl =0;
;PCODE: $00001546 VOL: 0
;PCODE: $00001547 VOL: 0
;PCODE: $00001548 VOL: 0
; 0000 08AD //        mb_dir =0;
; 0000 08AE //        delay_ms(2);
; 0000 08AF //        printf("%5u %5u %5u %5u %5u %5u %5u %5u\n",process_value[0],process_value[1],process_value[2],process_value[3] ...
; 0000 08B0 //        mb_dir =1;
; 0000 08B1         }
; 0000 08B2       }
;PCODE: $00001549 VOL: 0
; 0000 08B3 //      process_value[0] =1234;
; 0000 08B4 //      process_value[1] = 5678;
; 0000 08B5       }
;PCODE: $0000154A VOL: 0
; 0000 08B6 }
;PCODE: $0000154B VOL: 0
;PCODE: $0000154C VOL: 0
;PCODE: $0000154D VOL: 0
; 0000 08B7 }
;PCODE: $0000154E VOL: 0
;PCODE: $0000154F VOL: 0
;PCODE: $00001550 VOL: 0
